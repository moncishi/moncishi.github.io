<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>STM32 HAL库驱动DHT11读取温湿度程序</title>
      <link href="/2024/03/stm32-STM32-HAL%E5%BA%93%E9%A9%B1%E5%8A%A8DHT11%E8%AF%BB%E5%8F%96%E6%B8%A9%E6%B9%BF%E5%BA%A6%E7%A8%8B%E5%BA%8F/"/>
      <url>/2024/03/stm32-STM32-HAL%E5%BA%93%E9%A9%B1%E5%8A%A8DHT11%E8%AF%BB%E5%8F%96%E6%B8%A9%E6%B9%BF%E5%BA%A6%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="STM32使用HAL库驱动DHT11读取温湿度程序"><a href="#STM32使用HAL库驱动DHT11读取温湿度程序" class="headerlink" title="STM32使用HAL库驱动DHT11读取温湿度程序"></a>STM32使用HAL库驱动DHT11读取温湿度程序</h2><p><strong>驱动DHT11、DHT22、DS18BB20等温湿度模块时序是比较简单的，关键在于控制好时序的 <code>&amp;#x5EF6;&amp;#x65F6;&amp;#x65F6;&amp;#x95F4;</code> ，HAL库的延时函数HAL_Delay是毫秒级别延时函数，所关键点就是实现微秒级别的延时函数。</strong></p><p><strong>微秒级别延时函数实现见我的另一篇博客：<a href="https://blog.csdn.net/qq153471503/article/details/102930097">https://blog.csdn.net/qq153471503/article/details/102930097</a></strong></p><p><strong>扫描以下二维码，关注公众号 <code>&amp;#x96CD;&amp;#x6B63;&amp;#x4E0D;&amp;#x79C3;&amp;#x5934;</code> 获取更多STM32资源及干货！</strong><br><img src="https://img-blog.csdnimg.cn/20210126155428872.png"></p><h3 id="sys-h"><a href="#sys-h" class="headerlink" title=";  sys.h"></a><a name="sysh_13">;</a>  sys.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _SYS_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _SYS_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BITBAND(addr, bitnum) ((addr &amp; 0xF0000000)+0x2000000+((addr &amp;0xFFFFF)&lt;&lt;5)+(bitnum&lt;&lt;2))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEM_ADDR(addr)  *((volatile unsigned long  *)(addr))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BIT_ADDR(addr, bitnum)   MEM_ADDR(BITBAND(addr, bitnum))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOA_ODR_Addr    (GPIOA_BASE+12)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOB_ODR_Addr    (GPIOB_BASE+12)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOC_ODR_Addr    (GPIOC_BASE+12)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOD_ODR_Addr    (GPIOD_BASE+12)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOE_ODR_Addr    (GPIOE_BASE+12)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOF_ODR_Addr    (GPIOF_BASE+12)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOG_ODR_Addr    (GPIOG_BASE+12)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOA_IDR_Addr    (GPIOA_BASE+8)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOB_IDR_Addr    (GPIOB_BASE+8)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOC_IDR_Addr    (GPIOC_BASE+8)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOD_IDR_Addr    (GPIOD_BASE+8)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOE_IDR_Addr    (GPIOE_BASE+8)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOF_IDR_Addr    (GPIOF_BASE+8)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOG_IDR_Addr    (GPIOG_BASE+8)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAout(n)   BIT_ADDR(GPIOA_ODR_Addr,n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAin(n)    BIT_ADDR(GPIOA_IDR_Addr,n)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PBout(n)   BIT_ADDR(GPIOB_ODR_Addr,n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PBin(n)    BIT_ADDR(GPIOB_IDR_Addr,n)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCout(n)   BIT_ADDR(GPIOC_ODR_Addr,n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCin(n)    BIT_ADDR(GPIOC_IDR_Addr,n)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PDout(n)   BIT_ADDR(GPIOD_ODR_Addr,n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PDin(n)    BIT_ADDR(GPIOD_IDR_Addr,n)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PEout(n)   BIT_ADDR(GPIOE_ODR_Addr,n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PEin(n)    BIT_ADDR(GPIOE_IDR_Addr,n)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFout(n)   BIT_ADDR(GPIOF_ODR_Addr,n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFin(n)    BIT_ADDR(GPIOF_IDR_Addr,n)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PGout(n)   BIT_ADDR(GPIOG_ODR_Addr,n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PGin(n)    BIT_ADDR(GPIOG_IDR_Addr,n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="dht11-h"><a href="#dht11-h" class="headerlink" title="dht11.h"></a>dht11.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DHT11_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DHT11_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint8_t</span> u8;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint16_t</span> u16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint32_t</span> u32;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DHT11_IO_IN()  &#123;IODHT22_GPIO_Port-&gt;CRH &amp;= 0xFFFFF0FF;IODHT22_GPIO_Port-&gt;CRH |= 8 &lt;&lt; 8;&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DHT11_IO_OUT() &#123;IODHT22_GPIO_Port-&gt;CRH &amp;= 0xFFFFF0FF;IODHT22_GPIO_Port-&gt;CRH |= 3 &lt;&lt; 8;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>DHT11_DQ_OUT PCout(10)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>DHT11_DQ_IN  PCin(10)</span></span><br><span class="line"></span><br><span class="line">u8 <span class="title function_">DHT11_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line">u8 <span class="title function_">DHT11_Read_Data</span><span class="params">(u8 *temp, u8 *humi)</span>;</span><br><span class="line">u8 <span class="title function_">DHT11_Read_Byte</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line">u8 <span class="title function_">DHT11_Read_Bit</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line">u8 <span class="title function_">DHT11_Check</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DHT11_Rst</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line">u8 <span class="title function_">DHT11_Read_Data_Float</span><span class="params">(<span class="type">float</span> *temp,<span class="type">float</span> *humi)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="dht11-c"><a href="#dht11-c" class="headerlink" title="dht11.c"></a>dht11.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dht11.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DHT11_Rst</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DHT11_IO_OUT();</span><br><span class="line">    DHT11_DQ_OUT=<span class="number">0</span>;</span><br><span class="line">    delay_ms(<span class="number">20</span>);</span><br><span class="line">    DHT11_DQ_OUT=<span class="number">1</span>;</span><br><span class="line">    delay_us(<span class="number">30</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u8 <span class="title function_">DHT11_Check</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 retry=<span class="number">0</span>;</span><br><span class="line">    DHT11_IO_IN();</span><br><span class="line">    <span class="keyword">while</span> (DHT11_DQ_IN&amp;&amp;retry&lt;<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        retry++;</span><br><span class="line">        delay_us(<span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span>(retry&gt;=<span class="number">100</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> retry=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!DHT11_DQ_IN&amp;&amp;retry&lt;<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        retry++;</span><br><span class="line">        delay_us(<span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span>(retry&gt;=<span class="number">100</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u8 <span class="title function_">DHT11_Read_Bit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 retry=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(DHT11_DQ_IN&amp;&amp;retry&lt;<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        retry++;</span><br><span class="line">        delay_us(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    retry=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!DHT11_DQ_IN&amp;&amp;retry&lt;<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        retry++;</span><br><span class="line">        delay_us(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    delay_us(<span class="number">40</span>);</span><br><span class="line">    <span class="keyword">if</span>(DHT11_DQ_IN)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u8 <span class="title function_">DHT11_Read_Byte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 i,dat;</span><br><span class="line">    dat=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dat&lt;<span class="number">1</span>;</span><br><span class="line">        dat|=DHT11_Read_Bit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u8 <span class="title function_">DHT11_Read_Data</span><span class="params">(u8 *temp,u8 *humi)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 buf[<span class="number">5</span>];</span><br><span class="line">    u8 i;</span><br><span class="line">    DHT11_Rst();</span><br><span class="line">    <span class="keyword">if</span>(DHT11_Check()==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            buf[i]=DHT11_Read_Byte();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((buf[<span class="number">0</span>]+buf[<span class="number">1</span>]+buf[<span class="number">2</span>]+buf[<span class="number">3</span>])==buf[<span class="number">4</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            *humi=buf[<span class="number">0</span>];</span><br><span class="line">            *temp=buf[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u8 <span class="title function_">DHT11_Read_Data_Float</span><span class="params">(<span class="type">float</span> *temp,<span class="type">float</span> *humi)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 buf[<span class="number">5</span>];</span><br><span class="line">    u8 i;</span><br><span class="line">    DHT11_Rst();</span><br><span class="line">    <span class="keyword">if</span>(DHT11_Check()==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            buf[i]=DHT11_Read_Byte();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((buf[<span class="number">0</span>]+buf[<span class="number">1</span>]+buf[<span class="number">2</span>]+buf[<span class="number">3</span>])==buf[<span class="number">4</span>])</span><br><span class="line">        &#123;</span><br><span class="line">*humi=((buf[<span class="number">0</span>] &lt;&lt; <span class="number">8</span>) + buf[<span class="number">1</span>]) / <span class="number">10.0</span>;</span><br><span class="line">*temp=((buf[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + buf[<span class="number">3</span>]) / <span class="number">10.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u8 <span class="title function_">DHT11_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 ret = <span class="number">1</span>;</span><br><span class="line">    DHT11_Rst();</span><br><span class="line">    ret = DHT11_Check();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dht11 init %s. \r\n&quot;</span>, ret == <span class="number">0</span> ? <span class="string">&quot;ok&quot;</span> : <span class="string">&quot;failed&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 外设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32 实现 44 矩阵键盘扫描（HAL库、标准库 都适用） - 白菜没我白 - 博客园</title>
      <link href="/2024/03/stm32-STM32-%E5%AE%9E%E7%8E%B0-44-%E7%9F%A9%E9%98%B5%E9%94%AE%E7%9B%98%E6%89%AB%E6%8F%8F%EF%BC%88HAL%E5%BA%93%E3%80%81%E6%A0%87%E5%87%86%E5%BA%93-%E9%83%BD%E9%80%82%E7%94%A8%EF%BC%89-%E7%99%BD%E8%8F%9C%E6%B2%A1%E6%88%91%E7%99%BD-%E5%8D%9A%E5%AE%A2%E5%9B%AD/"/>
      <url>/2024/03/stm32-STM32-%E5%AE%9E%E7%8E%B0-44-%E7%9F%A9%E9%98%B5%E9%94%AE%E7%9B%98%E6%89%AB%E6%8F%8F%EF%BC%88HAL%E5%BA%93%E3%80%81%E6%A0%87%E5%87%86%E5%BA%93-%E9%83%BD%E9%80%82%E7%94%A8%EF%BC%89-%E7%99%BD%E8%8F%9C%E6%B2%A1%E6%88%91%E7%99%BD-%E5%8D%9A%E5%AE%A2%E5%9B%AD/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>本文实现的代码是基于STM32HAL库的基础上的，不过标准库也可以用，只是调用的库函数不同，逻辑跟配置是一样的，按我这里的逻辑来配置即可。</p><p><strong>1、键盘原理图：</strong></p><p><img src="https://img2018.cnblogs.com/blog/1433771/201903/1433771-20190313172634453-1011388660.png"></p><p>原理举例：先把 F0-F7 内部拉高，这样这个8个引脚都是高电平，然后就进行列扫描。例如：假如按下3按钮，Y3 列扫描，把F4先拉低，然后读取F0-F3的状态，就会读出为1110，这就可 以知道是F3行拉低了，同时这时候是程序控制F4拉低的，这样就可以知道是F4列导致它转态变化了的，这样就可以定位出是F4列F3行的按键按下了；其他的列也是这样子扫描，就可以实现了。</p><p><strong>2、STM32 cubemx 引脚配置图：</strong></p><p><img src="https://img2018.cnblogs.com/blog/1433771/201903/1433771-20190313173013856-453677748.png"></p><p>这里用外部晶振内部晶振都可以，时钟对这个没什么影响，不用开中断，所以其他的配置就不细说了，下面再说一下这8个GPIO的配置。</p><p><img src="https://img2018.cnblogs.com/blog/1433771/201903/1433771-20190313173246180-1491953324.png"></p><p>4个引脚配推挽输出，这4个配输出的引脚内部上下拉不用配置；另外4个配成输入，内部上拉。</p><p><strong>3、生成代码后，开始编写逻辑：</strong></p><p>编写之前我们先做一下头文件的定义，把一些要用到的宏定义好：</p><pre><span>#ifndef __HW_key_H__</span><span>#define</span> __HW_key_H__<span>#include </span><span>&quot;</span><span>main.h</span><span>&quot;</span><span>#include </span><span>&quot;</span><span>stm32f1xx_hal.h</span><span>&quot;</span><span>#include </span>&lt;<span>string</span>.h&gt;<span>char</span> KEY_SCAN(<span>void</span><span>);</span><span>char</span> KEY_ROW_SCAN(<span>void</span><span>);</span><span>void</span> HW_KEY_FUNCTION(<span>void</span><span>);</span><span>#define</span> KEY_CLO0_OUT_LOW  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_7,GPIO_PIN_RESET)<span>#define</span> KEY_CLO1_OUT_LOW  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_RESET)<span>#define</span> KEY_CLO2_OUT_LOW  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_RESET)<span>#define</span> KEY_CLO3_OUT_LOW  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_RESET)<span>#define</span> KEY_CLO0_OUT_HIGH  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_7,GPIO_PIN_SET)<span>#define</span> KEY_CLO1_OUT_HIGH  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,GPIO_PIN_SET)<span>#define</span> KEY_CLO2_OUT_HIGH  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET)<span>#define</span> KEY_CLO3_OUT_HIGH  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10,GPIO_PIN_SET)<span>#endif</span></pre><p>然后包含头文件以及定义一些要用到的变量数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;HW_key.h&quot;</span><br><span class="line">uint8_t Key_row[1]=&#123;0xff&#125;;   //保存按键行扫描情况的状态数组</span><br></pre></td></tr></table></figure><p>接着可以写扫描逻辑了，先编写横扫描的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *函数名：KEY_ROW_SCAN</span><br><span class="line"> *功  能：按键行扫描</span><br><span class="line"> *返回值：1~4，对应1~4行按键位置</span><br><span class="line"> */</span><br><span class="line">char KEY_ROW_SCAN(void)</span><br><span class="line">&#123;</span><br><span class="line">    //读出行扫描状态</span><br><span class="line">    Key_row[0] = HAL_GPIO_ReadPin(GPIOE,KEY_row0_Pin)&lt;&lt;3;</span><br><span class="line">    Key_row[0] = Key_row[0] | (HAL_GPIO_ReadPin(GPIOE,KEY_row1_Pin)&lt;&lt;2);</span><br><span class="line">    Key_row[0] = Key_row[0] | (HAL_GPIO_ReadPin(GPIOE,KEY_row2_Pin)&lt;&lt;1);</span><br><span class="line">    Key_row[0] = Key_row[0] | (HAL_GPIO_ReadPin(GPIOE,KEY_row3_Pin));</span><br><span class="line"></span><br><span class="line">    if(Key_row[0] != 0x0f)         //行扫描有变化，判断该列有按键按下</span><br><span class="line">    &#123;</span><br><span class="line">      HAL_Delay(10);                    //消抖</span><br><span class="line">      if(Key_row[0] != 0x0f)</span><br><span class="line">        &#123;</span><br><span class="line">                //printf(&quot;Key_Row_DATA = 0x%x\r\n&quot;,Key_row[0]);</span><br><span class="line">                switch(Key_row[0])</span><br><span class="line">                &#123;</span><br><span class="line">                    case 0x07:         //0111 判断为该列第1行的按键按下</span><br><span class="line">                        return 1;</span><br><span class="line">                    case 0x0b:         //1011 判断为该列第2行的按键按下</span><br><span class="line">                        return 2;</span><br><span class="line">                    case 0x0d:         //1101 判断为该列第3行的按键按下</span><br><span class="line">                        return 3;</span><br><span class="line">                    case 0x0e:         //1110 判断为该列第4行的按键按下</span><br><span class="line">                        return 4;</span><br><span class="line">                    default :</span><br><span class="line">                        return 0;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    else return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数，可以判断哪一行有按键按下，并返回有按键按下的行数。</p><p>接着编写列扫描的代码，这里的思想是，先扫描第一列，接着判断第一列有没有行被按下，有的话就可以直接定位到这一列的哪一行，其他4列逻辑一样，这样就可以定位到哪个按键按下了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *函数名：KEY_SCAN</span><br><span class="line"> *功  能：4*4按键扫描</span><br><span class="line"> *返回值：0~16，对应16个按键</span><br><span class="line"> */</span><br><span class="line">char KEY_SCAN(void)</span><br><span class="line">&#123;</span><br><span class="line">    char Key_Num=0;       //1-16对应的按键数</span><br><span class="line">    char key_row_num=0;        //行扫描结果记录</span><br><span class="line"></span><br><span class="line">    KEY_CLO0_OUT_LOW;</span><br><span class="line">    if( (key_row_num=KEY_ROW_SCAN()) != 0 )</span><br><span class="line">    &#123;</span><br><span class="line">        while(KEY_ROW_SCAN() != 0);  //消抖</span><br><span class="line">        Key_Num = 0 + key_row_num;</span><br><span class="line">        //printf(&quot;Key_Clo_1\r\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    KEY_CLO0_OUT_HIGH;</span><br><span class="line"></span><br><span class="line">    KEY_CLO1_OUT_LOW;</span><br><span class="line">    if( (key_row_num=KEY_ROW_SCAN()) != 0 )</span><br><span class="line">    &#123;</span><br><span class="line">        while(KEY_ROW_SCAN() != 0);</span><br><span class="line">        Key_Num = 4 + key_row_num;</span><br><span class="line">        //printf(&quot;Key_Clo_2\r\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    KEY_CLO1_OUT_HIGH;</span><br><span class="line"></span><br><span class="line">    KEY_CLO2_OUT_LOW;</span><br><span class="line">    if( (key_row_num=KEY_ROW_SCAN()) != 0 )</span><br><span class="line">    &#123;</span><br><span class="line">        while(KEY_ROW_SCAN() != 0);</span><br><span class="line">    Key_Num = 8 + key_row_num;</span><br><span class="line">        //printf(&quot;Key_Clo_3\r\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    KEY_CLO2_OUT_HIGH;</span><br><span class="line"></span><br><span class="line">    KEY_CLO3_OUT_LOW;</span><br><span class="line">    if( (key_row_num=KEY_ROW_SCAN()) != 0 )</span><br><span class="line">    &#123;</span><br><span class="line">//        Key_row[0] = HAL_GPIO_ReadPin(GPIOE,KEY_col0_Pin)&lt;//        Key_row[0] = Key_row[0] | (HAL_GPIO_ReadPin(GPIOE,KEY_col1_Pin)&lt;//        Key_row[0] = Key_row[0] | (HAL_GPIO_ReadPin(GPIOE,KEY_col2_Pin)&lt;//        Key_row[0] = Key_row[0] | (HAL_GPIO_ReadPin(GPIOE,KEY_col3_Pin));</span><br><span class="line">//        printf(&quot;Key_Clo4_DATA = 0x%x\r\n&quot;,Key_row[0]);</span><br><span class="line">        while(KEY_ROW_SCAN() != 0);</span><br><span class="line">        Key_Num = 12 + key_row_num;</span><br><span class="line">        //printf(&quot;Key_Clo_4\r\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    KEY_CLO3_OUT_HIGH;</span><br><span class="line"></span><br><span class="line">    return Key_Num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数就可以直接返回1-16个按键的按键数了，按下第一个按键就返回1，第2个就返回2，以此类推。下面可以调用这个函数做按键按下的操作了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *函数名：KEY_ROW_SCAN</span><br><span class="line"> *功  能：执行按下按键后的操作</span><br><span class="line"> *返回值：无</span><br><span class="line"> */</span><br><span class="line">void HW_KEY_FUNCTION(void)</span><br><span class="line">&#123;</span><br><span class="line">    char key_confirm;</span><br><span class="line">    key_confirm = KEY_SCAN();</span><br><span class="line">    if( 0 &lt; key_confirm  &amp;&amp; key_confirm &lt; 17 )</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;Key_NUM = %d \r\n&quot;,key_confirm); //按下1-16个按键的操作</span><br><span class="line">        printf(&quot;= = = = = = = = = = = \r\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这里就是用串口助手打印出来查看哪个按键按下的，实测可用。</p><p><img src="https://img2018.cnblogs.com/blog/1433771/201903/1433771-20190318150541397-1921208533.png"></p><p><strong>4、总结：</strong></p><p>（1）先配置8个引脚，4个配置输入，上拉；4个配置成推挽（PP）输出，不用上下拉，输出高电平；</p><p>（2）软件逻辑：</p><p>a. 先说一下行扫描的原理，因为如果有按键按下的话，某一个输入的引脚就会跟对应的输出引脚连接，因为输出为高电平，所以对应的输入引脚会被拉高，读取引脚的状态，判断哪个引脚被拉高就可以知道哪一行有按键按下了；总的来说是通过高四位输出高电平来对矩阵键盘进行逐行扫描，当低四位接收到的数据不全为1的时候，说明有按键按下，然后通过接收到的数据是哪一位为0来判断是哪一行按键被按下；</p><p>b. 列扫描原理：思路是先把第一列输出低电平，接着读取高4位的电平转态，单不全为1时，说明这一列有按键按下，同时结合行扫描判断出来的行数定位到按下的按键。程序里是扫描第一列的时候第一列给低电平，接着进行行扫描判断，因为输入输出引脚都是高电平了，只有第一列的引脚是低电平，所以当第一列有按键按下的时候，行扫描读到的4个引脚就不全为1，这时因为第一列的电平是我们自己给的，所以就可以直接判断这一列有按键按下；接着利用行扫描原理定位哪一行有按键按下，这样就可以判断出第一列的某一行的按键被按下了，其他3列同理，然后轮流扫描4列就可以判断16个按键了。</p><p>通俗点说，就是如果我给这一列低电平，造成了行扫描有变化，那就直接知道这一列有按键按下，接着查看行变化的电平变化，推算出哪一行变化了，就可以知道这一列的第几个按键被按下了。</p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 外设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32CubeMX  HAL库的ADC多通道数据采集（轮训、DMA、DMA+TIM)、读取内部传感器温度</title>
      <link href="/2024/03/stm32-STM32CubeMX-HAL%E5%BA%93%E7%9A%84ADC%E5%A4%9A%E9%80%9A%E9%81%93%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%EF%BC%88%E8%BD%AE%E8%AE%AD%E3%80%81DMA%E3%80%81DMA-TIM-%E3%80%81%E8%AF%BB%E5%8F%96%E5%86%85%E9%83%A8%E4%BC%A0%E6%84%9F%E5%99%A8%E6%B8%A9%E5%BA%A6/"/>
      <url>/2024/03/stm32-STM32CubeMX-HAL%E5%BA%93%E7%9A%84ADC%E5%A4%9A%E9%80%9A%E9%81%93%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%EF%BC%88%E8%BD%AE%E8%AE%AD%E3%80%81DMA%E3%80%81DMA-TIM-%E3%80%81%E8%AF%BB%E5%8F%96%E5%86%85%E9%83%A8%E4%BC%A0%E6%84%9F%E5%99%A8%E6%B8%A9%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="STM32CubeMX-HAL库的ADC多通道数据采集（轮训、DMA、DMA-TIM-、读取内部传感器温度"><a href="#STM32CubeMX-HAL库的ADC多通道数据采集（轮训、DMA、DMA-TIM-、读取内部传感器温度" class="headerlink" title="STM32CubeMX | HAL库的ADC多通道数据采集（轮训、DMA、DMA+TIM)、读取内部传感器温度"></a>STM32CubeMX | HAL库的ADC多通道数据采集（轮训、DMA、DMA+TIM)、读取内部传感器温度</h2><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li><a href="#stm32cubemx--haladcdmadmatim-0">STM32CubeMX | HAL库的ADC多通道数据采集（轮训、DMA、DMA+TIM)、读取内部传感器温度</a></li><li><ul><li><ul><li><a href="#1adc-11">1、ADC简介</a></li><li><ul><li><a href="#11--13">1.1 采样定理</a></li><li><a href="#12--15">1.2 模式介绍</a></li><li><a href="#13--24">1.3 采样时间和采样频率的计算</a></li></ul></li><li><a href="#2-56">2、轮训方式的多通道采集</a></li><li><ul><li><a href="#21--57">2.1 方式一：间断模式+扫描模式</a></li><li><a href="#22--72">2.2 方式二：完全轮训</a></li></ul></li><li><a href="#3dma-108">3、DMA实现多通道采集</a></li><li><a href="#4timdma-136">4、TIM+DMA实现多通道采集</a></li><li><a href="#5adc-179">5、补充：内部温度传感器ADC通道</a></li></ul></li></ul></li></ul><p><em>注：本片文章以STM32F103系列为例，其他系列可能稍有不同。</em></p><h4 id="1、ADC简介"><a href="#1、ADC简介" class="headerlink" title="1、ADC简介"></a>1、ADC简介</h4><h5 id="1-1-采样定理"><a href="#1-1-采样定理" class="headerlink" title="1.1 采样定理"></a>1.1 采样定理</h5><h5 id="1-2-模式介绍"><a href="#1-2-模式介绍" class="headerlink" title="1.2 模式介绍"></a>1.2 模式介绍</h5><ul><li><strong>扫描模式：</strong> 使用STM32CUBEMX配置了多通道后，这一项默认开启且无法设置成关闭。这个模式就是自动扫描你开启的所有通道进行转换，直至转换完。例如你开启了CH0、CH1、CH2、CH3这四个通道，启动转换后ADC会自动将这4个通道全部转换完，但是这种连续性是可以被打断的，所以就引出了间断模式。</li><li><strong>连续模式：</strong> 在CUBE中选中ENABLE就是连续模式，DISABLE就是单次模式。开启连续模式后，ADC的转换不由其他控制。例如将ADC设置为了定时器的TGRO触发采样，如果开启连续模式，ADC将忽略定时器的触发采样。（连续转换模式开启后其实就是满频率的采样）。</li><li><strong>间断模式：</strong> 可以将多个通道进行 <strong>分组采集</strong>，例如你开启了CH0~3这4个通道，假如你设置了间断次数为4，就相当于将4个通道分成了4组，每组1个通道，那么要想采集完这4个通道就需要手动触发4次ADC采集；如果设置了间断次数为2，那么采集完4个通道就需要手动触发2次ADC采集。</li></ul><h5 id="1-3-采样时间和采样频率的计算"><a href="#1-3-采样时间和采样频率的计算" class="headerlink" title="1.3 采样时间和采样频率的计算"></a>1.3 采样时间和采样频率的计算</h5><p><strong>ADC采样两点间隔的时间一定要大于ADC的采样时间！</strong> 采样时间怎么算，下面就细说一下。</p><p>STM32F103一般将时钟配置主频为72M、APB2为72M。ADC挂在APB2时钟总线上，且ADC的时钟不能超过14M。所以一般将ADC的分频设置为6，ADC的时钟主频就为72&#x2F;6&#x3D;12MHz。那么一个周期就是：1&#x2F;12MHz&#x3D;0.0833us。</p><p>以下截图为STM32F1参考手册（手册编号RM0008，可在ST官网直接搜索下载）：</p><p><img src="https://img-blog.csdnimg.cn/84ca12cd9d40459eb3e03c54889e9df3.png"></p><p>上图的意思是：ADC对输入电压采样若干个ADC_CLK周期，这些周期可通过ADC_SMPR1和ADC_SMPR2寄存器中的SMP[2:0]位进行修改。每个通道都可以用不同的采样时间进行采样。</p><p><strong>ADC转换时间 &#x3D; 采样时间 + 12.5个周期</strong></p><p>示例：</p><pre><code class="当ADC时钟主频为14MHz并且采样时间为1.5个周期时：采样时间">STM32F1系列的时钟主频一般设置为了12M，采样时间的设置所对应采样频率如下图所示：![](https://img-blog.csdnimg.cn/de1135452e21490a94b671995f48824f.png)知道了最短时间后，当ADC时钟主频为12M并且采样时间为1.5个周期时，ADC采样两点的时间必须大于1.17us。而STM32F031系列的ADC时钟主频为14MHz，采样时间的设置所对应采样频率如下图所示：![](https://img-blog.csdnimg.cn/4616052a159b4c6da44230ee81f9a4a0.png)当ADC时钟主频为14M并且采样时间为1.5个周期时，ADC采样两点的时间必须大于1us。#### &lt;a name=&quot;2_56&quot;&gt;;&lt;/a&gt;  2、轮训方式的多通道采集##### 2.1 方式一：间断模式+扫描模式我开启了通道0、1、2以及内部温度读取通道一共四个通道：![](https://img-blog.csdnimg.cn/20200820144708671.png#pic_center)![](https://img-blog.csdnimg.cn/20200820144717271.png#pic_center)如果想使用轮训方式并且不使用DMA的多通道采集，那么就要配置为 **【单次模式+间断模式】**，并且将Number Of Discontinuous Conversions为1，也就是每个通道分成了一个组，配置如下图：![](https://img-blog.csdnimg.cn/20200820145205371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center)由于我这里设置间断数为1，也就是将4个通道分成了4组，那么我每次采集的时候都需要手动去触发ADC采集，也就是调用一次HAL_ADC_Start函数，完整代码如下：![](https://img-blog.csdnimg.cn/2020082014582133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center)我将通道0分别接到3.3V和GND上，4通道采集运行效果如下：![](https://img-blog.csdnimg.cn/20200820150008132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center)##### &lt;a name=&quot;22__72&quot;&gt;;&lt;/a&gt;  2.2 方式二：完全轮训完全使用轮训的方式不能使用 **扫描模式**（理论上来说多通道需要使用扫描模式，而不是完全轮训），但是使用STM32CUBEMX配置多通道扫描模式不无法被关闭的，所以我们先用STM32CUBEMX配置成一个通道：![](https://img-blog.csdnimg.cn/0b4c62f299d54bcf89ba61ea0aee0eca.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeS16aGVuZw==,size_20,color_FFFFFF,t_70,g_se,x_16)然后读取ADC采集数值的函数是这样：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint16_t</span> <span class="title function_">ADC_Read</span><span class="params">(<span class="type">uint32_t</span> Channel)</span></span><br><span class="line">&#123;</span><br><span class="line">ADC_ChannelConfTypeDef sConfig = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">sConfig.Channel = Channel;</span><br><span class="line">sConfig.Rank = ADC_REGULAR_RANK_1;</span><br><span class="line">sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;</span><br><span class="line"><span class="keyword">if</span> (HAL_ADC_ConfigChannel(&amp;hadc1, &amp;sConfig) != HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line">Error_Handler();</span><br><span class="line">&#125;</span><br><span class="line">HAL_ADC_Start(&amp;hadc1);</span><br><span class="line">HAL_ADC_PollForConversion(&amp;hadc1, HAL_MAX_DELAY);</span><br><span class="line"><span class="keyword">return</span> (<span class="type">uint16_t</span>)HAL_ADC_GetValue(&amp;hadc1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>#### 3、DMA实现多通道采集通过DMA实现多通道数据采集， **要将连续模式和间断模式关闭！**如果连续模式开启，那么通过DMA传输到的数组中，每个通道所采集到的值对应数组中的一个位置就是不固定的。例如你开启了IN0~IN3这四个通道，并通过DMA将这四个通道的数据放到ADC_Value这个大小为4的u16类型数组，你在第一次采集的时候IN0通道的数值通过DMA被放在ADC_Value[0]，第二次采集的时候IN0采集到的数值就可能被放到了ADC_Value[1]，这样的话就极不方便我们对每个通道的数据进行分析和提取。配置如下，将连续转换模式和间断转换模式关闭，并开启ADC的DMA通道，将DMA的模式配置为周期模式：![](https://img-blog.csdnimg.cn/20200820152200735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center)![](https://img-blog.csdnimg.cn/ddd590ed84b44942863728c7b84ff639.png)代码如下：![](https://img-blog.csdnimg.cn/c457e847f73847ceb3a35f112f66667e.png)4个通道采集运行效果如下：![](https://img-blog.csdnimg.cn/20200820152427227.png#pic_center)#### &lt;a name=&quot;4timdma_136&quot;&gt;;&lt;/a&gt;  4、TIM+DMA实现多通道采集在不使用DMA的情况下，定时器控制ADC进行数据采集只能是单通道！如果开启了多通道，读取到的ADC采集值只会是最后一个通道的值！所以，要想使用定时器控制ADC采集 **多通道**，必须使用DMA！CubeMX配置如下，使能ADC的DMA：![](https://img-blog.csdnimg.cn/42aa3e7658df4d89ac32b7f2a1ebc643.png)ADC的触发方式设置为定时器3的触发事件：![](https://img-blog.csdnimg.cn/c4ff90b3330b44fda0a609316e2370db.png)采样时间设置为了55.5个周期，对应采样频率为176.47KHz，所以定时器3的频率设置要低于176.47KHz。设置定时器3分频系数为72，重载值为10，得到 `72MHz / 72&amp;#x5206;&amp;#x9891; / 10 = 100KHz`的定时器3：![](https://img-blog.csdnimg.cn/a50e71979339457e90f451449ec69d86.png)代码如下：![](https://img-blog.csdnimg.cn/c418cbe4d5b340a2ae94438927728da5.png)运行结果如下：![](https://img-blog.csdnimg.cn/534899ff62e24bcb9909ffaff4b29065.png)当然也可以选择进行一组数据，例如将32个点为一组数据进行采集，设置如下：![](https://img-blog.csdnimg.cn/a08aa8f0ae7c4cd8bfd70d40a980b3e1.png)运行结果如下：![](https://img-blog.csdnimg.cn/eb3feca6e37140eeb65f794634e86da3.png)#### 5、补充：内部温度传感器ADC通道![](https://img-blog.csdnimg.cn/87fe51b0eb7b447798ade02be31b4329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70)上面图片是截取在STM32F103RC的datasheet中的，中文意思就是：温度传感器必须产生随温度线性变化的电压。转换范围在2v &lt; VDDA &lt; 3.6 V之间。温度传感器内部连接ADC1_IN16输入通道，用于将传感器输出电压转换为数字值。内部温度计算公式：【Temperature = &#123;(V25 - VSENSE) / Avg_Slope&#125; + 25】字段说明：* **V25：** 最小1.34V，最大1.52V，典型值1.43V* **Avg_Slope：** 最小4.0，最大4.6，典型值4.3mv/℃* **VSENSE：** ADC采集到的电压![](https://img-blog.csdnimg.cn/da0745b68e874c41b42573887a74e20e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70)ADC值转电压值计算公式：【电压 = ADC采集到的值 * 3.3 / 4096】看上图我采集到的值为1703，先转换为电压值：1703*3.3/4096≈1.37**（1.43 - 1.37）/ 0.0043 + 25 ≈ 38.95℃**ends...</code></pre>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 外设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HAL库】STM32+ESP8266+Onenet+MQTT，极简工程，hal库移植。</title>
      <link href="/2024/03/stm32-%E3%80%90HAL%E5%BA%93%E3%80%91STM32-ESP8266-Onenet-MQTT%EF%BC%8C%E6%9E%81%E7%AE%80%E5%B7%A5%E7%A8%8B%EF%BC%8Chal%E5%BA%93%E7%A7%BB%E6%A4%8D%E3%80%82/"/>
      <url>/2024/03/stm32-%E3%80%90HAL%E5%BA%93%E3%80%91STM32-ESP8266-Onenet-MQTT%EF%BC%8C%E6%9E%81%E7%AE%80%E5%B7%A5%E7%A8%8B%EF%BC%8Chal%E5%BA%93%E7%A7%BB%E6%A4%8D%E3%80%82/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h4 id="ESP8266-Onenet-MQTT"><a href="#ESP8266-Onenet-MQTT" class="headerlink" title="ESP8266+Onenet+MQTT"></a>ESP8266+Onenet+MQTT</h4><ul><li><ul><li><a href="#1-chled-12">1 导入.c.h文件（不再赘述，详细见LED部分）</a></li><li><a href="#2-cubemx-21">2 Cubemx配置</a></li><li><a href="#3--ch--27">3 修改 .c.h 文件</a></li><li><a href="#4--65">4 测试</a></li></ul></li></ul><p>ESP8266通过MQTT协议连接Onenet。从标准库移到了HAL库，过程有点麻烦，整了一天。做完后整理了一下，这个极简的工程，方便以后开发，也希望能帮助到大家，节约时间。</p><p>代码工程：<br><a href="https://github.com/wyfroom/ESP8266-Onenet-MQTT">https://github.com/wyfroom/ESP8266-Onenet-MQTT</a></p><p>该份代码硬件配置：<br>板子：STM32F103C8T6最小系统板。<br>外设：串口1用作调试，串口3用作esp8266。<br>esp8266：淘宝，esp-01s</p><h3 id="1-导入-c-h文件（不再赘述，详细见LED部分）"><a href="#1-导入-c-h文件（不再赘述，详细见LED部分）" class="headerlink" title="1 导入.c.h文件（不再赘述，详细见LED部分）"></a>1 导入.c.h文件（不再赘述，详细见LED部分）</h3><p>在keil工程中导入之前写好的.c.h文件。这个是我从标准库移倒hal库的，直接从我工程里复制就行，很纯净，没有加多余的东西。下面介绍如何根据个人实际使用情况更改一些参数。</p><blockquote><p>cubemx详细使用教程及所有模块整合见这篇：<br><a href="http://t.csdn.cn/Awtl9">【HAL库】HAL库STM32cubemx快速使用</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/913840e121e5a09eff4133733245efe9.png"></p><h3 id="2-Cubemx配置"><a href="#2-Cubemx配置" class="headerlink" title=";  2 Cubemx配置"></a><a name="2_cubemx_21">;</a>  2 Cubemx配置</h3><p>串口1用于调试，串口3用于ESP8266通信，打开中断。</p><p>基础的我就不配置了，可以看前面的详细讲解。</p><h3 id="3-修改-c-h-文件"><a href="#3-修改-c-h-文件" class="headerlink" title="3 修改 .c.h 文件"></a>3 修改 .c.h 文件</h3><p>移植时要修改的地方：</p><p>1 改所用串口</p><p>发送部分：在esp8266.c里，将huart3全部替换为要修改的串口号，比如串口2。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/87b34edd334476992b18233290799fe3.png"></p><p>接收部分：用串口中断接收esp8266发来的消息。随便在哪个文件夹填加串口回调函数，我个人是之前专门建了个uart.c文件放串口相关的所有代码。</p><p>加入下面的代码（串口号根据个人情况修改）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(huart == &amp;huart3)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(esp8266_cnt &gt;= <span class="keyword">sizeof</span>(esp8266_buf))</span><br><span class="line">&#123;</span><br><span class="line">esp8266_cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">esp8266_buf[esp8266_cnt++] = Uart3_RxData;</span><br><span class="line"></span><br><span class="line">HAL_UART_Receive_IT(&amp;huart3,(<span class="type">uint8_t</span> *)&amp;Uart3_RxData, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 改wifi名字和密码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/601b58b84f41ec638f86d9e63eeb4c41.png"></p><p>3 改产品ID、设备ID、鉴权信息。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/03f4e721469e45d2729425eca9a8d38a.png"></p><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4 测试"></a>4 测试</h3><p><strong>添加头文件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;onenet.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;esp8266.h&quot;</span></span></span><br></pre></td></tr></table></figure><p><strong>添加初始化</strong></p><p>别忘了开串口中断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HAL_UART_Receive_IT(&amp;huart3,(<span class="type">uint8_t</span> *)&amp;Uart3_RxData, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">HAL_Delay(<span class="number">2000</span>);</span><br><span class="line">ESP8266_Init();</span><br><span class="line">HAL_Delay(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">while</span>(OneNet_DevLink())</span><br><span class="line">HAL_Delay(<span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>连接成功的话，onenet会显示设备在线。串口也会打印成功。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e08522ae2a3d08bd5f99c7fdeda41379.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/4e1ab1158b6bfc9430b57a31e27cfab3.png"></p><p><strong>发送数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OneNet_SendData();//&amp;#x53D1;&amp;#x9001;&amp;#x6570;&amp;#x636E;</span><br><span class="line">ESP8266_Clear();//&amp;#x6E05;&amp;#x7A7A;&amp;#x6570;&amp;#x636E;&amp;#x7F13;&amp;#x5B58;&amp;#x533A;</span><br><span class="line">HAL_Delay(3000);//3s&amp;#x53D1;&amp;#x9001;&amp;#x4E00;&amp;#x6B21;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/05e4629537d4b953e7e7f4bc651a0267.png"></p><p>要发什么数据，在这里改：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2e0513318f4aa1042b26a9f18b546071.png"></p><p><strong>接收数据</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataPtr = ESP8266_GetIPD(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(dataPtr != <span class="literal">NULL</span>)</span><br><span class="line">OneNet_RevPro(dataPtr);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 外设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于STM32F103C8T6（HAL库）的HC-SR501红外人体传感及HC-SR04超声波测距</title>
      <link href="/2024/03/stm32-%E5%9F%BA%E4%BA%8ESTM32F103C8T6%EF%BC%88HAL%E5%BA%93%EF%BC%89%E7%9A%84HC-SR501%E7%BA%A2%E5%A4%96%E4%BA%BA%E4%BD%93%E4%BC%A0%E6%84%9F%E5%8F%8AHC-SR04%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%B5%8B%E8%B7%9D/"/>
      <url>/2024/03/stm32-%E5%9F%BA%E4%BA%8ESTM32F103C8T6%EF%BC%88HAL%E5%BA%93%EF%BC%89%E7%9A%84HC-SR501%E7%BA%A2%E5%A4%96%E4%BA%BA%E4%BD%93%E4%BC%A0%E6%84%9F%E5%8F%8AHC-SR04%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%B5%8B%E8%B7%9D/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="系列文章目录"><a href="#系列文章目录" class="headerlink" title="系列文章目录"></a>系列文章目录</h2><p><a href="https://blog.csdn.net/h568630659/article/details/121404155">一、基于STM32F103C8T6最小系统板和STM32CubeMX实现LED灯循环闪烁</a><br><a href="https://blog.csdn.net/h568630659/article/details/121427218">二、基于STM32F103C8T6和STM32CubeMX实现UART串口通信数据收发</a><br><a href="https://blog.csdn.net/h568630659/article/details/121465665">三、实战小例程 基于STM32F103C8T6最小系统板和STM32CubeMX驱动WS2812B光立方</a><br><a href="https://blog.csdn.net/h568630659/article/details/121764481">四、基于STM32F103C8T6最小系统板HAL库CubeMX驱动HC-SR501红外人体传感模块</a><br><a href="https://blog.csdn.net/h568630659/article/details/122058600">五、基于STM32F103C8T6（HAL库）的HC-SR501红外人体传感及HC-SR04超声波测距</a></p><h4 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h4><ul><li><a href="#-0">系列文章目录</a></li><li><a href="#-16">前言</a></li><li><a href="#-22">一、模块简介</a></li><li><a href="#cubemx-45">二、配置CubeMX</a></li><li><a href="#-67">三、硬件连线部分</a></li><li><a href="#-94">四、逻辑代码部分</a></li><li><ul><li><a href="#hc-sr04c-97">HC_SR04.c</a></li><li><a href="#hc-sr04h-181">HC_SR04.h</a></li><li><a href="#mainc-193">main.c</a></li></ul></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我在上一篇文章中驱动了HC-SR501红外人体传感模块，但在测试过程中发现，这个模块的热释电探头过于灵敏了，甚至有的时候往上哈气，会因为检测到类似于人体的温度而误判为感应到人体，所以为了减少误判概率，我打算再添加一个测距模块，在红外感应到人体时，再次判断人体与传感器的距离，在满足预设的距离范围时，才确定有人体接近，进行后续操作。</p><h2 id="一、模块简介"><a href="#一、模块简介" class="headerlink" title="一、模块简介"></a>一、模块简介</h2><p><strong>HC-SR501红外人体感应模块资料介绍：</strong><br><a href="https://www.arduino.cn/thread-2851-1-1.html">探究人体红外传感器HC-SR501</a></p><p><strong>HC-SR04超声波测距模块资料介绍：</strong></p><p><img src="https://img-blog.csdnimg.cn/92ad9fec95424c4daee75611f36e9b7b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>引脚名称引脚作用VCC<br><strong>3-5.5V</strong></p><p>供电（实测发现可以3.3V供电，但没有5V供电测得准）GND接地Trig外部触发信号输入，输入一个高于10μs的高电平即可触发模块测距Echo回响信号输出，测距结束时此管脚输出一个高电平，电平宽度反映超声波往返时间之和</p><p><strong>工作原理：</strong></p><p><img src="https://img-blog.csdnimg.cn/2440fa92274644939b0de5e59ef1852b.png"><br><img src="https://img-blog.csdnimg.cn/0fa754c51ca94c2188fbdfa59f3604ea.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><strong>简而言之：<br> 给Trig一个10μS以上的高电平,模块开始工作，模块内自动发送八个40khz方波，并自主检测是否有电波返回。此时需要检测Echo处的电平，当为高电平的时候记一个时间；当Echo出为低电平的时候再记一个时间，这两个时间的差就是高电平持续的时间，最后用测距公式进行计算</strong>。</p><h2 id="二、配置CubeMX"><a href="#二、配置CubeMX" class="headerlink" title="; 二、配置CubeMX"></a><a name="cubemx_45">;</a> 二、配置CubeMX</h2><p><strong>1、新建工程;<br>2、配置时钟源，在RCC里面的HSE配置的是晶振时钟;<br>3、配置程序烧录引脚SYS为SWD模式;<br>4、配置GPIO输出口，配置一个LED灯（我的板子是PC13），起到检测到人体时的指示作用;<br>5、配置GPIO输入口，用来读取HC-SR501模块的输出电平，我选的是PA1口;</strong><br><strong>6、配置GPIO输入口，用来检测HC-SR04超声波测距模块的回响信号输出，我选择PB5口，命名为HC_SR04_Echo_Pin;<br>7、配置GPIO输出口，用来触发HC-SR04超声波测距模块，我选择PB4口，命名为HC_SR04_Trig_Pin;<br>8、使能定时器，用来实现微秒延时，和测量HC-SR04模块高电平时间，我选择TIM2，并使能TIM2中断;</strong><br><img src="https://img-blog.csdnimg.cn/f5c269ef459b4f58a202b49397c11036.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_17,color_FFFFFF,t_70,g_se,x_16"><br>TIM2挂载在APB1，时钟来源频率为36MHz，故取预分频系数 <code>PSC=36-1</code>，计数周期 <code>Counter</code>设为 <code>60000-1</code>。即此时定时器频率为36M&#x2F;36&#x3D;1MHz，每60ms进一次中断，60000μs对应实际测距范围大概为10m，远远超过我的需求。</p><p><img src="https://img-blog.csdnimg.cn/96058ff9807d44dea3a1b773f47f9330.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/14c2aefe04d5410b89a5300226b73aa6.png"></p><p><strong>9、配置串口收发引脚;<br>10、配置时钟树，我还是开到最高的72MHz;<br>11、进行项目设置，最后生成代码，CubeMX部分就大功告成了</strong></p><p><img src="https://img-blog.csdnimg.cn/1b053bd5569c41b7b11caeba75037c7d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="三、硬件连线部分"><a href="#三、硬件连线部分" class="headerlink" title="三、硬件连线部分"></a>三、硬件连线部分</h2><p>CH340 ↔ STM32F103C8T6最小系统板：<br>TX ↔ RX<br>RX ↔ TX</p><p>DAP-LINK ↔ STM32F103C8T6最小系统板<br>3.3V ↔ VCC<br>GND ↔ GND<br>SWIO ↔ SWIO<br>SWCLK ↔ SWCLK</p><p>HC-SR501模块 ↔ STM32F103C8T6最小系统板<br>OUT ↔ PA1<br>GND ↔ GND</p><p>HC-SR501模块 ↔ DAP-LINK <strong>（这里注意模块供电范围为4.5V-20V，用3.3V无法驱动）</strong><br>VCC ↔ 5V</p><p>HC-SR04模块 ↔ CH340<br>VCC ↔ 5V</p><p>HC-SR04模块 ↔ STM32F103C8T6最小系统板<br>Trig ↔ PB4<br>Echo ↔ PB5<br>GND ↔ GND</p><h2 id="四、逻辑代码部分"><a href="#四、逻辑代码部分" class="headerlink" title="四、逻辑代码部分"></a>四、逻辑代码部分</h2><p>代码框架是基于上一篇HC-SR501红外人体感应模块修改而成的，想要完整代码的话可以和上篇文章一起看。</p><h3 id="HC-SR04-c"><a href="#HC-SR04-c" class="headerlink" title="HC_SR04.c"></a>HC_SR04.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;HC_SR04.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f1xx_hal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f1xx_it.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> distance_result;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> time)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span> a1=TIM2-&gt;CNT;</span><br><span class="line"><span class="keyword">while</span>(TIM2-&gt;CNT-a1&lt;time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HC_SR04_startrange</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(HC_SR04_Trig_GPIO_Port,HC_SR04_Trig_Pin,GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">Delay_us(<span class="number">10</span>);</span><br><span class="line">HAL_GPIO_WritePin(HC_SR04_Trig_GPIO_Port,HC_SR04_Trig_Pin,GPIO_PIN_RESET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">HC_SR04_gettime</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> a;</span><br><span class="line">a=TIM2-&gt;CNT;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">HC_SR04_getdistance</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span> time_node1;</span><br><span class="line"> <span class="type">uint16_t</span> time_node2;</span><br><span class="line">  <span class="type">uint16_t</span> measure;</span><br><span class="line"></span><br><span class="line">  HC_SR04_startrange();</span><br><span class="line"></span><br><span class="line">TIM2-&gt;CNT = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(HAL_GPIO_ReadPin(HC_SR04_Echo_GPIO_Port,HC_SR04_Echo_Pin)==RESET);</span><br><span class="line">time_node1=HC_SR04_gettime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(HAL_GPIO_ReadPin(HC_SR04_Echo_GPIO_Port,HC_SR04_Echo_Pin)==SET);</span><br><span class="line">time_node2=HC_SR04_gettime();</span><br><span class="line"></span><br><span class="line">measure=time_node2-time_node1;</span><br><span class="line"></span><br><span class="line">distance_result = measure * <span class="number">17.0</span>/<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> distance_result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HC-SR04-h"><a href="#HC-SR04-h" class="headerlink" title="HC_SR04.h"></a>HC_SR04.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _HC_SR04_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _HC_SR04_H_</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> time)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HC_SR04_startrange</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">float</span> <span class="title function_">HC_SR04_getdistance</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">HC_SR04_gettime</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HAL_TIM_Base_Start_IT(&amp;htim2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">HC_SR04_distance=HC_SR04_getdistance();</span><br><span class="line">HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;有人,目前距离为：%.2f cm\r\n&quot;</span>,HC_SR04_distance);</span><br><span class="line">HAL_Delay(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没人\r\n&quot;</span>);</span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>现象：</strong></p><p>感应到人体，板载LED绿灯亮，同时串口打印测距结果。<br><img src="https://img-blog.csdnimg.cn/fdf542a1e5f54fb497c66664fcf7880e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><strong>注意：</strong><br><strong>重定义printf后，必须在target里面勾选上MicroLIB，调用一下这个微型库，不然一直卡在里面。</strong></p><p><img src="https://img-blog.csdnimg.cn/bba9468e9009467abfafc8111b94ac0d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>参考博客：<br><a href="https://blog.csdn.net/sasasatori/article/details/81199455">stm32f1驱动HC-SR04超声波测距模块</a></p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 外设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于STM32的HC-SR501红外感应模块驱动与应用</title>
      <link href="/2024/03/stm32-%E5%9F%BA%E4%BA%8ESTM32%E7%9A%84HC-SR501%E7%BA%A2%E5%A4%96%E6%84%9F%E5%BA%94%E6%A8%A1%E5%9D%97%E9%A9%B1%E5%8A%A8%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
      <url>/2024/03/stm32-%E5%9F%BA%E4%BA%8ESTM32%E7%9A%84HC-SR501%E7%BA%A2%E5%A4%96%E6%84%9F%E5%BA%94%E6%A8%A1%E5%9D%97%E9%A9%B1%E5%8A%A8%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><strong>一、 简介<br>HC-SR501红外感应模块是一种常用的人体红外感应模块，常用于安防监控、智能家居等领域。本文将介绍如何在STM32单片机上驱动和应用HC-SR501红外感应模块，实现基本的人体检测功能。</strong></p><p><strong>二、 模块原理</strong><br>HC-SR501红外感应模块基于红外热释电传感器（PIR sensor）原理，当检测到人体或其他热源时，输出高电平信号。该模块有延迟时间和重复触发时间两个可调节的螺旋调节器，可根据需求调节模块的灵敏度和触发后的输出信号时长。</p><p><strong>三、 连接与驱动<br>1. 连接</strong><br>连接HC-SR501模块至STM32单片机，将模块的OUT引脚连接至STM32的GPIO引脚，以接收感应模块的输出信号。同时，通过电源模块连接模块至单片机的供电引脚。</p><p><img src="https://img-blog.csdnimg.cn/direct/12a9a768aaa04891b1c9bfc0d758aae5.png"></p><p><strong>2. 驱动</strong><br>在STM32的开发环境中，编写对HC-SR501模块的驱动程序。以下是一个简单的示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">```c</span><br><span class="line">#include &quot;stm32f4xx.h&quot;</span><br><span class="line"></span><br><span class="line">#define HC_SR501_PIN GPIO_PIN_0</span><br><span class="line">#define HC_SR501_PORT GPIOA</span><br><span class="line"></span><br><span class="line">void HC_SR501_Init(void) &#123;</span><br><span class="line">&amp;#xA0; GPIO_InitTypeDef GPIO_InitStruct;</span><br><span class="line"></span><br><span class="line">&amp;#xA0; __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">&amp;#xA0; GPIO_InitStruct.Pin = HC_SR501_PIN;</span><br><span class="line">&amp;#xA0; GPIO_InitStruct.Mode = GPIO_MODE_INPUT;</span><br><span class="line">&amp;#xA0; GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">&amp;#xA0; HAL_GPIO_Init(HC_SR501_PORT, &amp;GPIO_InitStruct);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int HC_SR501_Read(void) &#123;</span><br><span class="line">&amp;#xA0; return HAL_GPIO_ReadPin(HC_SR501_PORT, HC_SR501_PIN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void HC_SR501_Application(void) &#123;</span><br><span class="line">&amp;#xA0; while (1) &#123;</span><br><span class="line">&amp;#xA0; &amp;#xA0; if (HC_SR501_Read()) &#123;</span><br><span class="line">&amp;#xA0; &amp;#xA0; &amp;#xA0; // &amp;#x68C0;&amp;#x6D4B;&amp;#x5230;&amp;#x4EBA;&amp;#x4F53;&amp;#xFF0C;&amp;#x6267;&amp;#x884C;&amp;#x76F8;&amp;#x5E94;&amp;#x64CD;&amp;#x4F5C;</span><br><span class="line">&amp;#xA0; &amp;#xA0; &#125; else &#123;</span><br><span class="line">&amp;#xA0; &amp;#xA0; &amp;#xA0; // &amp;#x672A;&amp;#x68C0;&amp;#x6D4B;&amp;#x5230;&amp;#x4EBA;&amp;#x4F53;&amp;#xFF0C;&amp;#x6267;&amp;#x884C;&amp;#x76F8;&amp;#x5E94;&amp;#x64CD;&amp;#x4F5C;</span><br><span class="line">&amp;#xA0; &amp;#xA0; &#125;</span><br><span class="line">&amp;#xA0; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line">&amp;#xA0; HC_SR501_Init();</span><br><span class="line">&amp;#xA0; HC_SR501_Application();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>以上代码中，首先初始化了GPIO引脚，然后在应用函数中不断读取感应模块的输出信号，根据输出信号执行不同的操作。**四、 应用示例&lt;br&gt;1. 基于HC-SR501红外感应模块的人体检测报警系统**通过连接HC-SR501模块至STM32单片机，并配合蜂鸣器或其他报警装置，可以实现一个简单的人体检测报警系统。当检测到人体时，系统触发报警装置，实现安防监控。**2. 基于HC-SR501红外感应模块的智能照明控制系统**将HC-SR501模块连接至STM32单片机，再连接至LED灯或其他照明设备，可以实现智能照明控制系统。当检测到人体时，系统自动开启照明设备，当未检测到人体时则关闭照明设备，实现智能节能控制。**以上是基于STM32的HC-SR501红外感应模块的驱动与应用的基本介绍，通过上述方法，可以实现针对不同场景的人体感应控制系统。**&gt; ✅作者简介：热爱科研的嵌入式开发者，修心和技术同步精进代码获取、问题探讨及文章转载可私信。☁ 愿你的生命中有够多的云翳,来造就一个美丽的黄昏。🍎获取更多嵌入式资料可点击链接进群领取，谢谢支持！👇[点击领取更多详细资料](https://fss.mpay8.cn/article/dmrjinh2C6fjejm &quot;点击领取更多详细资料&quot;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 外设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你，通过HAL库实现STM32的超声波测距--以SR-04为例</title>
      <link href="/2024/03/stm32-%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%EF%BC%8C%E9%80%9A%E8%BF%87HAL%E5%BA%93%E5%AE%9E%E7%8E%B0STM32%E7%9A%84%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%B5%8B%E8%B7%9D-%E4%BB%A5SR-04%E4%B8%BA%E4%BE%8B/"/>
      <url>/2024/03/stm32-%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%EF%BC%8C%E9%80%9A%E8%BF%87HAL%E5%BA%93%E5%AE%9E%E7%8E%B0STM32%E7%9A%84%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%B5%8B%E8%B7%9D-%E4%BB%A5SR-04%E4%B8%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><strong>目录</strong></p><p><a href="#0%E3%80%81sr-04%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86" title="0、SR-04基本原理">0、SR-04基本原理</a></p><p><a href="#1%E3%80%81%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C" title="1、准备工作">1、准备工作</a></p><p><a href="#2%E3%80%81%E8%BF%9E%E7%BA%BF" title="2、连线">2、连线</a></p><p><a href="#%C2%A03%E3%80%81stm32cubemx%E8%AE%BE%E7%BD%AE" title="3、STM32CUBEMX设置">3、STM32CUBEMX设置</a></p><p><a href="#31%E6%96%B0%E5%BB%BA%E5%B7%A5%E7%A8%8B" title="3.1新建工程">3.1新建工程</a></p><p><a href="#32%E8%8A%AF%E7%89%87%E9%80%9A%E7%94%A8%E8%AE%BE%E7%BD%AE" title="3.2芯片通用设置">3.2芯片通用设置</a></p><p><a href="#33%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8D%95%E8%8E%B7%E8%AE%BE%E7%BD%AE" title="3.3定时器捕获设置">3.3定时器捕获设置</a></p><p><a href="#%E2%80%8B34%E5%85%B6%E4%BB%96%E8%AE%BE%E7%BD%AE" title="​3.4其他设置">​3.4其他设置</a></p><p><a href="#35%E7%94%9F%E6%88%90%E5%B7%A5%E7%A8%8B" title="3.5生成工程">3.5生成工程</a></p><p><a href="#%C2%A04%E3%80%81%E7%A8%8B%E5%BA%8F%E5%AE%8C%E5%96%84" title="4、程序完善">4、程序完善</a></p><p><a href="#41%E5%AE%8C%E5%96%84%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0" title="4.1完善打印输出函数">4.1完善打印输出函数</a></p><p><a href="#%C2%A042%E5%AE%8C%E5%96%84timc" title="4.2完善tim.c">4.2完善tim.c</a></p><p><a href="#43%E5%AE%8C%E5%96%84gpioc%C2%A0" title="4.3完善gpio.c">4.3完善gpio.c</a></p><p><a href="#44%E5%AE%8C%E5%96%84main%E5%87%BD%E6%95%B0%C2%A0" title="4.4完善main函数">4.4完善main函数</a></p><p><a href="#%C2%A05%E3%80%81%E6%80%BB%E7%BB%93" title="5、总结">5、总结</a></p><h2 id="0、SR-04基本原理"><a href="#0、SR-04基本原理" class="headerlink" title="0、SR-04基本原理"></a>0、SR-04基本原理</h2><p>声波遇到障碍物会反射，而声波的速度已知，所以只需要知道发射到接收的时间差，就能轻松计算出测量距离，再结合发射器和接收器的距离，就能算出障碍物的实际距离。</p><p><img src="https://img-blog.csdnimg.cn/2020032802343260.png"></p><p><img src="https://img-blog.csdnimg.cn/20200328023701292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjU4OTgx,size_16,color_FFFFFF,t_70"></p><p>以HC-SR04硬件为例，端口为VCC、Trig、Echo、GND。</p><p>VCC–接STM32板子+5V；<br>GND–接STM32板子GND；<br>Trig–为触发控制信号输入，触发测距，给至少10us的高电平信号，模块自动发射8个40KHz的方波，自动检测是否有信号返回；<br>Echo–回响信号输出，有信号返回，通过IO口ECHO输出一个高电平，高电平持续时间就是超声波从发射到返回的时间。<br>那用STM32怎么给端口信号呢？又是怎么获取信号呢？<br>Trig端口为超声波模块的输入信号，也就是通过STM23一个端口推挽输出一个至少10us的高电平信号即可，利用delay_ms(20)实现；<br>Echo端口为超声波模块的输出信号，也就是利用STM32端口捕获高电平时间，那么这个端口肯定是可以用做定时器的端口。<br>通过以上分析，这里采用以下STM32端口</p><p><img src="https://img-blog.csdnimg.cn/c10df4b58e2d49cb8b3b363c0e22019c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/3b14aae863264dd4afbc8445ad66a7d9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h2><p>开发板：STM32F1精英版</p><p>软件：STM32CubeMx软件</p><p>IDE： MDK-Keil软件</p><p>传感器：HC-SR04</p><h2 id="2、连线"><a href="#2、连线" class="headerlink" title="2、连线"></a>2、连线</h2><p>选择TIM5的CH1即PA0作为输入捕获引脚（Echo），选择PA5作为触发脚Trig。具体连接线如下：</p><p>红线连接精英版的5V与SR04的VCC脚</p><p>白线连接精英板的GND与SR04的GND脚</p><p>橙色线连接精英板的PA5与Trig脚</p><p>黑色线连接精英板的PA0与Echo脚</p><p><img src="https://img-blog.csdnimg.cn/2e1fa4f5325345729a0a44473dfd2526.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="3、STM32CUBEMX设置"><a href="#3、STM32CUBEMX设置" class="headerlink" title="3、STM32CUBEMX设置"></a>3、STM32CUBEMX设置</h2><h3 id="3-1新建工程"><a href="#3-1新建工程" class="headerlink" title="3.1新建工程"></a>3.1新建工程</h3><p>1）新建工程</p><p><img src="https://img-blog.csdnimg.cn/7115721af4f7487fae5b0ff66f45667d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>2）选择芯片</p><p><img src="https://img-blog.csdnimg.cn/9cecc36eced643b185e29591bbe60cf0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="3-2芯片通用设置"><a href="#3-2芯片通用设置" class="headerlink" title="3.2芯片通用设置"></a>3.2芯片通用设置</h3><p>1）时钟芯片设置</p><p><img src="https://img-blog.csdnimg.cn/e262e3fba4f8447ab4c8c567225173a5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>2）时钟设置</p><p><img src="https://img-blog.csdnimg.cn/abb1957bcbce4521af21421c25464c77.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>3）系统调试设置</p><p><img src="https://img-blog.csdnimg.cn/ed518ef9e29c4359bd52a2ca81e8823e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="3-3定时器捕获设置"><a href="#3-3定时器捕获设置" class="headerlink" title="3.3定时器捕获设置"></a>3.3定时器捕获设置</h3><p>由于前文连线中，我们将TIMER5CH1作为输入捕获引脚，所以对TIMER5进行设置：</p><p>Channel 1选择：Input Capture direct mode</p><p>与分频系数填写：72-1（则每次计数为1us）</p><p>Polarity Selection选择：Rising Edge（上升沿）</p><p>其他保持不变。</p><p><img src="https://img-blog.csdnimg.cn/c4191f72c63049fdbfb8f8b96f672f66.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>NVIC settings选择TIM5 global interrupt</p><h3 id="3-4其他设置"><a href="#3-4其他设置" class="headerlink" title="  3.4其他设置"></a><img src="https://img-blog.csdnimg.cn/d1d24efee88d46178d8001eb1f8eaf61.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16">  3.4其他设置</h3><p>1）USART1设置</p><p>为了方便调试，将测量所得数据通过串口传递到电脑上进行显示，此处使用串口1通过printf将输出发送至电脑。</p><p><img src="https://img-blog.csdnimg.cn/82ca9b0ff3e94cfa8286e7d5573fac1a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>2）GPIO配置</p><p>此处选择PA5作为Trig脚，具体配置如下：</p><p><img src="https://img-blog.csdnimg.cn/47ed779ee47641cfb88d1b94d4804ce0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="3-5生成工程"><a href="#3-5生成工程" class="headerlink" title="3.5生成工程"></a>3.5生成工程</h3><p><img src="https://img-blog.csdnimg.cn/a6e90e647fe24e5087daa4b099e7da40.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/46dfa628b984462d95dc70b4a37152c0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="4、程序完善"><a href="#4、程序完善" class="headerlink" title="4、程序完善"></a>4、程序完善</h2><h3 id="4-1完善打印输出函数"><a href="#4-1完善打印输出函数" class="headerlink" title="4.1完善打印输出函数"></a>4.1完善打印输出函数</h3><p>在main函数中加入下面语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/* Private includes ----------------------------------------------------------*/</span><br><span class="line">/* USER CODE BEGIN Includes */</span><br><span class="line">#include &quot;stdio.h&quot;</span><br><span class="line">#include &quot;string.h&quot;</span><br><span class="line">/* USER CODE END Includes */</span><br><span class="line"></span><br><span class="line">/* Private user code ---------------------------------------------------------*/</span><br><span class="line">/* USER CODE BEGIN 0 */</span><br><span class="line">#ifdef __GNUC__</span><br><span class="line">#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)</span><br><span class="line">#else</span><br><span class="line">#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">PUTCHAR_PROTOTYPE</span><br><span class="line">&#123;</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, (uint8_t *)&amp;ch, 1, 0xFFFF);</span><br><span class="line">return ch;</span><br><span class="line">&#125;</span><br><span class="line">/* USER CODE END 0 */</span><br></pre></td></tr></table></figure><p>加入此语句之后可以在main函数中加入printf语句测试是否成功。</p><p>将精英板USB232口通过USB数据线与电脑连接，并在电脑上打开串口调试软件： <img src="https://img-blog.csdnimg.cn/a79a767a9dfa4baeb621c05235cbc92b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/d27a80b3c0fa4d30999384ca8c8a46d7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="4-2完善tim-c"><a href="#4-2完善tim-c" class="headerlink" title="4.2完善tim.c"></a>4.2完善tim.c</h3><p>在tim.c中加入以下程序：</p><p>定义变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* USER CODE BEGIN 0 */</span><br><span class="line">//&amp;#x6355;&amp;#x83B7;&amp;#x72B6;&amp;#x6001;</span><br><span class="line">//[7]:0,&amp;#x6CA1;&amp;#x6709;&amp;#x6210;&amp;#x529F;&amp;#x7684;&amp;#x6355;&amp;#x83B7;;1,&amp;#x6210;&amp;#x529F;&amp;#x6355;&amp;#x83B7;&amp;#x5230;&amp;#x4E00;&amp;#x6B21;.</span><br><span class="line"></span><br><span class="line">//[6]:0,&amp;#x8FD8;&amp;#x6CA1;&amp;#x6355;&amp;#x83B7;&amp;#x5230;&amp;#x4F4E;&amp;#x7535;&amp;#x5E73;;1,&amp;#x5DF2;&amp;#x7ECF;&amp;#x6355;&amp;#x83B7;&amp;#x5230;&amp;#x4F4E;&amp;#x7535;&amp;#x5E73;&amp;#x4E86;.</span><br><span class="line"></span><br><span class="line">//[5:0]:&amp;#x6355;&amp;#x83B7;&amp;#x4F4E;&amp;#x7535;&amp;#x5E73;&amp;#x540E;&amp;#x6EA2;&amp;#x51FA;&amp;#x7684;&amp;#x6B21;&amp;#x6570;</span><br><span class="line">uint8_t  TIM5CH2_CAPTURE_STA=0;//&amp;#x8F93;&amp;#x5165;&amp;#x6355;&amp;#x83B7;&amp;#x72B6;&amp;#x6001;</span><br><span class="line">uint16_t TIM5CH2_CAPTURE_VAL;//&amp;#x8F93;&amp;#x5165;&amp;#x6355;&amp;#x83B7;&amp;#x503C;(TIM2&amp;#x662F;16&amp;#x4F4D;)</span><br><span class="line">/* USER CODE END 0 */</span><br></pre></td></tr></table></figure><p>在底部加入溢出回调函数和输入捕获回调函数。其中参考了正点原子官方的的输入 捕获回调函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">/* USER CODE BEGIN 1 */</span><br><span class="line">void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//&amp;#x66F4;&amp;#x65B0;&amp;#x4E2D;&amp;#x65AD;&amp;#xFF08;&amp;#x6EA2;&amp;#x51FA;&amp;#xFF09;&amp;#x53D1;&amp;#x751F;&amp;#x65F6;&amp;#x6267;&amp;#x884C;</span><br><span class="line">&#123;</span><br><span class="line">if((TIM5CH2_CAPTURE_STA&amp;0X80) ==0)//&amp;#x8FD8;&amp;#x672A;&amp;#x6355;&amp;#x83B7;&amp;#x6210;&amp;#x529F;</span><br><span class="line">&#123;</span><br><span class="line">if(TIM5CH2_CAPTURE_STA&amp;0X40)//&amp;#x6355;&amp;#x83B7;&amp;#x5230;&amp;#x4E00;&amp;#x4E2A;&amp;#x4E0B;&amp;#x964D;&amp;#x6CBF;</span><br><span class="line">&#123;</span><br><span class="line">if((TIM5CH2_CAPTURE_STA&amp;0X3F)==0X3F)//&amp;#x9AD8;&amp;#x7535;&amp;#x5E73;&amp;#x65F6;&amp;#x95F4;&amp;#x592A;&amp;#x957F;&amp;#x4E86;</span><br><span class="line">&#123;</span><br><span class="line">TIM5CH2_CAPTURE_STA |= 0X80;//&amp;#x6807;&amp;#x8BB0;&amp;#x6210;&amp;#x529F;&amp;#x6355;&amp;#x83B7;&amp;#x4E00;&amp;#x6B21;</span><br><span class="line">TIM5CH2_CAPTURE_VAL = 0XFFFF;//</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line">TIM5CH2_CAPTURE_STA++;//&amp;#x5426;&amp;#x5219;&amp;#x6807;&amp;#x8BB0;&amp;#x6EA2;&amp;#x51FA;&amp;#x6570;&amp;#x52A0;&amp;#x4E00;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)//&amp;#x6355;&amp;#x83B7;&amp;#x4E2D;&amp;#x65AD;&amp;#x53D1;&amp;#x751F;&amp;#x65F6;&amp;#x6267;&amp;#x884C;</span><br><span class="line">&#123;</span><br><span class="line">if((TIM5CH2_CAPTURE_STA&amp;0x80)==0)//&amp;#x8FD8;&amp;#x672A;&amp;#x6355;&amp;#x83B7;&amp;#x6210;&amp;#x529F;</span><br><span class="line">&#123;</span><br><span class="line">if(TIM5CH2_CAPTURE_STA&amp;0x40)//&amp;#x6210;&amp;#x529F;&amp;#x6355;&amp;#x83B7;&amp;#x5230;&amp;#x4E00;&amp;#x4E2A;&amp;#x4E0B;&amp;#x964D;&amp;#x6CBF;</span><br><span class="line">&#123;</span><br><span class="line">TIM5CH2_CAPTURE_STA |= 0X80;//&amp;#x6807;&amp;#x8BB0;&amp;#x6210;&amp;#x529F;&amp;#xFF0C;&amp;#x6355;&amp;#x83B7;&amp;#x5230;&amp;#x4E00;&amp;#x6B21;&amp;#x9AD8;&amp;#x7535;&amp;#x5E73;&amp;#x5B8C;&amp;#x6210;</span><br><span class="line">TIM5CH2_CAPTURE_VAL  = HAL_TIM_ReadCapturedValue(&amp;htim5, TIM_CHANNEL_1);//&amp;#x83B7;&amp;#x53D6;&amp;#x5F53;&amp;#x524D;&amp;#x6355;&amp;#x83B7;&amp;#x503C;</span><br><span class="line">TIM_RESET_CAPTUREPOLARITY(&amp;htim5, TIM_CHANNEL_1);//&amp;#x6E05;&amp;#x9664;&amp;#x539F;&amp;#x6765;&amp;#x8BBE;&amp;#x7F6E;</span><br><span class="line">TIM_SET_CAPTUREPOLARITY(&amp;htim5, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);//&amp;#x6355;&amp;#x83B7;&amp;#x5230;&amp;#x4E0B;&amp;#x964D;&amp;#x6CBF;&amp;#x540E;&amp;#xFF0C;&amp;#x5C06;&amp;#x6355;&amp;#x83B7;&amp;#x590D;&amp;#x4F4D;&amp;#x5230;&amp;#x6355;&amp;#x83B7;&amp;#x4E0A;&amp;#x5347;&amp;#x6CBF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else//&amp;#x6355;&amp;#x83B7;&amp;#x5230;&amp;#x4E00;&amp;#x4E2A;&amp;#x4E0A;&amp;#x5347;&amp;#x6CBF;</span><br><span class="line">&#123;</span><br><span class="line">TIM5CH2_CAPTURE_STA = 0;</span><br><span class="line">TIM5CH2_CAPTURE_VAL = 0;</span><br><span class="line">TIM5CH2_CAPTURE_STA |= 0x40;//&amp;#x7B2C;&amp;#x516D;&amp;#x4F4D;&amp;#x6807;&amp;#x8BB0;&amp;#x4E3A;&amp;#x6355;&amp;#x83B7;&amp;#x5230;&amp;#x4E0A;&amp;#x5347;&amp;#x6CBF;</span><br><span class="line">__HAL_TIM_DISABLE(&amp;htim5);//&amp;#x5173;&amp;#x95ED;&amp;#x5B9A;&amp;#x65F6;&amp;#x5668;</span><br><span class="line">__HAL_TIM_SET_COUNTER(&amp;htim5, 0);//&amp;#x5B9A;&amp;#x65F6;&amp;#x5668;&amp;#x521D;&amp;#x59CB;&amp;#x503C;&amp;#x8BBE;&amp;#x7F6E;&amp;#x4E3A;0</span><br><span class="line">TIM_RESET_CAPTUREPOLARITY(&amp;htim5, TIM_CHANNEL_1);</span><br><span class="line">TIM_SET_CAPTUREPOLARITY(&amp;htim5, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);//&amp;#x6355;&amp;#x83B7;&amp;#x5230;&amp;#x4E0A;&amp;#x5347;&amp;#x6CBF;&amp;#x4E4B;&amp;#x540E;&amp;#xFF0C;&amp;#x5C06;&amp;#x6355;&amp;#x83B7;&amp;#x8BBE;&amp;#x7F6E;&amp;#x4E3A;&amp;#x4E0B;&amp;#x964D;&amp;#x6CBF;</span><br><span class="line">__HAL_TIM_ENABLE(&amp;htim5);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/* USER CODE END 1 */</span><br></pre></td></tr></table></figure><h3 id="4-3完善gpio-c"><a href="#4-3完善gpio-c" class="headerlink" title="4.3完善gpio.c"></a>4.3完善gpio.c</h3><p>模拟Trig脚，先置位，过40us后，复位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* USER CODE BEGIN 2 */</span><br><span class="line">void CHL_capture(void)</span><br><span class="line">&#123;</span><br><span class="line">uint32_t i;</span><br><span class="line"></span><br><span class="line">HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);</span><br><span class="line">for(i=0;i&lt;72*40;i++) 2 __nop(); hal_gpio_writepin(trig_gpio_port, trig_pin, gpio_pin_reset); &#125; * user code end &lt;&gt;&lt;/72*40;i++)&gt;</span><br></pre></td></tr></table></figure><h3 id="4-4完善main函数"><a href="#4-4完善main函数" class="headerlink" title="4.4完善main函数"></a>4.4完善main函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">  /* USER CODE BEGIN 1 */</span><br><span class="line">float len = 0;</span><br><span class="line">uint32_t time= 0;</span><br><span class="line">uint8_t count = 0;</span><br><span class="line">  /* USER CODE END 1 */</span><br><span class="line"></span><br><span class="line">  /* MCU Configuration--------------------------------------------------------*/</span><br><span class="line"></span><br><span class="line">  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span><br><span class="line">  HAL_Init();</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN Init */</span><br><span class="line"></span><br><span class="line">  /* USER CODE END Init */</span><br><span class="line"></span><br><span class="line">  /* Configure the system clock */</span><br><span class="line">  SystemClock_Config();</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN SysInit */</span><br><span class="line"></span><br><span class="line">  /* USER CODE END SysInit */</span><br><span class="line"></span><br><span class="line">  /* Initialize all configured peripherals */</span><br><span class="line">  MX_GPIO_Init();</span><br><span class="line">  MX_TIM5_Init();</span><br><span class="line">  MX_USART1_UART_Init();</span><br><span class="line">  /* USER CODE BEGIN 2 */</span><br><span class="line">printf(&quot;Hello World!\r\n&quot;);</span><br><span class="line">HAL_TIM_IC_Start_IT(&amp;htim5,TIM_CHANNEL_1);   //&amp;#x5F00;&amp;#x542F;TIM2&amp;#x7684;&amp;#x6355;&amp;#x83B7;&amp;#x901A;&amp;#x9053;2&amp;#xFF0C;&amp;#x5E76;&amp;#x4E14;&amp;#x5F00;&amp;#x542F;&amp;#x6355;&amp;#x83B7;&amp;#x4E2D;&amp;#x65AD;</span><br><span class="line">    __HAL_TIM_ENABLE_IT(&amp;htim5,TIM_IT_UPDATE);   //&amp;#x4F7F;&amp;#x80FD;&amp;#x66F4;&amp;#x65B0;&amp;#x4E2D;&amp;#x65AD;</span><br><span class="line"></span><br><span class="line">  /* USER CODE END 2 */</span><br><span class="line"></span><br><span class="line">  /* Infinite loop */</span><br><span class="line">  /* USER CODE BEGIN WHILE */</span><br><span class="line">  while (1)</span><br><span class="line">  &#123;</span><br><span class="line">    /* USER CODE END WHILE */</span><br><span class="line"></span><br><span class="line">    /* USER CODE BEGIN 3 */</span><br><span class="line">  HAL_Delay(100);</span><br><span class="line">  CHL_capture();</span><br><span class="line">  if(TIM5CH2_CAPTURE_STA &amp; 0x80)//&amp;#x6210;&amp;#x529F;&amp;#x6355;&amp;#x83B7;&amp;#x4E00;&amp;#x4E2A;&amp;#x8109;&amp;#x5BBD;</span><br><span class="line">  &#123;</span><br><span class="line">time = TIM5CH2_CAPTURE_STA &amp; 0x3F;//&amp;#x83B7;&amp;#x53D6;&amp;#x6EA2;&amp;#x51FA;&amp;#x6B21;&amp;#x6570;</span><br><span class="line">time *= 65536;//&amp;#x83B7;&amp;#x5F97;&amp;#x6EA2;&amp;#x51FA;&amp;#x7684;&amp;#x65F6;&amp;#x95F4;&amp;#x503C;</span><br><span class="line">time += TIM5CH2_CAPTURE_VAL;//&amp;#x52A0;&amp;#x4E0A;&amp;#x6700;&amp;#x540E;&amp;#x4E00;&amp;#x6B21;&amp;#x53D6;&amp;#x5F97;&amp;#x7684;&amp;#x503C;</span><br><span class="line">len = time * 342.62*100/2000000;</span><br><span class="line"></span><br><span class="line">TIM5CH2_CAPTURE_STA = 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  printf(&quot;LENGTH: %f CM\r\n&quot;, len);</span><br><span class="line">  &#125;</span><br><span class="line">  /* USER CODE END 3 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>本文介绍了通过HAL库完成SR-04超声波传感器距离的测量。包括了，超声波传感器的原理、STM32CUBEMX的配置，以及程序的完善。最终的结果如下：</p><p><img src="https://img-blog.csdnimg.cn/bdd5e4a431694f4897745b2ebb55fbdd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 外设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32F407使用Helix库软解MP3并通过DAC输出，最精简的STM32+SD卡实现MP3播放器</title>
      <link href="/2024/03/stm32-STM32F407%E4%BD%BF%E7%94%A8Helix%E5%BA%93%E8%BD%AF%E8%A7%A3MP3%E5%B9%B6%E9%80%9A%E8%BF%87DAC%E8%BE%93%E5%87%BA%EF%BC%8C%E6%9C%80%E7%B2%BE%E7%AE%80%E7%9A%84STM32-SD%E5%8D%A1%E5%AE%9E%E7%8E%B0MP3%E6%92%AD%E6%94%BE%E5%99%A8/"/>
      <url>/2024/03/stm32-STM32F407%E4%BD%BF%E7%94%A8Helix%E5%BA%93%E8%BD%AF%E8%A7%A3MP3%E5%B9%B6%E9%80%9A%E8%BF%87DAC%E8%BE%93%E5%87%BA%EF%BC%8C%E6%9C%80%E7%B2%BE%E7%AE%80%E7%9A%84STM32-SD%E5%8D%A1%E5%AE%9E%E7%8E%B0MP3%E6%92%AD%E6%94%BE%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>只用STM32单片机+SD卡+耳机插座，实现播放MP3播放器！</p><p>看过很多STM32软解MP3的方案，即不通过类似VS1053之类的解码器芯片，直接用STM32和软件库解码MP3文件，通常使用了labmad或者Helix解码库实现，Helix相对labmad占用的RAM更少。但是大多数参考的方案还是用了外接IIS接口WM98xx之类的音频DAC芯片播放音频，稍显复杂繁琐。STM32F407Vx本身就自带了2路12位DAC输出，最高刷新速度333kHz，除了分辨率差点意思，速度上对于MP3通常44.1kHz采样率来说，用来播放音频绰绰有余了。本文给的方案和源码，直接用STM32软解码MP3并使用自带的2个DAC输出引脚输出音频左右声道。</p><p>原理：STM32从SD读取MP3文件原始数据，发送给Helix库解码，Helix解码后输出PCM数据流，将此数据进一步处理转换后，按照左右声道分别存入DAC输出1和2缓存，通过定时器以MP3文件的采样率的频率提供DAC触发节拍，通过DMA取缓存中高12位数据给DAC，在DAC1和2引脚产生音频波形，通过电容耦合到耳机的左右声道上。</p><p>MP3源文件是一种经过若干算法，将原始音频数据压缩得来的，软件解码的过程是逆过程，将压缩的音频反向转换为记录了左右声道、幅值的数据流，通常是PCM格式。</p><p>PCM：是模拟信号以固定的采样频率转换成数字信号后的表现形式。记录了音频采样的数据，双通道、16bit的PCM数据格式是以0轴为中心，范围为-32768~32767的数值，每个数据占用2字节，左声道和右声道交替存储，如图。</p><p><img src="https://img-blog.csdnimg.cn/694e98caa0d54f54939024bb8ccf386e.png"></p><p>软解码得到的PCM数据到STM32的DAC缓存需要进一步处理。STM32的DAC是12位的，其输入范围0<del>4095，而双通道16位的PCM音频数据是左右声道交替存储，且数据范围-32768</del>32767，因此PCM到STM32的DAC缓存要按照顺序一拆为二，分为左右声道，每个数据再加上32768，使其由short int的范围转换为unsigned short int，即0~65535。由于PCM数据是对音频的采样，因此调节音量（幅值）可以在此步骤一并处理，即音频数据 x 音量 &#x2F;最大音量。至于DAC是12位，只需将DAC模式设置为左对齐12位，舍弃低4位即可。</p><p>到此，STM32的DAC输出引脚上应该已经有音频信号了，通常DAC引脚上串联一个1~10uF的电容用来耦合音频信号，电容越大音质越好，电容另一端接耳机插座的左声道&#x2F;右声道，插上耳机就可以欣赏音乐啦！音质嘛，反正我是听不出来好不好，跟商品MP3播放器差不多。如果不串联电容，DAC引脚直连耳机插座左右声道也能听到声音，就是有些数字信号噪声也会传进来。如果希望噪声小一些，DAC引脚输出端加一个下图的低通滤波电路也是可以的。</p><p><img src="https://img-blog.csdnimg.cn/f132f4062140488bbdfc5c5d375776a2.jpeg"></p><p><img src="https://img-blog.csdnimg.cn/44697c32a37541ea990a3a9d5911e091.jpeg"></p><p>Helix移植：</p><p>Helix源码的官网我没找到，直接用了野火的例程里面的代码，移植也很简单，不用改任何代码，只需要将Helix文件夹拷贝到工程目录里，然后在Keil中添加好文件，以及添加头文件途径，编译即可。工程目录如图。</p><p><img src="https://img-blog.csdnimg.cn/bb0d0811712140ae83b917fa128509d9.jpeg"></p><p>源码：dac配置</p><p>dac.c</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  * @file    dac.c</span></span><br><span class="line"><span class="comment">  * @author  ZL</span></span><br><span class="line"><span class="comment">  * @version V0.0.1</span></span><br><span class="line"><span class="comment">  * @date    September-20-2019</span></span><br><span class="line"><span class="comment">  * @brief   DAC configuration.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* Includes ------------------------------------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dac.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private typedef -----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* Private define ------------------------------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>   CNT_FREQ          84000000      <span class="comment">// TIM6 counter clock (prescaled APB1)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* DHR registers offsets */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DHR12R1_OFFSET             ((uint32_t)0x00000008)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DHR12R2_OFFSET             ((uint32_t)0x00000014)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DHR12RD_OFFSET             ((uint32_t)0x00000020)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private macro -------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* Private variables ---------------------------------------------------------*/</span></span><br><span class="line"><span class="type">uint32_t</span> DAC_DHR12R1_ADDR = (<span class="type">uint32_t</span>)DAC_BASE + DHR12R1_OFFSET + DAC_Align_12b_L;</span><br><span class="line"><span class="type">uint32_t</span> DAC_DHR12R2_ADDR = (<span class="type">uint32_t</span>)DAC_BASE + DHR12R2_OFFSET + DAC_Align_12b_L;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> DAC_buff[<span class="number">2</span>][DAC_BUF_LEN]; <span class="comment">//DAC1、DAC2输出缓冲</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private function prototypes -----------------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">TIM6_Config</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private functions ---------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  DAC初始化</span></span><br><span class="line"><span class="comment">  * @param  none</span></span><br><span class="line"><span class="comment">  * @retval none</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DAC_Config</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line">DAC_InitTypeDef  DAC_InitStructure;</span><br><span class="line"></span><br><span class="line"><span class="built_in">RCC_AHB1PeriphClockCmd</span>(RCC_AHB1Periph_GPIOA, ENABLE);</span><br><span class="line"><span class="built_in">RCC_APB1PeriphClockCmd</span>(RCC_APB1Periph_DAC, ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;</span><br><span class="line">GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;</span><br><span class="line"><span class="built_in">GPIO_Init</span>(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;</span><br><span class="line">DAC_InitStructure.DAC_Trigger = DAC_Trigger_T6_TRGO;</span><br><span class="line">DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;</span><br><span class="line"><span class="built_in">DAC_Init</span>(DAC_Channel_1, &amp;DAC_InitStructure);</span><br><span class="line"><span class="built_in">DAC_Init</span>(DAC_Channel_2, &amp;DAC_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置DMA</span></span><br><span class="line">DMA_InitTypeDef DMA_InitStruct;</span><br><span class="line"><span class="built_in">DMA_StructInit</span>(&amp;DMA_InitStruct);</span><br><span class="line"></span><br><span class="line"><span class="built_in">RCC_AHB1PeriphClockCmd</span>(RCC_AHB1Periph_DMA1, ENABLE);</span><br><span class="line"></span><br><span class="line">DMA_InitStruct.DMA_PeripheralBaseAddr = (u32)DAC_DHR12R1_ADDR;</span><br><span class="line">DMA_InitStruct.DMA_Memory0BaseAddr = (u32)&amp;DAC_buff[<span class="number">0</span>];<span class="comment">//DAC1</span></span><br><span class="line">DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral;</span><br><span class="line">DMA_InitStruct.DMA_BufferSize = DAC_BUF_LEN;</span><br><span class="line">DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;</span><br><span class="line">DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;</span><br><span class="line">DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;</span><br><span class="line">DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;</span><br><span class="line">DMA_InitStruct.DMA_Mode = DMA_Mode_Circular;</span><br><span class="line">DMA_InitStruct.DMA_Priority = DMA_Priority_High;</span><br><span class="line">DMA_InitStruct.DMA_Channel = DMA_Channel_7;</span><br><span class="line">DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;</span><br><span class="line">DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;</span><br><span class="line">  DMA_InitStruct.DMA_MemoryBurst   = DMA_MemoryBurst_Single;</span><br><span class="line">  DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;</span><br><span class="line"></span><br><span class="line"><span class="built_in">DMA_Init</span>(DMA1_Stream5, &amp;DMA_InitStruct);</span><br><span class="line"></span><br><span class="line">DMA_InitStruct.DMA_PeripheralBaseAddr = (u32)DAC_DHR12R2_ADDR;</span><br><span class="line">DMA_InitStruct.DMA_Memory0BaseAddr = (u32)&amp;DAC_buff[<span class="number">1</span>];<span class="comment">//DAC2</span></span><br><span class="line"><span class="built_in">DMA_Init</span>(DMA1_Stream6, &amp;DMA_InitStruct);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启DMA传输完成中断</span></span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line"></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannel = DMA1_Stream6_IRQn;</span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>;</span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>;</span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">  <span class="built_in">NVIC_Init</span>(&amp;NVIC_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="built_in">DMA_ClearITPendingBit</span>(DMA1_Stream6, DMA_IT_TCIF6);</span><br><span class="line"><span class="built_in">DMA_ClearITPendingBit</span>(DMA1_Stream6, DMA_IT_HTIF6);</span><br><span class="line"><span class="built_in">DMA_ITConfig</span>(DMA1_Stream6, DMA_IT_TC, ENABLE);</span><br><span class="line"><span class="built_in">DMA_ITConfig</span>(DMA1_Stream6, DMA_IT_HT, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//DMA_Cmd(DMA1_Stream5, ENABLE);</span></span><br><span class="line"><span class="comment">//DMA_Cmd(DMA1_Stream6, ENABLE);</span></span><br><span class="line"><span class="built_in">DAC_Cmd</span>(DAC_Channel_1, ENABLE);</span><br><span class="line">  <span class="built_in">DAC_Cmd</span>(DAC_Channel_2, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">DAC_DMACmd</span>(DAC_Channel_1, ENABLE);</span><br><span class="line"><span class="built_in">DAC_DMACmd</span>(DAC_Channel_2, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">TIM6_Config</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置DAC采样率和DMA数据长度，并启动DMA DAC</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DAC_DMA_Start</span><span class="params">(<span class="type">uint32_t</span> freq, <span class="type">uint16_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//设置DMA缓冲长度需要停止DMA</span></span><br><span class="line"><span class="built_in">DAC_DMA_Stop</span>();</span><br><span class="line"><span class="comment">//设置DMA DAC缓冲长度</span></span><br><span class="line"><span class="built_in">DMA_SetCurrDataCounter</span>(DMA1_Stream5, len);</span><br><span class="line"><span class="built_in">DMA_SetCurrDataCounter</span>(DMA1_Stream6, len);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置定时器</span></span><br><span class="line"><span class="built_in">TIM_SetAutoreload</span>(TIM6, (<span class="type">uint16_t</span>)((CNT_FREQ)/freq));</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动</span></span><br><span class="line"><span class="built_in">DMA_Cmd</span>(DMA1_Stream5, ENABLE);</span><br><span class="line"><span class="built_in">DMA_Cmd</span>(DMA1_Stream6, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//停止DMA DAC</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DAC_DMA_Stop</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">DMA_Cmd</span>(DMA1_Stream5, DISABLE);</span><br><span class="line"><span class="built_in">DMA_Cmd</span>(DMA1_Stream6, DISABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时器6用于设置DAC刷新率</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">TIM6_Config</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  TIM_TimeBaseInitTypeDef TIM6_TimeBase;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">RCC_APB1PeriphClockCmd</span>(RCC_APB1Periph_TIM6, ENABLE);</span><br><span class="line">  <span class="built_in">TIM_TimeBaseStructInit</span>(&amp;TIM6_TimeBase);</span><br><span class="line"></span><br><span class="line">  TIM6_TimeBase.TIM_Period        = (<span class="type">uint16_t</span>)((CNT_FREQ)/<span class="number">44100</span>);</span><br><span class="line">  TIM6_TimeBase.TIM_Prescaler     = <span class="number">0</span>;</span><br><span class="line">  TIM6_TimeBase.TIM_ClockDivision = <span class="number">0</span>;</span><br><span class="line">  TIM6_TimeBase.TIM_CounterMode   = TIM_CounterMode_Up;</span><br><span class="line">  <span class="built_in">TIM_TimeBaseInit</span>(TIM6, &amp;TIM6_TimeBase);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">TIM_SelectOutputTrigger</span>(TIM6, TIM_TRGOSource_Update);</span><br><span class="line">  <span class="built_in">TIM_Cmd</span>(TIM6, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  DAC out1 PA4输出电压</span></span><br><span class="line"><span class="comment">  * @param  dat：dac数值:，0~4095</span></span><br><span class="line"><span class="comment">  * @retval none</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DAC_Out1</span><span class="params">(<span class="type">uint16_t</span> dat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">DAC_SetChannel1Data</span>(DAC_Align_12b_R,  dat);</span><br><span class="line"><span class="built_in">DAC_SoftwareTriggerCmd</span>(DAC_Channel_1, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  DAC out2 PA5输出电压</span></span><br><span class="line"><span class="comment">  * @param  dat：dac数值:，0~4095</span></span><br><span class="line"><span class="comment">  * @retval none</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DAC_Out2</span><span class="params">(<span class="type">uint16_t</span> dat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">DAC_SetChannel2Data</span>(DAC_Align_12b_R,  dat);</span><br><span class="line"><span class="built_in">DAC_SoftwareTriggerCmd</span>(DAC_Channel_2, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************* *****END OF FILE****/</span></span><br></pre></td></tr></table></figure><p>源码：MP3播放流程 （原创野火，参考了野火的例程，本人进行整理和修改）</p><p>MP3player.c</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">******************************************************************************</span></span><br><span class="line"><span class="comment">* @file    mp3Player.c</span></span><br><span class="line"><span class="comment">* @author  fire</span></span><br><span class="line"><span class="comment">* @version V1.0</span></span><br><span class="line"><span class="comment">* @date    2023-08-13</span></span><br><span class="line"><span class="comment">* @brief   mp3解码</span></span><br><span class="line"><span class="comment">******************************************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ff.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mp3Player.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mp3dec.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dac.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 推荐使用以下格式mp3文件：</span></span><br><span class="line"><span class="comment"> * 采样率：44100Hz</span></span><br><span class="line"><span class="comment"> * 声  道：2</span></span><br><span class="line"><span class="comment"> * 比特率：320kbps</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 处理立体声音频数据时，输出缓冲区需要的最大大小为2304*16/8字节(16为PCM数据为16位)，</span></span><br><span class="line"><span class="comment"> * 这里我们定义MP3BUFFER_SIZE为2304</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MP3BUFFER_SIZE  2304</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INPUTBUF_SIZE   3000</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> HMP3DecoderMp3Decoder;<span class="comment">/* mp3解码器指针*/</span></span><br><span class="line"><span class="type">static</span> MP3FrameInfoMp3FrameInfo;<span class="comment">/* mP3帧信息  */</span></span><br><span class="line"><span class="type">static</span> MP3_TYPE mp3player;            <span class="comment">/* mp3播放设备 */</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">uint8_t</span> Isread = <span class="number">0</span>;          <span class="comment">/* DMA传输完成标志 */</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">uint8_t</span> dac_ht = <span class="number">0</span>;          <span class="comment">//DAC dma 半传输标志</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> led_delay = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> inputbuf[INPUTBUF_SIZE]=&#123;<span class="number">0</span>&#125;;     <span class="comment">/* 解码输入缓冲区，1940字节为最大MP3帧大小  */</span></span><br><span class="line"><span class="type">static</span> <span class="type">short</span> outbuffer[MP3BUFFER_SIZE];  <span class="comment">/* 解码输出缓冲区*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> FIL file;<span class="comment">/* file objects */</span></span><br><span class="line"><span class="type">static</span> UINT bw;       <span class="comment">/* File R/W count */</span></span><br><span class="line">FRESULT result;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从SD卡读取MP3源文件进行解码，并传入DAC缓冲区</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MP3DataDecoder</span><span class="params">(<span class="type">uint8_t</span> **read_ptr, <span class="type">int</span> *bytes_left)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> err = <span class="number">0</span>, i = <span class="number">0</span>, outputSamps = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bufflag开始解码 参数：mp3解码结构体、输入流指针、输入流大小、输出流指针、数据格式</span></span><br><span class="line">err = <span class="built_in">MP3Decode</span>(Mp3Decoder, read_ptr, bytes_left, outbuffer, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (err != ERR_MP3_NONE)<span class="comment">//错误处理</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (err)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> ERR_MP3_INDATA_UNDERFLOW:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ERR_MP3_INDATA_UNDERFLOW\r\n&quot;</span>);</span><br><span class="line">result = <span class="built_in">f_read</span>(&amp;file, inputbuf, INPUTBUF_SIZE, &amp;bw);</span><br><span class="line">*read_ptr = inputbuf;</span><br><span class="line">*bytes_left = bw;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ERR_MP3_MAINDATA_UNDERFLOW:</span><br><span class="line"><span class="comment">/* do nothing - next call to decode will provide more mainData */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ERR_MP3_MAINDATA_UNDERFLOW\r\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;UNKNOWN ERROR:%d\r\n&quot;</span>, err);</span><br><span class="line"><span class="comment">// 跳过此帧</span></span><br><span class="line"><span class="keyword">if</span> (*bytes_left &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">(*bytes_left) --;</span><br><span class="line">read_ptr ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//解码无错误，准备把数据输出到PCM</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MP3GetLastFrameInfo</span>(Mp3Decoder, &amp;Mp3FrameInfo);<span class="comment">//获取解码信息</span></span><br><span class="line"><span class="comment">/* 输出到DAC */</span></span><br><span class="line">outputSamps = Mp3FrameInfo.outputSamps;<span class="comment">//PCM数据个数</span></span><br><span class="line"><span class="keyword">if</span> (outputSamps &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Mp3FrameInfo.nChans == <span class="number">1</span>)<span class="comment">//单声道</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//单声道数据需要复制一份到另一个声道</span></span><br><span class="line"><span class="keyword">for</span> (i = outputSamps - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">outbuffer[i * <span class="number">2</span>] = outbuffer[i];</span><br><span class="line">outbuffer[i * <span class="number">2</span> + <span class="number">1</span>] = outbuffer[i];</span><br><span class="line">&#125;</span><br><span class="line">outputSamps *= <span class="number">2</span>;</span><br><span class="line">&#125;<span class="comment">//if (Mp3FrameInfo.nChans == 1)//单声道</span></span><br><span class="line">&#125;<span class="comment">//if (outputSamps &gt; 0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将数据传送至DMA DAC缓冲区</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; outputSamps/<span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dac_ht == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">DAC_buff[<span class="number">0</span>][i] = outbuffer[<span class="number">2</span>*i] * mp3player.ucVolume /<span class="number">100</span> + <span class="number">32768</span>;</span><br><span class="line">DAC_buff[<span class="number">1</span>][i] = outbuffer[<span class="number">2</span>*i+<span class="number">1</span>] * mp3player.ucVolume /<span class="number">100</span> + <span class="number">32768</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">DAC_buff[<span class="number">0</span>][i+outputSamps/<span class="number">2</span>] = outbuffer[<span class="number">2</span>*i] * mp3player.ucVolume /<span class="number">100</span> + <span class="number">32768</span>;</span><br><span class="line">DAC_buff[<span class="number">1</span>][i+outputSamps/<span class="number">2</span>] = outbuffer[<span class="number">2</span>*i+<span class="number">1</span>] * mp3player.ucVolume /<span class="number">100</span> + <span class="number">32768</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">//else 解码正常</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取一段MP3数据，并把读取的指针赋值read_ptr，长度赋值bytes_left</span></span><br><span class="line"><span class="function"><span class="type">uint8_t</span> <span class="title">read_file</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *mp3file, <span class="type">uint8_t</span> **read_ptr, <span class="type">int</span> *bytes_left)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">result = <span class="built_in">f_read</span>(&amp;file, inputbuf, INPUTBUF_SIZE, &amp;bw);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(result != FR_OK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;读取%s失败 -&gt; %d\r\n&quot;</span>, mp3file, result);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">*read_ptr = inputbuf;</span><br><span class="line">*bytes_left = bw;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  MP3格式音频播放主程序</span></span><br><span class="line"><span class="comment">  * @param  mp3file MP3文件路径</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mp3PlayerDemo</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *mp3file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> *read_ptr = inputbuf;</span><br><span class="line"><span class="type">int</span>read_offset = <span class="number">0</span>;<span class="comment">/* 读偏移指针 */</span></span><br><span class="line"><span class="type">int</span>bytes_left = <span class="number">0</span>;<span class="comment">/* 剩余字节数 */</span></span><br><span class="line"></span><br><span class="line">mp3player.ucStatus = STA_IDLE;</span><br><span class="line">mp3player.ucVolume = <span class="number">15</span>; <span class="comment">//音量值，100满</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试打开MP3文件</span></span><br><span class="line">result = <span class="built_in">f_open</span>(&amp;file, mp3file, FA_READ);</span><br><span class="line"><span class="keyword">if</span>(result != FR_OK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Open mp3file :%s fail!!!-&gt;%d\r\n&quot;</span>, mp3file, result);</span><br><span class="line">result = <span class="built_in">f_close</span> (&amp;file);</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">/* 停止播放 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前播放文件 -&gt; %s\n&quot;</span>, mp3file);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化MP3解码器</span></span><br><span class="line">Mp3Decoder = <span class="built_in">MP3InitDecoder</span>();</span><br><span class="line"><span class="keyword">if</span>(Mp3Decoder == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;初始化helix解码库设备失败！\r\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">/* 停止播放 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;初始化helix解码库完成\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试读取一段MP3数据，并把读取的指针赋值read_ptr，长度赋值bytes_left</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">read_file</span>(mp3file, &amp;read_ptr, &amp;bytes_left))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MP3FreeDecoder</span>(Mp3Decoder);</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">/* 停止播放 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试解码成功</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">MP3DataDecoder</span>(&amp;read_ptr, &amp;bytes_left))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印MP3信息</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; \r\n Bitrate       %dKbps&quot;</span>, Mp3FrameInfo.bitrate/<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; \r\n Samprate      %dHz&quot;</span>,   Mp3FrameInfo.samprate);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; \r\n BitsPerSample %db&quot;</span>,    Mp3FrameInfo.bitsPerSample);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; \r\n nChans        %d&quot;</span>,     Mp3FrameInfo.nChans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; \r\n Layer         %d&quot;</span>,     Mp3FrameInfo.layer);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; \r\n Version       %d&quot;</span>,     Mp3FrameInfo.version);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; \r\n OutputSamps   %d&quot;</span>,     Mp3FrameInfo.outputSamps);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动DAC，开始发声</span></span><br><span class="line"><span class="keyword">if</span> (Mp3FrameInfo.nChans == <span class="number">1</span>)<span class="comment">//单声道要将outputSamps*2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DAC_DMA_Start</span>(Mp3FrameInfo.samprate, <span class="number">2</span> * Mp3FrameInfo.outputSamps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//双声道直接用Mp3FrameInfo.outputSamps</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DAC_DMA_Start</span>(Mp3FrameInfo.samprate, Mp3FrameInfo.outputSamps);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//解码失败</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MP3FreeDecoder</span>(Mp3Decoder);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 放音状态 */</span></span><br><span class="line">mp3player.ucStatus = STA_PLAYING;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 进入主程序循环体 */</span></span><br><span class="line"><span class="keyword">while</span>(mp3player.ucStatus == STA_PLAYING)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//寻找帧同步，返回第一个同步字的位置</span></span><br><span class="line">read_offset = <span class="built_in">MP3FindSyncWord</span>(read_ptr, bytes_left);</span><br><span class="line"><span class="keyword">if</span>(read_offset &lt; <span class="number">0</span>)<span class="comment">//没有找到同步字</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">read_file</span>(mp3file, &amp;read_ptr, &amp;bytes_left))<span class="comment">//重新读取一次文件再找</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">//回到while(mp3player.ucStatus == STA_PLAYING)后面</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//找到同步字</span></span><br><span class="line">&#123;</span><br><span class="line">read_ptr   += read_offset;<span class="comment">//偏移至同步字的位置</span></span><br><span class="line">bytes_left -= read_offset;<span class="comment">//同步字之后的数据大小</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(bytes_left &lt; <span class="number">1024</span>)<span class="comment">//如果剩余的数据小于1024字节，补充数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 注意这个地方因为采用的是DMA读取，所以一定要4字节对齐  */</span></span><br><span class="line">u16 i = (<span class="type">uint32_t</span>)(bytes_left)&amp;<span class="number">3</span>;<span class="comment">//判断多余的字节</span></span><br><span class="line"><span class="keyword">if</span>(i) i=<span class="number">4</span>-i;<span class="comment">//需要补充的字节</span></span><br><span class="line"><span class="built_in">memcpy</span>(inputbuf+i, read_ptr, bytes_left);<span class="comment">//从对齐位置开始复制</span></span><br><span class="line">read_ptr = inputbuf+i;<span class="comment">//指向数据对齐位置</span></span><br><span class="line">result = <span class="built_in">f_read</span>(&amp;file, inputbuf+bytes_left+i, INPUTBUF_SIZE-bytes_left-i, &amp;bw);<span class="comment">//补充数据</span></span><br><span class="line"><span class="keyword">if</span>(result != FR_OK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;读取%s失败 -&gt; %d\r\n&quot;</span>,mp3file,result);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">bytes_left += bw;<span class="comment">//有效数据流大小</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MP3数据解码并送入DAC缓存</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">MP3DataDecoder</span>(&amp;read_ptr, &amp;bytes_left))</span><br><span class="line">&#123;<span class="comment">//如果播放出错，Isread置1，避免卡住死循环</span></span><br><span class="line">Isread = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mp3文件读取完成，退出</span></span><br><span class="line"><span class="keyword">if</span>(file.fptr == file.fsize)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;单曲播放完毕\r\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待DAC发送一半或全部中断</span></span><br><span class="line"><span class="keyword">while</span>(Isread == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">led_delay++;</span><br><span class="line"><span class="keyword">if</span>(led_delay == <span class="number">0xffffff</span>)</span><br><span class="line">&#123;</span><br><span class="line">led_delay=<span class="number">0</span>;</span><br><span class="line">LED1_TROG;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Input_scan();//等待DMA传输完成，此间可以运行按键扫描及处理事件</span></span><br><span class="line">&#125;</span><br><span class="line">Isread = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行到此处，说明单曲播放完成，收尾工作</span></span><br><span class="line"><span class="built_in">DAC_DMA_Stop</span>();<span class="comment">//停止喂DAC数据</span></span><br><span class="line">mp3player.ucStatus = STA_IDLE;</span><br><span class="line"><span class="built_in">MP3FreeDecoder</span>(Mp3Decoder);<span class="comment">//清理缓存</span></span><br><span class="line"><span class="built_in">f_close</span>(&amp;file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DMA1_Stream6_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">DMA_GetITStatus</span>(DMA1_Stream6, DMA_IT_HTIF6) != RESET) <span class="comment">//半传输</span></span><br><span class="line">&#123;</span><br><span class="line">dac_ht = <span class="number">1</span>;</span><br><span class="line">Isread=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DMA_ClearITPendingBit</span>(DMA1_Stream6, DMA_IT_HTIF6);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">DMA_GetITStatus</span>(DMA1_Stream6, DMA_IT_TCIF6) != RESET) <span class="comment">//全传输</span></span><br><span class="line">&#123;</span><br><span class="line">dac_ht = <span class="number">0</span>;</span><br><span class="line">Isread=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DMA_ClearITPendingBit</span>(DMA1_Stream6, DMA_IT_TCIF6);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************** (END OF FILE) *********************************/</span></span><br></pre></td></tr></table></figure><p>源码：main.c</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  * @file    ../User/main.c</span></span><br><span class="line"><span class="comment">  * @author  ZL</span></span><br><span class="line"><span class="comment">  * @version V1.0</span></span><br><span class="line"><span class="comment">  * @date    2015-12-26</span></span><br><span class="line"><span class="comment">  * @brief   Main program body</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Includes ------------------------------------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hw_includes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ff.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;exfuns.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mp3Player.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历目录文件并打印输出</span></span><br><span class="line"><span class="function">u8 <span class="title">scan_files</span><span class="params">(u8 * path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FRESULT res;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">512</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="type">char</span> *fn;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _USE_LFN</span></span><br><span class="line"> fileinfo.lfsize = _MAX_LFN * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">fileinfo.lfname = buf;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">res = <span class="built_in">f_opendir</span>(&amp;dir,(<span class="type">const</span> TCHAR*)path);</span><br><span class="line"><span class="keyword">if</span> (res == FR_OK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">f_readdir</span>(&amp;dir, &amp;fileinfo);</span><br><span class="line"><span class="keyword">if</span> (res != FR_OK || fileinfo.fname[<span class="number">0</span>] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _USE_LFN</span></span><br><span class="line">fn = *fileinfo.lfname ? fileinfo.lfname : fileinfo.fname;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">fn = fileinfo.fname;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s/&quot;</span>, path);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, fn);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Main program</span></span><br><span class="line"><span class="comment">  * @param  None</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">delay_init</span>(<span class="number">168</span>);</span><br><span class="line"><span class="built_in">usart1_Init</span>(<span class="number">115200</span>);</span><br><span class="line"><span class="built_in">LED_Init</span>();</span><br><span class="line"><span class="built_in">DAC_Config</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">SD_Init</span>())</span><br><span class="line"> &#123;</span><br><span class="line"><span class="built_in">exfuns_init</span>();<span class="comment">//为fatfs相关变量申请内存</span></span><br><span class="line"><span class="built_in">f_mount</span>(fs[<span class="number">0</span>],<span class="string">&quot;0:&quot;</span>,<span class="number">1</span>); <span class="comment">//挂载SD卡</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印SD目录和文件</span></span><br><span class="line"><span class="built_in">scan_files</span>(<span class="string">&quot;0:&quot;</span>);</span><br><span class="line"></span><br><span class="line">LED0_ON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">mp3PlayerDemo</span>(<span class="string">&quot;0:/断桥残雪.MP3&quot;</span>);</span><br><span class="line"><span class="built_in">mp3PlayerDemo</span>(<span class="string">&quot;0:/张国荣-玻璃之情.MP3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">delay_ms</span>(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为方便调试测试，使用usart1打印数据。实测效果：</p><p><img src="https://img-blog.csdnimg.cn/bad9436c9a4e40de9bbd62abbae67b7c.jpeg"></p><p><img src="https://img-blog.csdnimg.cn/54ff22470d72499bb3e585a487abab46.jpeg"></p><p>程序源码与原理图，测试音频：</p><p>链接：<a href="https://pan.baidu.com/s/10hYXkrqnuBQgs0DWKLUUOA?pwd=iatt">https://pan.baidu.com/s/10hYXkrqnuBQgs0DWKLUUOA?pwd=iatt</a><br>提取码：iatt</p><p>知道这里下载要积分登录什么的麻烦得很，所以程序放到百度网盘了，假如连接失效，记得在评论区喊我更新！</p><p>理论上STM32F1或者其他系列也能用这个方案，要自己改改测试喽，本文把思路分享出来抛砖引玉。</p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 外设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【STM32】HAL库 STM32CubeMX教程十三---RTC时钟</title>
      <link href="/2024/03/stm32-%E3%80%90STM32%E3%80%91HAL%E5%BA%93-STM32CubeMX%E6%95%99%E7%A8%8B%E5%8D%81%E4%B8%89-RTC%E6%97%B6%E9%92%9F/"/>
      <url>/2024/03/stm32-%E3%80%90STM32%E3%80%91HAL%E5%BA%93-STM32CubeMX%E6%95%99%E7%A8%8B%E5%8D%81%E4%B8%89-RTC%E6%97%B6%E9%92%9F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>前言：</p><p>本系列教程将 对应外设原理，HAL库与STM32CubeMX结合在一起讲解，使您可以更快速的学会各个模块的使用</p><p>所用工具：</p><p>1、芯片： STM32F407ZET6&#x2F; STM32F103ZET6</p><p>2、STM32CubeMx软件</p><p>3、IDE： MDK-Keil软件</p><p>4、STM32F1xx&#x2F;STM32F4xxHAL库</p><p>知识概括：</p><p>通过本篇博客您将学到：</p><p>RTC时钟原理</p><p>STM32CubeMX创建RTC例程</p><p>HAL库定时器RTC函数库</p><p><strong>PS: 这里的RTC讲解，我们只将原理，不讲寄存器，如果要看RTC的寄存器，请看这篇文章</strong><br><a href="https://blog.csdn.net/as480133937/article/details/105026033">【STM32】RTC实时时钟，步骤超细详解，一文看懂RTC</a></p><h3 id="什么是RTC"><a href="#什么是RTC" class="headerlink" title="什么是RTC"></a>什么是RTC</h3><p>**RTC (Real Time Clock)**：实时时钟</p><p><strong>RTC是个独立的定时器</strong>。RTC模块拥有一个连续计数的计数器，在相应的软件配置下，可以提供时钟日历的功能。修改计数器的值可以重新设置当前时间和日期 RTC还包含用于管理低功耗模式的自动唤醒单元。</p><p><img src="https://img-blog.csdnimg.cn/20200423215123488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p><strong>在断电情况下 RTC仍可以独立运行 只要芯片的备用电源一直供电,RTC上的时间会一直走。</strong></p><p>RTC实质是一个掉电后还继续运行的定时器,从定时器的角度来看,相对于通用定时器TIM外设,它的功能十分简单,只有计时功能(也可以触发中断)。但其高级指出也就在于掉电之后还可以正常运行。</p><p>两个 32 位寄存器包含二进码十进数格式 (BCD) 的秒、分钟、小时（ 12 或 24 小时制）、星期几、日期、月份和年份。此外，还可提供二进制格式的亚秒值。系统可以自动将月份的天数补偿为 28、29（闰年）、30 和 31 天。</p><p>上电复位后，所有RTC寄存器都会受到保护，以防止可能的非正常写访问。</p><p>无论器件状态如何（运行模式、低功耗模式或处于复位状态），只要电源电压保持在工作范围内，RTC使不会停止工作。</p><h4 id="RCT特征："><a href="#RCT特征：" class="headerlink" title="; RCT特征："></a><a name="rct_47">;</a> <strong>RCT特征：</strong></h4><p>● <strong>可编程的预分频系数：分频系数高为220。</strong><br>● <strong>32位的可编程计数器，可用于较长时间段的测量。</strong><br>● <strong>2个分离的时钟：用于APB1接口的PCLK1和RTC时钟(RTC时钟的频率必须小于PCLK1时钟 频率的四分之一以上)。</strong><br>● 可以选择以下 <strong>三种RTC的时钟源</strong>：<br>● HSE时钟除以128；<br>● LSE振荡器时钟；<br>● LSI振荡器时钟</p><p>● <strong>2个独立的复位类型：</strong><br>● APB1接口由系统复位；<br>● RTC核心(预分频器、闹钟、计数器和分频器)只能由后备域复位</p><p>● <strong>3个专门的可屏蔽中断：</strong><br>● 1. <strong>闹钟中断</strong>，用来产生一个软件可编程的闹钟中断。</p><p>● 2. <strong>秒中断</strong>，用来产生一个可编程的周期性中断信号(长可达1秒)。</p><p>● 3. <strong>溢出中断</strong>，指示内部可编程计数器溢出并回转为0的状态。</p><p><strong>RTC时钟源：</strong><br>三种不同的时钟源可被用来驱动系统时钟(SYSCLK)：</p><p>● <strong>HSI振荡器时钟</strong><br>● <strong>HSE振荡器时钟</strong><br>● <strong>PLL时钟</strong></p><p>这些设备有以下2种二级时钟源：</p><p>● 40kHz低速内部RC，可以用于驱动独立看门狗和通过程序选择驱动RTC。 RTC用于从停机&#x2F;待机模式下自动唤醒系统。<br>● 32.768kHz低速外部晶体也可用来通过程序选择驱动RTC(RTCCLK)。</p><h4 id="RTC原理框图"><a href="#RTC原理框图" class="headerlink" title="RTC原理框图"></a>RTC原理框图</h4><p><img src="https://img-blog.csdnimg.cn/20200322144525734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"><br>RTC时钟的框图还是比较简单的，这里我们把他分成 <strong><code>&amp;#x4E24;&amp;#x4E2A;&amp;#x90E8;&amp;#x5206;</code></strong>:</p><p><strong>APB1 接口</strong>：用来和 APB1 总线相连。 此单元还包含一组 16 位寄存器，可通过 APB1 总线对其进行读写操作。APB1 接口由 APB1 总 线时钟驱动，用来与 APB1 总线连接。</p><p>通过APB1接口可以访问RTC的相关寄存器（预分频值，计数器值，闹钟值）。</p><p><strong>RTC 核心接口</strong>：由一组可编程计数器组成，分成 ** <code>&amp;#x4E24;&amp;#x4E2A;&amp;#x4E3B;&amp;#x8981;&amp;#x6A21;&amp;#x5757;</code>** 。<br><img src="https://img-blog.csdnimg.cn/20200322223612113.png">g)<br><strong>第一个模块是 RTC 的 预分频模块</strong>，它可编程产生 1 秒的 RTC 时间基准 TR_CLK。RTC 的预分频模块包含了一个 20 位的可编程分频器(RTC 预分频器)。如果在 RTC_CR 寄存器中设置了相应的允许位，则在每个 TR_CLK 周期中 RTC 产生一个中断(秒中断)。<br><img src="https://img-blog.csdnimg.cn/2020032222362770.png"><br><strong>第二个模块是一个 32 位的可编程计数器 （RTC_CNT）</strong>，可被初始化为当前的系统时间，一个 32 位的时钟计数器，按秒钟计算，可以记 录 4294967296 秒，约合 136 年左右，作为一般应用，这已经是足够了的。</p><h4 id="RTC具体流程："><a href="#RTC具体流程：" class="headerlink" title="; RTC具体流程："></a><a name="rtc_107">;</a> <strong>RTC具体流程：</strong></h4><p><strong>RTCCLK经过RTC_DIV预分频，RTC_PRL设置预分频系数，然后得到TR_CLK时钟信号，我们一般设置其周期为1s，RTC_CNT计数器计数，假如1970设置为时间起点为0s，通过当前时间的秒数计算得到当前的时间。RTC_ALR是设置闹钟时间，RTC_CNT计数到RTC_ALR就会产生计数中断，</strong></p><ul><li><strong>RTC_Second</strong>为秒中断，用于刷新时间，</li><li><strong>RTC_Overflow</strong>是溢出中断。</li><li><strong>RTC Alarm</strong> 控制开关机</li></ul><h4 id="RTC时钟选择"><a href="#RTC时钟选择" class="headerlink" title="RTC时钟选择"></a>RTC时钟选择</h4><p><strong>使用HSE分频时钟或者LSI的时候,在主电源VDD掉电的情况下,这两个时钟来源都会受到影响,因此没法保证RTC正常工作.所以RTC一般都时钟低速外部时钟LSE,频率为实时时钟模块中常用的32.768KHz,因为32768 &#x3D; 2^15,分频容易实现,所以被广泛应用到RTC模块.(在主电源VDD有效的情况下(待机),RTC还可以配置闹钟事件使STM32退出待机模式).</strong></p><h4 id="RTC复位过程"><a href="#RTC复位过程" class="headerlink" title="RTC复位过程"></a>RTC复位过程</h4><p>除了RTC_PRL、RTC_ALR、RTC_CNT和RTC_DIV寄存器外，所有的系统寄存器都由系统复位或电源复位进行异步复位。<br>RTC_PRL、RTC_ALR、RTC_CNT和RTC_DIV寄存器仅能通过备份域复位信号复位。</p><p><strong>系统复位后,禁止访问后备寄存器和RCT,防止对后卫区域(BKP)的意外写操作</strong></p><h4 id="RTC中断"><a href="#RTC中断" class="headerlink" title="RTC中断"></a>RTC中断</h4><p><strong>秒中断：</strong><br>这里时钟自带一个秒中断，每当计数加一的时候就会触发一次秒中断，。注意，这里所说的秒中断并非一定是一秒的时间，它是由RTC时钟源和分频值决定的”秒”的时间，当然也是可以做到1秒钟中断一次。我们通过往秒中断里写更新时间的函数来达到时间同步的效果</p><p><strong>闹钟中断：</strong><br>闹钟中断就是设置一个预设定的值，计数每自加多少次触发一次闹钟中断</p><h3 id="CubeMX配置RTC"><a href="#CubeMX配置RTC" class="headerlink" title="CubeMX配置RTC"></a>CubeMX配置RTC</h3><h4 id="工程创建"><a href="#工程创建" class="headerlink" title="工程创建"></a>工程创建</h4><p><strong>1设置RCC</strong><br><img src="https://img-blog.csdnimg.cn/20200425101549368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li><strong>设置高速外部时钟HSE 选择外部时钟源</strong></li><li>*<em>使能外部晶振LSE</em></li></ul><p><strong>RTC设备因为其独特的运行方式（即掉电依旧运行）使用HSE分频时钟或者LSI的时候,在主电源VDD掉电的情况下,这两个时钟来源都会受到影响，资源消耗太大，小小的纽扣电池根本吃不消。没法保证RTC正常工作.所以RTC一般都时钟低速外部时钟LSE</strong></p><ol start="2"><li><strong>配置RTC</strong><br><img src="https://img-blog.csdnimg.cn/20200425110730403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></li></ol><ul><li><strong>Activate Clock Source 激活时钟源</strong></li><li>*<em>Activate calendar激活日历</em></li></ul><p><strong>这两个都要点，作用也很明显，先是使能时钟源，再使能RTC日历</strong></p><ul><li><strong>RTC_OUT： Not RTC_OUT</strong></li><li><strong>Tamper：</strong> *<em>×</em></li></ul><p>第一个是是否使能 <strong>tamper（PC13）引脚上输出校正的秒脉冲时钟，</strong></p><p>第二个： <strong>RTC入侵检测校验功能</strong></p><p><strong>RTC校验功能，使能侵入检测功能。RTC时钟经64分频输出到侵入检测引脚TAMPER上<br> 当 TAMPER引脚上的信号从 0变成1或者从 1变成 0(取决于备份控制寄存器BKP_CR的 TPAL位)，会产生一个侵入检测事件。侵入检测事件将所有数据备份寄存器内容清除。</strong></p><ol><li>也就是第一个是使能tamper（PC13）引脚作为时钟脉冲输出</li><li>第二个是使能tamper（PC13）引脚作为入侵检测功能</li></ol><p>下面是两个RTC的中断：</p><ul><li><strong>RTC全局中断RTC_IRQHandler()</strong></li><li>*<em>闹钟中断函数RTCAlarm_IRQHandler()</em></li></ul><p><img src="https://img-blog.csdnimg.cn/2020042514381771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p><strong>此处设置时间为2020&#x2F;04&#x2F;25 13:30:00</strong></p><ul><li>Data Format: 日期格式</li></ul><p><strong>Binary data format 十六进制<br>BCD data format BCD码进制</strong></p><p>使用自动配置，初始化时间必须使用BCD data format，原因是库函数存在bug，如果使用Binary data format，月份配置会出错，比如说11月，配置时会赋值为RTC_MONTH_NOVEMBER，而此宏定义值为0x11，也就是说其十进制值为17</p><ul><li><strong>Hours： 小时</strong></li><li><strong>Minutes： 分钟</strong></li><li><strong>Seconds： 秒</strong></li><li><strong>Week Day： 星期</strong></li><li><strong>Month 月份</strong></li><li><strong>Date： 日期</strong></li><li>*<em>Year： 年份</em></li></ul><p><strong>3 使能串口</strong><br><img src="https://img-blog.csdnimg.cn/20200425143944495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"><br><strong>使能一下串口，因为发送日期到上位机</strong></p><p><strong>4时钟源设置</strong><br><img src="https://img-blog.csdnimg.cn/20200425144337169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p>我的是 外部晶振为8MHz</p><ul><li>1选择外部时钟HSE 8MHz</li><li>2PLL锁相环倍频9倍</li><li>3系统时钟来源选择为PLL</li><li>4设置APB1分频器为 &#x2F;2</li><li>5 使能CSS监视时钟</li><li>*<em>6 设置RTC时钟为LSE</em></li></ul><p>32的时钟树框图 如果不懂的话请看<a href="https://blog.csdn.net/as480133937/article/details/98845509">《【STM32】系统时钟RCC详解(超详细，超全面)》</a></p><p><strong>5项目文件设置</strong><br><img src="https://img-blog.csdnimg.cn/20200425144600886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li>1 设置项目名称</li><li>2 设置存储路径</li><li>3 选择所用IDE<br><img src="https://img-blog.csdnimg.cn/2020042514462236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></li></ul><p><strong>6创建工程文件</strong></p><p><strong>然后点击GENERATE CODE 创建工程</strong></p><p><strong>配置下载工具</strong><br>新建的工程所有配置都是默认的 我们需要自行选择下载模式，勾选上下载后复位运行</p><p><img src="https://img-blog.csdnimg.cn/202004251446415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><h4 id="RTC-HAL库函数"><a href="#RTC-HAL库函数" class="headerlink" title=";  RTC_HAL库函数"></a><a name="rtc_hal_243">;</a>  RTC_HAL库函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span></span><br><span class="line"></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span></span><br><span class="line"></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br><span class="line"></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br><span class="line"></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetAlarm</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)</span></span><br><span class="line"></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetAlarm_IT</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)</span></span><br><span class="line"></span><br><span class="line">__weak <span class="keyword">void</span> <span class="title function_">HAL_RTC_AlarmAEventCallback</span><span class="params">(RTC_HandleTypeDef *hrtc)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">HAL_RTCEx_BKUPWrite</span><span class="params">(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)</span></span><br><span class="line"></span><br><span class="line">uint32_t <span class="title function_">HAL_RTCEx_BKUPRead</span><span class="params">(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister</span></span><br></pre></td></tr></table></figure><p>我们可以看到前面的四个函数，分别是</p><ul><li><strong>设置系统时间：HAL_RTC_SetTime();</strong></li><li><strong>读取系统时间: HAL_RTC_GetTime();</strong></li><li><strong>设置系统日期: HAL_RTC_SetDate();</strong></li><li>*<em>读取系统日期: HAL_RTC_GetDate();</em></li></ul><p>因为系统的时间和日期开始的时候已经设置过了，所以我们这里只用两个读取函数</p><p><strong>读取系统时间函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span></span><br></pre></td></tr></table></figure><p>功能： 获取RTC时钟的时间</p><p>参数：</p><ul><li>*hrtc RTC结构体参数 例：&amp;hi2c2</li><li><strong>RTC_TimeTypeDef</strong> *sTime： 获取RTC时间的结构体，</li><li>Format： <strong>获取时间的格式</strong><br>*<em>RTC_FORMAT_BIN 使用16进制<br>RTC_FORMAT_BCD 使用BCD进制</em></li></ul><p><strong>读取系统日期函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br></pre></td></tr></table></figure><p>功能： 获取RTC时钟的日期</p><p>参数：</p><ul><li>*hrtc RTC结构体参数 例：&amp;hi2c2</li><li><strong>RTC_DateTypeDef</strong> *sTime： 获取RTC日期的结构体，</li><li>Format： <strong>获取日期的格式</strong><br>*<em>RTC_FORMAT_BIN 使用16进制<br>RTC_FORMAT_BCD 使用BCD进制</em></li></ul><p>在stm32f1xx_hal_rtc.h头文件中，可以找到 <code>RTC_TimeTypeDef</code>， <code>RTC_DateTypeDef</code>这两个结构体的成员变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">uint8_t</span> Hours;</span><br><span class="line"></span><br><span class="line">  <span class="type">uint8_t</span> Minutes;</span><br><span class="line"></span><br><span class="line">  <span class="type">uint8_t</span> Seconds;</span><br><span class="line"></span><br><span class="line">&#125; RTC_TimeTypeDef;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">uint8_t</span> WeekDay;</span><br><span class="line"></span><br><span class="line">  <span class="type">uint8_t</span> Month;</span><br><span class="line"></span><br><span class="line">  <span class="type">uint8_t</span> Date;</span><br><span class="line"></span><br><span class="line">  <span class="type">uint8_t</span> Year;</span><br><span class="line"></span><br><span class="line">&#125; RTC_DateTypeDef;</span><br></pre></td></tr></table></figure><p><strong>程序代码：</strong></p><p>main.c</p><p><strong>在main.c中重写fputc函数，使得能够使用printf函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch,FILE *f)</span>&#123;</span><br><span class="line"> <span class="type">uint8_t</span> temp[<span class="number">1</span>]=&#123;ch&#125;;</span><br><span class="line"> HAL_UART_Transmit(&amp;huart1,temp,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"> <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义两个结构体来获取日期和时间：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RTC_DateTypeDef GetData;</span><br><span class="line"></span><br><span class="line">RTC_TimeTypeDef GetTime;</span><br></pre></td></tr></table></figure><p>在while循环中添加：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HAL_RTC_GetTime(&amp;hrtc, &amp;GetTime, RTC_FORMAT_BIN);</span><br><span class="line"></span><br><span class="line">   HAL_RTC_GetDate(&amp;hrtc, &amp;GetData, RTC_FORMAT_BIN);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%02d/%02d/%02d\r\n&quot;</span>,<span class="number">2000</span> + GetData.Year, GetData.Month, GetData.Date);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d\r\n&quot;</span>,GetTime.Hours, GetTime.Minutes, GetTime.Seconds);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">   HAL_Delay(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><strong>程序中使用HAL_RTC_GetTime（）,HAL_RTC_GetDate()读取时间和日期，并保存到结构体变量中，然后通过串口输出读取的时间和日期。</strong></p><p><strong>例程测试正常：</strong><br><img src="https://img-blog.csdnimg.cn/20200425153330941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><h4 id="RTC掉电重置"><a href="#RTC掉电重置" class="headerlink" title="RTC掉电重置"></a>RTC掉电重置</h4><p>但是呢，在hal库中生成的代码， <strong>每次断电就RTC时间会重置</strong>，每次上电都会重新初始化时间</p><p>因为HAL库设置了一个BKP寄存器保存一个标志。每次单片机启动时都读取这个标志并判断是不是预先设定的值：如度果不是就初始化RTC并设置时间，再设置标志为预期值；如果是预期值就跳过初始化和时间设置，继续执行后面的程序</p><p><strong>所以这里我们只需要每次上电执行RTC初始化之前，将标志设置为预期值即可</strong></p><p><strong>在rtc.c中的RTC_Init修改为以下内容即可</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">void</span> <span class="title function_">MX_RTC_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">RTC_TimeTypeDef time;</span><br><span class="line">RTC_DateTypeDef datebuff;</span><br><span class="line"></span><br><span class="line">  RTC_TimeTypeDef sTime = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  RTC_DateTypeDef DateToUpdate = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">__HAL_RCC_BKP_CLK_ENABLE();</span><br><span class="line">__HAL_RCC_PWR_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">  hrtc.Instance = RTC;</span><br><span class="line">  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;</span><br><span class="line">  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;</span><br><span class="line">  <span class="keyword">if</span> (HAL_RTC_Init(&amp;hrtc) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(HAL_RTCEx_BKUPRead(&amp;hrtc,RTC_BKP_DR1)!= <span class="number">0x5051</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  sTime.Hours = <span class="number">0x14</span>;</span><br><span class="line">  sTime.Minutes = <span class="number">0x30</span>;</span><br><span class="line">  sTime.Seconds = <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (HAL_RTC_SetTime(&amp;hrtc, &amp;sTime, RTC_FORMAT_BCD) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;</span><br><span class="line">  DateToUpdate.Month = RTC_MONTH_APRIL;</span><br><span class="line">  DateToUpdate.Date = <span class="number">0x25</span>;</span><br><span class="line">  DateToUpdate.Year = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (HAL_RTC_SetDate(&amp;hrtc, &amp;DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">__HAL_RTC_SECOND_ENABLE_IT(&amp;hrtc,RTC_IT_SEC);</span><br><span class="line">datebuff = DateToUpdate;</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR1, <span class="number">0x5051</span>);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR2, (<span class="type">uint16_t</span>)datebuff.Year);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR3, (<span class="type">uint16_t</span>)datebuff.Month);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR4, (<span class="type">uint16_t</span>)datebuff.Date);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR5, (<span class="type">uint16_t</span>)datebuff.WeekDay);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">datebuff.Year    = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR2);</span><br><span class="line">datebuff.Month   = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR3);</span><br><span class="line">datebuff.Date    = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR4);</span><br><span class="line">datebuff.WeekDay = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR5);</span><br><span class="line">DateToUpdate = datebuff;</span><br><span class="line"><span class="keyword">if</span> (HAL_RTC_SetDate(&amp;hrtc, &amp;DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line">Error_Handler();</span><br><span class="line">&#125;</span><br><span class="line">__HAL_RTC_SECOND_ENABLE_IT(&amp;hrtc,RTC_IT_SEC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425165901167.gif"><br><img src="https://img-blog.csdnimg.cn/20200425165904365.gif"></p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 外设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于STM32HAL库，RC522（RFID）模块读写驱动，无线IC卡读写</title>
      <link href="/2024/03/stm32-%E5%9F%BA%E4%BA%8ESTM32HAL%E5%BA%93%EF%BC%8CRC522%EF%BC%88RFID%EF%BC%89%E6%A8%A1%E5%9D%97%E8%AF%BB%E5%86%99%E9%A9%B1%E5%8A%A8%EF%BC%8C%E6%97%A0%E7%BA%BFIC%E5%8D%A1%E8%AF%BB%E5%86%99/"/>
      <url>/2024/03/stm32-%E5%9F%BA%E4%BA%8ESTM32HAL%E5%BA%93%EF%BC%8CRC522%EF%BC%88RFID%EF%BC%89%E6%A8%A1%E5%9D%97%E8%AF%BB%E5%86%99%E9%A9%B1%E5%8A%A8%EF%BC%8C%E6%97%A0%E7%BA%BFIC%E5%8D%A1%E8%AF%BB%E5%86%99/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="一、模块简短介绍"><a href="#一、模块简短介绍" class="headerlink" title="一、模块简短介绍"></a>一、模块简短介绍</h2><p>有关RC522模块的背景知识以及工作原理，本次实验暂时不做分享，这里贴上两位写得很好的博主，大家可自行查看。</p><p><a href="https://blog.csdn.net/m0_51220742/article/details/123683745" title="(5条消息) RC522(RFID)读写驱动_桃成蹊2.0的博客-CSDN博客">(5条消息) RC522(RFID)读写驱动_桃成蹊2.0的博客-CSDN博客<img src="https://csdnimg.cn/release/blog_editor_html/release2.3.6/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=N7T8">https://blog.csdn.net/m0_51220742&#x2F;article&#x2F;details&#x2F;123683745 ;</a> <a href="https://blog.csdn.net/weixin_45771489/article/details/124079134" title="(5条消息) STM32--RFID无线射频技术（RC522刷卡模块）_rc522射频模块详细资料_y黎好好的博客-CSDN博客">(5条消息) STM32–RFID无线射频技术（RC522刷卡模块）_rc522射频模块详细资料_y黎好好的博客-CSDN博客<img src="https://csdnimg.cn/release/blog_editor_html/release2.3.6/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=N7T8">https://blog.csdn.net/weixin_45771489&#x2F;article&#x2F;details&#x2F;124079134 ;</a></p><p><img src="https://img-blog.csdnimg.cn/b829df1211c843b49139edf393f1aa42.jpeg"></p><p>该模块价格普遍实惠，所以我买了一个自己玩玩。经过一段时间的摸爬滚打目前能够正常读写，后续会继续完善该模块的使用，并加入到其他嵌入式设计中。</p><h2 id="二、开发资料的使用及经验分享"><a href="#二、开发资料的使用及经验分享" class="headerlink" title="二、开发资料的使用及经验分享"></a>二、开发资料的使用及经验分享</h2><p>该模块的API函数淘宝有很多资源，数据手册也有，不过是英文版的。建议大家有时间还是要过一数据手册的重要部分，比如寄存器和指令集，通信协议等，可以使用知云文献查看，我习惯用它来看论文，适合翻译长段大段。也可以用WPS的翻译，小部分翻译，看个人使用习惯。要是有能力直接撸原文那就更好，节约时间。</p><p><img src="https://img-blog.csdnimg.cn/2e92c08f81ca46af8c0d2361b9d2e130.png"></p><p>找过很多资料，提供的API无非就是一套没有章法，毫无可读性的杂乱代码，十分影响学习效果。这里建议大家不要去死磕，可以看本次实验的代码逻辑和上文提到的两位博主，每一个底层函数都有注释，在一些底层函数的逻辑上可以结合这些API函数进行反推或者校验，可以帮助读者理解实现原理。</p><p>一开始是通过数据手册，硬着头皮啃无良店铺给的代码，没有注释，没有逻辑，没有章法。虽然没报错，但是能不能用完全不知道，就是这一步就花了好几天时间，所以建议大家不要像我一样埋头苦读，可以先看每一个函数的中文注释，整理出一个框架。</p><h2 id="三、源码解析"><a href="#三、源码解析" class="headerlink" title="三、源码解析"></a>三、源码解析</h2><p>代码总体逻辑没有变化，参考了两位博主的思路，我用官方的API函数进行修改。两位博主一位使用的软件实现SPI协议，一位使用板载SPI。两种方法我都试过，但是软件SPI协议总是通信失败，不知道是我协议写的不对还是通信速度和模块不匹配，暂时还未解决。</p><h3 id="软件模拟SPI"><a href="#软件模拟SPI" class="headerlink" title="软件模拟SPI"></a><strong>软件模拟SPI</strong></h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：SOFT_SPI_RC522_SendByte</span></span><br><span class="line"><span class="comment"> * 描述  ：向RC522发送1 Byte 数据</span></span><br><span class="line"><span class="comment"> * 输入  ：write_dat，要发送的数据</span></span><br><span class="line"><span class="comment"> * 返回  : RC522返回的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SOFT_SPI_RC522_SendByte</span>(<span class="params">uint8_t write_dat</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    uint8_t i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i</span><br></pre></td></tr></table></figure><p>有大佬如果发现问题，还请给我留言，也不知道是什么原因导致通信失败。</p><h3 id="板载SPI通信"><a href="#板载SPI通信" class="headerlink" title="板载SPI通信"></a><strong>板载SPI通信</strong></h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：SPI_WriteNBytes</span></span><br><span class="line"><span class="comment"> * 描述  ：向RC522发送n Byte 数据</span></span><br><span class="line"><span class="comment"> * 输入  ：SPIx : 要发送数据的SPI</span></span><br><span class="line"><span class="comment"> * 输入  ：p_TxData : 要发送的数据</span></span><br><span class="line"><span class="comment"> * 输入  ：sendDataNum : 要发送的数据量(Byte)</span></span><br><span class="line"><span class="comment"> * 返回  : 0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">SPI_WriteNBytes</span>(<span class="params">SPI_TypeDef* SPIx, uint8_t *p_TxData,uint32_t sendDataNum</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> retry=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(sendDataNum--)&#123;</span><br><span class="line"><span class="keyword">while</span>((SPIx-&gt;SR&amp;SPI_FLAG_TXE)==<span class="number">0</span>)<span class="comment">//等待发送区空</span></span><br><span class="line">&#123;</span><br><span class="line">retry++;</span><br><span class="line"><span class="keyword">if</span>(retry&gt;<span class="number">20000</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">SPIx-&gt;DR=*p_TxData++;<span class="comment">//发送一个byte</span></span><br><span class="line">retry=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((SPIx-&gt;SR&amp;SPI_FLAG_RXNE)==<span class="number">0</span>)<span class="comment">//等待接收完一个byte</span></span><br><span class="line">&#123;</span><br><span class="line">SPIx-&gt;SR = SPIx-&gt;SR;</span><br><span class="line">retry++;</span><br><span class="line"><span class="keyword">if</span>(retry&gt;<span class="number">20000</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">SPIx-&gt;DR;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：SPI_ReadNBytes</span></span><br><span class="line"><span class="comment"> * 描述  ：读取RC522 n Byte 数据</span></span><br><span class="line"><span class="comment"> * 输入  ：SPIx : 要读取数据的SPI</span></span><br><span class="line"><span class="comment"> * 输入  ：p_RxData : 要读取的数据</span></span><br><span class="line"><span class="comment"> * 输入  ：readDataNum : 要读取的数据量(Byte)</span></span><br><span class="line"><span class="comment"> * 返回  : 0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">SPI_ReadNBytes</span>(<span class="params">SPI_TypeDef* SPIx, uint8_t *p_RxData,uint32_t readDataNum</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> retry=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(readDataNum--)&#123;</span><br><span class="line">SPIx-&gt;DR = <span class="number">0xFF</span>;</span><br><span class="line"><span class="keyword">while</span>(!(SPIx-&gt;SR&amp;SPI_FLAG_TXE))&#123;</span><br><span class="line">retry++;</span><br><span class="line"><span class="keyword">if</span>(retry&gt;<span class="number">20000</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">retry = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!(SPIx-&gt;SR&amp;SPI_FLAG_RXNE))&#123;</span><br><span class="line">retry++;</span><br><span class="line"><span class="keyword">if</span>(retry&gt;<span class="number">20000</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">*p_RxData++ = SPIx-&gt;DR;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本实验使用读取寄存器状态来完成SPI通信，未使用HAL_SPI_TransmitReceive库函数。</p><h3 id="源码部分"><a href="#源码部分" class="headerlink" title="源码部分"></a>源码部分</h3><p>主函数比较简略，调用一个操作函数，用按键触发的方式启动该函数实现读写。main.c 中，加入以下代码：</p><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   RC522_Init();</span><br><span class="line">uint8_t key;</span><br><span class="line"></span><br><span class="line">   uint8_t Write_Card_Data[<span class="number">16</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//要写入的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">key = key_scan();<span class="comment">//按键扫描函数，自己定义修改</span></span><br><span class="line"><span class="keyword">if</span>(key==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">RC522_Start(<span class="number">5</span>,readID,Write_Card_Data);<span class="comment">//readID  读命令</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(key==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">RC522_Start(<span class="number">5</span>,writeID,Write_Card_Data);<span class="comment">//writeID  写命令</span></span><br><span class="line">&#125;</span><br><span class="line">delay_ms(<span class="number">100</span>);</span><br><span class="line">LED0=!LED0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RC522部分"><a href="#RC522部分" class="headerlink" title="RC522部分"></a>RC522部分</h4><p><strong>RC522.c</strong></p><p>其中RC522_Start是自定义函数，只要操作流程正确，可自行编写想要的操作方式，本实验只完成简单的单块读写操作。蓝卡和白卡的卡号根据自己的修改，可以通过手机NFC功能查看卡号，同时也能查看扇区数据，APP可以使用上文提到的博主推荐的NFC Writer。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &quot;RC522.h&quot;</span></span><br><span class="line"><span class="meta">#include &quot;stdio.h&quot;</span></span><br><span class="line"><span class="meta">#include &quot;delay.h&quot;</span></span><br><span class="line"><span class="meta">#include &quot;spi.h&quot;</span></span><br><span class="line"><span class="meta">#include &quot;oled.h&quot;</span></span><br><span class="line"><span class="meta">#include &quot;string.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// M1卡分为16个扇区，每个扇区由四个块（块0、块1、块2、块3）组成</span></span><br><span class="line"><span class="comment">// 将16个扇区的64个块按绝对地址编号为：0~63,每块16个字节</span></span><br><span class="line"><span class="comment">// 第0个扇区的块0（即绝对地址0块），用于存放厂商代码，已经固化不可更改</span></span><br><span class="line"><span class="comment">// 每个扇区的块0、块1、块2为数据块，可用于存放数据</span></span><br><span class="line"><span class="comment">// 每个扇区的块3为控制块（绝对地址为:块3、块7、块11.....）包括密码A，存取控制、密码B等</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RC522_Init</span>(<span class="params"><span class="keyword">void</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">RC522_SPI_GPIO_Init();<span class="comment">//初始化RC522的复位引脚和片选引脚</span></span><br><span class="line"></span><br><span class="line">SPI1_Init();<span class="comment">//初始化SPI</span></span><br><span class="line"></span><br><span class="line">    delay_ms(<span class="number">50</span>);</span><br><span class="line">PcdReset();<span class="comment">//复位RC522读卡器</span></span><br><span class="line"></span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line">PcdAntennaOff();<span class="comment">//关闭天线发射</span></span><br><span class="line"></span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line">    PcdAntennaOn();<span class="comment">//开启天线发射</span></span><br><span class="line"></span><br><span class="line">printf(<span class="string">&quot;RFID-MFRC522 初始化完成\nPress KEY0 Or KEY1 To Start...\r\n&quot;</span>);  <span class="comment">//初始化完成</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uint8_t IC_UID[<span class="number">4</span>]; <span class="comment">//UID卡片序列号,4字节</span></span><br><span class="line">uint8_t IC_Type[<span class="number">2</span>];<span class="comment">//卡类型代码，2字节,0x0400，Mifare_One(S50)</span></span><br><span class="line">uint8_t card_1[<span class="number">4</span>]=&#123;<span class="number">0xC3</span>,<span class="number">0xB2</span>,<span class="number">0x37</span>,<span class="number">0xC5</span>&#125;;<span class="comment">//蓝卡1卡号</span></span><br><span class="line">uint8_t card_2[<span class="number">4</span>]=&#123;<span class="number">0xA3</span>,<span class="number">0x09</span>,<span class="number">0x3C</span>,<span class="number">0xFB</span>&#125;;<span class="comment">//白卡2卡号</span></span><br><span class="line">uint8_t ID_num=<span class="number">0</span>;<span class="comment">//当前操作的序号</span></span><br><span class="line">uint8_t Card_KEY[<span class="number">6</span>]=&#123;<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>&#125;;<span class="comment">//验证密码</span></span><br><span class="line">uint8_t Card_Data[<span class="number">16</span>];<span class="comment">//读取出的块数据</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：RC522_Start</span></span><br><span class="line"><span class="comment"> * 输入  block：要操作的块地址</span></span><br><span class="line"><span class="comment"> * 输入  option：读操作或写操作</span></span><br><span class="line"><span class="comment"> *              readID  1//读</span></span><br><span class="line"><span class="comment"> *writeID 2//写</span></span><br><span class="line"><span class="comment"> * 输入  block：要操作的块地址</span></span><br><span class="line"><span class="comment"> * 描述  ：RC522操作主函数，可完成对卡的读写操作</span></span><br><span class="line"><span class="comment"> *  * 返回  : 状态值</span></span><br><span class="line"><span class="comment"> *         = 1，成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RC522_Start</span>(<span class="params">uint8_t block,uint8_t option,uint8_t *Write_Card_Data</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(PcdRequest(PICC_REQALL,IC_Type) == MI_OK)<span class="comment">//寻卡</span></span><br><span class="line">&#123;</span><br><span class="line">uint16_t cardType = (IC_Type[<span class="number">0</span>] &lt;&lt; <span class="number">8</span>) | IC_Type[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">switch</span> (cardType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0x4400</span>:</span><br><span class="line">                printf(<span class="string">&quot;\r\nMifare UltraLight\r\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0x0400</span>:</span><br><span class="line">                printf(<span class="string">&quot;\r\nMifare One(S50)\r\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0x0200</span>:</span><br><span class="line">                printf(<span class="string">&quot;\r\nMifare One(S70)\r\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0x0800</span>:</span><br><span class="line">                printf(<span class="string">&quot;\r\nMifare Pro(X)\r\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0x4403</span>:</span><br><span class="line">                printf(<span class="string">&quot;\r\nMifare DESFire\r\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                printf(<span class="string">&quot;\r\nUnknown Card\r\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span>(PcdAnticoll(IC_UID)==MI_OK)<span class="comment">//防冲撞</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((IC_UID[<span class="number">0</span>]==card_1[<span class="number">0</span>])&amp;&amp;(IC_UID[<span class="number">1</span>]==card_1[<span class="number">1</span>])&amp;&amp;(IC_UID[<span class="number">2</span>]==card_1[<span class="number">2</span>])&amp;&amp;(IC_UID[<span class="number">3</span>]==card_1[<span class="number">3</span>]))</span><br><span class="line">            &#123;</span><br><span class="line">                ID_num=<span class="number">1</span>;</span><br><span class="line">                printf(<span class="string">&quot;The User is: %d, Blue card&quot;</span>,ID_num);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((IC_UID[<span class="number">0</span>]==card_2[<span class="number">0</span>])&amp;&amp;(IC_UID[<span class="number">1</span>]==card_2[<span class="number">1</span>])&amp;&amp;(IC_UID[<span class="number">2</span>]==card_2[<span class="number">2</span>])&amp;&amp;(IC_UID[<span class="number">3</span>]==card_2[<span class="number">3</span>]))</span><br><span class="line">            &#123;</span><br><span class="line">                ID_num=<span class="number">2</span>;</span><br><span class="line">                printf(<span class="string">&quot;The User is: %d, White card&quot;</span>,ID_num);</span><br><span class="line">            &#125;</span><br><span class="line">            printf(<span class="string">&quot;\r\ncard_ID: %02X:%02X:%02X:%02X\r\n&quot;</span>,IC_UID[<span class="number">0</span>],IC_UID[<span class="number">1</span>],IC_UID[<span class="number">2</span>],IC_UID[<span class="number">3</span>]); <span class="comment">//打印卡的UID号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(PcdSelect(IC_UID)==MI_OK)<span class="comment">//选卡</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(PcdAuthState(PICC_AUTHENT1A,block,Card_KEY,IC_UID)==MI_OK)<span class="comment">//验证A密钥,对应块</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//memset(Card_Data,1,16);</span></span><br><span class="line"><span class="keyword">if</span>(option==readID)<span class="comment">//读操作</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(PcdRead(block,Card_Data)==MI_OK)</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">&quot;\n读取结果: \n&quot;</span>);</span><br><span class="line">printf(<span class="string">&quot;block %d date:\r\n&quot;</span>,block);</span><br><span class="line">categories:</span><br><span class="line">    - stm32</span><br><span class="line">    - stm32hal库开发</span><br><span class="line">tags:</span><br><span class="line">    - stm32</span><br><span class="line">    - 外设</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;iSR&amp;SPI_FLAG_TXE)==<span class="number">0</span>)<span class="comment">//等待发送区空</span></span><br><span class="line">&#123;</span><br><span class="line">retry++;</span><br><span class="line"><span class="keyword">if</span>(retry&gt;<span class="number">20000</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">SPIx-&gt;DR=*p_TxData++;<span class="comment">//发送一个byte</span></span><br><span class="line">retry=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((SPIx-&gt;SR&amp;SPI_FLAG_RXNE)==<span class="number">0</span>)<span class="comment">//等待接收完一个byte</span></span><br><span class="line">&#123;</span><br><span class="line">SPIx-&gt;SR = SPIx-&gt;SR;</span><br><span class="line">retry++;</span><br><span class="line"><span class="keyword">if</span>(retry&gt;<span class="number">20000</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">SPIx-&gt;DR;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：SPI_ReadNBytes</span></span><br><span class="line"><span class="comment"> * 描述  ：读取RC522 n Byte 数据</span></span><br><span class="line"><span class="comment"> * 输入  ：SPIx : 要读取数据的SPI</span></span><br><span class="line"><span class="comment"> * 输入  ：p_RxData : 要读取的数据</span></span><br><span class="line"><span class="comment"> * 输入  ：readDataNum : 要读取的数据量(Byte)</span></span><br><span class="line"><span class="comment"> * 返回  : 0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">SPI_ReadNBytes</span>(<span class="params">SPI_TypeDef* SPIx, uint8_t *p_RxData,uint32_t readDataNum</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> retry=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(readDataNum--)&#123;</span><br><span class="line">SPIx-&gt;DR = <span class="number">0xFF</span>;</span><br><span class="line"><span class="keyword">while</span>(!(SPIx-&gt;SR&amp;SPI_FLAG_TXE))&#123;</span><br><span class="line">retry++;</span><br><span class="line"><span class="keyword">if</span>(retry&gt;<span class="number">20000</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">retry = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!(SPIx-&gt;SR&amp;SPI_FLAG_RXNE))&#123;</span><br><span class="line">retry++;</span><br><span class="line"><span class="keyword">if</span>(retry&gt;<span class="number">20000</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">*p_RxData++ = SPIx-&gt;DR;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：PcdComMF522</span></span><br><span class="line"><span class="comment"> * 描述  ：通过RC522和ISO14443卡通讯</span></span><br><span class="line"><span class="comment"> * 输入  ：ucCommand，RC522命令字</span></span><br><span class="line"><span class="comment"> *         pInData，通过RC522发送到卡片的数据</span></span><br><span class="line"><span class="comment"> *         ucInLenByte，发送数据的字节长度</span></span><br><span class="line"><span class="comment"> *         pOutData，接收到的卡片返回数据</span></span><br><span class="line"><span class="comment"> *         pOutLenBit，返回数据的位长度</span></span><br><span class="line"><span class="comment"> * 返回  : 状态值</span></span><br><span class="line"><span class="comment"> *         = MI_OK，成功</span></span><br><span class="line"><span class="comment"> * 调用  ：内部调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdComMF522</span>(<span class="params">uint8_t Command,uint8_t *pInData,uint8_t InLenByte,uint8_t *pOutData,uint32_t *pOutLenBit</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">char</span> status = MI_ERR;</span><br><span class="line">    uint8_t irqEn = <span class="number">0x00</span>;</span><br><span class="line">    uint8_t waitFor = <span class="number">0x00</span>;</span><br><span class="line">    uint8_t lastBits;</span><br><span class="line">    uint8_t n;</span><br><span class="line">    uint32_t i;</span><br><span class="line">    <span class="keyword">switch</span> (Command)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> PCD_AUTHENT:   <span class="comment">//Mifare认证</span></span><br><span class="line">        irqEn = <span class="number">0x12</span>;   <span class="comment">//允许错误中断请求ErrIEn  允许空闲中断IdleIEn</span></span><br><span class="line">        waitFor = <span class="number">0x10</span>; <span class="comment">//认证寻卡等待时候 查询空闲中断标志位</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PCD_TRANSCEIVE:<span class="comment">//接收发送 发送接收</span></span><br><span class="line">        irqEn = <span class="number">0x77</span>;   <span class="comment">//允许TxIEn RxIEn IdleIEn LoAlertIEn ErrIEn TimerIEn</span></span><br><span class="line">        waitFor = <span class="number">0x30</span>; <span class="comment">//寻卡等待时候 查询接收中断标志位与 空闲中断标志位</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="literal">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    WriteRawRC(ComIEnReg, irqEn | <span class="number">0x80</span>); <span class="comment">//IRqInv置位管脚IRQ与Status1Reg的IRq位的值相反</span></span><br><span class="line">    ClearBitMask(ComIrqReg, <span class="number">0x80</span>);       <span class="comment">//Set1该位清零时，CommIRqReg的屏蔽位清零</span></span><br><span class="line">    WriteRawRC(CommandReg, PCD_IDLE);    <span class="comment">//写空闲命令</span></span><br><span class="line">    SetBitMask(FIFOLevelReg, <span class="number">0x80</span>);      <span class="comment">//置位FlushBuffer清除内部FIFO的读和写指针以及ErrReg的BufferOvfl标志位被清除</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; InLenByte; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        WriteRawRC(FIFODataReg, pInData[i]);<span class="comment">//写数据进FIFOdata</span></span><br><span class="line">    &#125;</span><br><span class="line">    WriteRawRC(CommandReg, Command);<span class="comment">//写命令</span></span><br><span class="line">    <span class="keyword">if</span> (Command == PCD_TRANSCEIVE)</span><br><span class="line">    &#123;</span><br><span class="line">        SetBitMask(BitFramingReg, <span class="number">0x80</span>);<span class="comment">//StartSend置位启动数据发送 该位与收发命令使用时才有效</span></span><br><span class="line">    &#125;</span><br><span class="line">    i = <span class="number">800</span>;<span class="comment">//根据时钟频率调整，操作M1卡最大等待时间25ms</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = ReadRawRC(ComIrqReg);<span class="comment">//查询事件中断</span></span><br><span class="line">        i--;</span><br><span class="line">    &#125; <span class="keyword">while</span> ((i != <span class="number">0</span>) &amp;&amp; !(n &amp; <span class="number">0x01</span>) &amp;&amp; !(n &amp; waitFor));<span class="comment">//退出条件i=0,定时器中断，与写空闲命令</span></span><br><span class="line">    ClearBitMask(BitFramingReg, <span class="number">0x80</span>);<span class="comment">//清理允许StartSend位</span></span><br><span class="line">    <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(ReadRawRC(ErrorReg) &amp; <span class="number">0x1B</span>))<span class="comment">//读错误标志寄存器BufferOfI CollErr ParityErr ProtocolErr</span></span><br><span class="line">        &#123;</span><br><span class="line">            status = MI_OK;</span><br><span class="line">            <span class="keyword">if</span> (n &amp; irqEn &amp; <span class="number">0x01</span>)<span class="comment">//是否发生定时器中断</span></span><br><span class="line">            &#123;</span><br><span class="line">                status = MI_NOTAGERR;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Command == PCD_TRANSCEIVE)</span><br><span class="line">            &#123;</span><br><span class="line">                n = ReadRawRC(FIFOLevelReg);<span class="comment">//读FIFO中保存的字节数</span></span><br><span class="line">                lastBits = ReadRawRC(ControlReg) &amp; <span class="number">0x07</span>;<span class="comment">//最后接收到得字节的有效位数</span></span><br><span class="line">                <span class="keyword">if</span> (lastBits)</span><br><span class="line">                &#123;</span><br><span class="line">                    *pOutLenBit = (n - <span class="number">1</span>) * <span class="number">8</span> + lastBits;<span class="comment">//N个字节数减去1（最后一个字节）+最后一位的位数 读取到的数据总位数</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    *pOutLenBit = n * <span class="number">8</span>;<span class="comment">//最后接收到的字节整个字节有效</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    n = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (n &gt; MAXRLEN)</span><br><span class="line">                &#123;</span><br><span class="line">                    n = MAXRLEN;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    pOutData[i] = ReadRawRC(FIFODataReg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            status = MI_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    SetBitMask(ControlReg, <span class="number">0x80</span>); <span class="comment">// stop timer now</span></span><br><span class="line">    WriteRawRC(CommandReg, PCD_IDLE);</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：PcdRequest</span></span><br><span class="line"><span class="comment"> * 描述  ：寻卡</span></span><br><span class="line"><span class="comment"> * 输入  ：ucReq_code，寻卡方式</span></span><br><span class="line"><span class="comment"> *                     = 0x52，寻感应区内所有符合14443A标准的卡</span></span><br><span class="line"><span class="comment"> *                     = 0x26，寻未进入休眠状态的卡</span></span><br><span class="line"><span class="comment"> *         pTagType，卡片类型代码</span></span><br><span class="line"><span class="comment"> *                   = 0x4400，Mifare_UltraLight</span></span><br><span class="line"><span class="comment"> *                   = 0x0400，Mifare_One(S50)</span></span><br><span class="line"><span class="comment"> *                   = 0x0200，Mifare_One(S70)</span></span><br><span class="line"><span class="comment"> *                   = 0x0800，Mifare_Pro(X))</span></span><br><span class="line"><span class="comment"> *                   = 0x4403，Mifare_DESFire</span></span><br><span class="line"><span class="comment"> * 返回  : 状态值</span></span><br><span class="line"><span class="comment"> *         = MI_OK，成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdRequest</span>(<span class="params">uint8_t req_code, uint8_t *pTagType</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">char</span> status;</span><br><span class="line">    uint32_t unLen;</span><br><span class="line">    uint8_t ucComMF522Buf[MAXRLEN];</span><br><span class="line"></span><br><span class="line">    ClearBitMask(Status2Reg, <span class="number">0x08</span>);  <span class="comment">//清除RC522寄存位,清理指示MIFARECyptol单元接通以及所有卡的数据通信被加密的情况</span></span><br><span class="line">    WriteRawRC(BitFramingReg, <span class="number">0x07</span>); <span class="comment">//写RC522寄存器，发送的最后一个字节的七位</span></span><br><span class="line">    SetBitMask(TxControlReg, <span class="number">0x03</span>);  写RC522寄存位，TX1,TX2管脚的输出信号传递经发送调制的<span class="number">13.56</span>的能量载波信号</span><br><span class="line"></span><br><span class="line">    ucComMF522Buf[<span class="number">0</span>] = req_code;<span class="comment">//存入寻卡方式</span></span><br><span class="line"></span><br><span class="line">    status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, <span class="number">1</span>, ucComMF522Buf, &amp;unLen);</span><br><span class="line">    <span class="keyword">if</span> ((status == MI_OK) &amp;&amp; (unLen == <span class="number">0x10</span>))<span class="comment">//寻卡成功返回卡类型</span></span><br><span class="line">    &#123;</span><br><span class="line">        *pTagType = ucComMF522Buf[<span class="number">0</span>];</span><br><span class="line">        *(pTagType + <span class="number">1</span>) = ucComMF522Buf[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        status = MI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：PcdAnticoll</span></span><br><span class="line"><span class="comment"> * 描述  ：防冲撞</span></span><br><span class="line"><span class="comment"> * 输入  ：pSnr，卡片序列号，4字节</span></span><br><span class="line"><span class="comment"> * 返回  : 状态值</span></span><br><span class="line"><span class="comment"> *         = MI_OK，成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdAnticoll</span>(<span class="params">uint8_t *pSnr</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">char</span> status;</span><br><span class="line">    uint8_t i, snr_check = <span class="number">0</span>;</span><br><span class="line">    uint32_t unLen;</span><br><span class="line">    uint8_t ucComMF522Buf[MAXRLEN];</span><br><span class="line">    ClearBitMask(Status2Reg, <span class="number">0x08</span>);<span class="comment">//清MFCryptol On位,只有成功执行MFAuthent命令后，该位才能置位</span></span><br><span class="line">    WriteRawRC(BitFramingReg, <span class="number">0x00</span>);<span class="comment">//清理寄存器,停止收发</span></span><br><span class="line">    ClearBitMask(CollReg, <span class="number">0x80</span>);<span class="comment">//清ValuesAfterColl所有接收的位在冲突后被清除</span></span><br><span class="line">    ucComMF522Buf[<span class="number">0</span>] = PICC_ANTICOLL1;<span class="comment">//卡片防冲突命令</span></span><br><span class="line">    ucComMF522Buf[<span class="number">1</span>] = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">    status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, <span class="number">2</span>, ucComMF522Buf, &amp;unLen);</span><br><span class="line">    <span class="keyword">if</span> (status == MI_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            *(pSnr + i) = ucComMF522Buf[i];</span><br><span class="line">            snr_check ^= ucComMF522Buf[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (snr_check != ucComMF522Buf[i])</span><br><span class="line">        &#123;</span><br><span class="line">            status = MI_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    SetBitMask(CollReg, <span class="number">0x80</span>);</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：PcdSelect</span></span><br><span class="line"><span class="comment"> * 描述  ：选定卡片</span></span><br><span class="line"><span class="comment"> * 输入  ：pSnr，卡片序列号，4字节</span></span><br><span class="line"><span class="comment"> * 返回  : 状态值</span></span><br><span class="line"><span class="comment"> *         = MI_OK，成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdSelect</span>(<span class="params">uint8_t *pSnr</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">char</span> status;</span><br><span class="line">    uint8_t i;</span><br><span class="line">    uint32_t unLen;</span><br><span class="line">    uint8_t ucComMF522Buf[MAXRLEN];</span><br><span class="line">    ucComMF522Buf[<span class="number">0</span>] = PICC_ANTICOLL1;<span class="comment">//防冲撞</span></span><br><span class="line">    ucComMF522Buf[<span class="number">1</span>] = <span class="number">0x70</span>;</span><br><span class="line">    ucComMF522Buf[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ucComMF522Buf[i + <span class="number">2</span>] = *(pSnr + i);</span><br><span class="line">        ucComMF522Buf[<span class="number">6</span>] ^= *(pSnr + i);</span><br><span class="line">    &#125;</span><br><span class="line">    CalulateCRC(ucComMF522Buf, <span class="number">7</span>, &amp;ucComMF522Buf[<span class="number">7</span>]);</span><br><span class="line">    ClearBitMask(Status2Reg, <span class="number">0x08</span>);</span><br><span class="line">    status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, <span class="number">9</span>, ucComMF522Buf, &amp;unLen);</span><br><span class="line">    <span class="keyword">if</span> ((status == MI_OK) &amp;&amp; (unLen == <span class="number">0x18</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        status = MI_OK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        status = MI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：PcdAuthState</span></span><br><span class="line"><span class="comment"> * 描述  ：验证卡片密码</span></span><br><span class="line"><span class="comment"> * 输入  ：ucAuth_mode，密码验证模式</span></span><br><span class="line"><span class="comment"> *                     = 0x60，验证A密钥</span></span><br><span class="line"><span class="comment"> *                     = 0x61，验证B密钥</span></span><br><span class="line"><span class="comment"> *         uint8_t ucAddr，块地址</span></span><br><span class="line"><span class="comment"> *         pKey，密码</span></span><br><span class="line"><span class="comment"> *         pSnr，卡片序列号，4字节</span></span><br><span class="line"><span class="comment"> * 返回  : 状态值</span></span><br><span class="line"><span class="comment"> *         = MI_OK，成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdAuthState</span>(<span class="params">uint8_t auth_mode, uint8_t addr, uint8_t *pKey, uint8_t *pSnr</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">char</span> status;</span><br><span class="line">    uint32_t unLen;</span><br><span class="line">    uint8_t i, ucComMF522Buf[MAXRLEN];</span><br><span class="line">    ucComMF522Buf[<span class="number">0</span>] = auth_mode;</span><br><span class="line">    ucComMF522Buf[<span class="number">1</span>] = addr;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ucComMF522Buf[i + <span class="number">2</span>] = *(pKey + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ucComMF522Buf[i + <span class="number">8</span>] = *(pSnr + i);</span><br><span class="line">    &#125;</span><br><span class="line">    status = PcdComMF522(PCD_AUTHENT, ucComMF522Buf, <span class="number">12</span>, ucComMF522Buf, &amp;unLen);</span><br><span class="line">    <span class="keyword">if</span> ((status != MI_OK) || (!(ReadRawRC(Status2Reg) &amp; <span class="number">0x08</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        status = MI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：PcdRead</span></span><br><span class="line"><span class="comment"> * 描述  ：读取M1卡一块数据</span></span><br><span class="line"><span class="comment"> * 输入  ：uint8_t ucAddr，块地址</span></span><br><span class="line"><span class="comment"> *         pData，读出的数据，16字节</span></span><br><span class="line"><span class="comment"> * 返回  : 状态值</span></span><br><span class="line"><span class="comment"> *         = MI_OK，成功</span></span><br><span class="line"><span class="comment"> * 调用  ：外部调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdRead</span>(<span class="params">uint8_t addr, uint8_t *pData</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">char</span> status;</span><br><span class="line">    uint32_t unLen;</span><br><span class="line">    uint8_t i, ucComMF522Buf[MAXRLEN];</span><br><span class="line">    ucComMF522Buf[<span class="number">0</span>] = PICC_READ;</span><br><span class="line">    ucComMF522Buf[<span class="number">1</span>] = addr;</span><br><span class="line">    CalulateCRC(ucComMF522Buf, <span class="number">2</span>, &amp;ucComMF522Buf[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, <span class="number">4</span>, ucComMF522Buf, &amp;unLen);</span><br><span class="line">    <span class="keyword">if</span> ((status == MI_OK) &amp;&amp; (unLen == <span class="number">0x90</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            *(pData + i) = ucComMF522Buf[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        status = MI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：PcdWrite</span></span><br><span class="line"><span class="comment"> * 描述  ：写数据到M1卡一块</span></span><br><span class="line"><span class="comment"> * 输入  ：uint8_t ucAddr，块地址</span></span><br><span class="line"><span class="comment"> *         pData，写入的数据，16字节</span></span><br><span class="line"><span class="comment"> * 返回  : 状态值</span></span><br><span class="line"><span class="comment"> *         = MI_OK，成功</span></span><br><span class="line"><span class="comment"> * 调用  ：外部调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdWrite</span>(<span class="params">uint8_t addr, uint8_t *pData</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">char</span> status;</span><br><span class="line">    uint32_t unLen;</span><br><span class="line">    uint8_t i, ucComMF522Buf[MAXRLEN];</span><br><span class="line">    ucComMF522Buf[<span class="number">0</span>] = PICC_WRITE;</span><br><span class="line">    ucComMF522Buf[<span class="number">1</span>] = addr;</span><br><span class="line">    CalulateCRC(ucComMF522Buf, <span class="number">2</span>, &amp;ucComMF522Buf[<span class="number">2</span>]);</span><br><span class="line">    status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, <span class="number">4</span>, ucComMF522Buf, &amp;unLen);</span><br><span class="line">    <span class="keyword">if</span> ((status != MI_OK) || (unLen != <span class="number">4</span>) || ((ucComMF522Buf[<span class="number">0</span>] &amp; <span class="number">0x0F</span>) != <span class="number">0x0A</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        status = MI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (status == MI_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ucComMF522Buf[i] = *(pData + i);</span><br><span class="line">        &#125;</span><br><span class="line">        CalulateCRC(ucComMF522Buf, <span class="number">16</span>, &amp;ucComMF522Buf[<span class="number">16</span>]);</span><br><span class="line"></span><br><span class="line">        status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, <span class="number">18</span>, ucComMF522Buf, &amp;unLen);</span><br><span class="line">        <span class="keyword">if</span> ((status != MI_OK) || (unLen != <span class="number">4</span>) || ((ucComMF522Buf[<span class="number">0</span>] &amp; <span class="number">0x0F</span>) != <span class="number">0x0A</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            status = MI_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：PcdValue</span></span><br><span class="line"><span class="comment"> * 描述  ：扣款和充值</span></span><br><span class="line"><span class="comment"> * 输入  ：dd_mode[IN]：命令字</span></span><br><span class="line"><span class="comment"> *              0xC0 = 扣款</span></span><br><span class="line"><span class="comment"> *              0xC1 = 充值</span></span><br><span class="line"><span class="comment"> *         addr[IN]：钱包地址</span></span><br><span class="line"><span class="comment"> *         pValue[IN]：4字节增(减)值，低位在前</span></span><br><span class="line"><span class="comment"> * 返回  : 状态值</span></span><br><span class="line"><span class="comment"> *         = MI_OK，成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdValue</span>(<span class="params">uint8_t dd_mode, uint8_t addr, uint8_t *pValue</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">char</span> status;</span><br><span class="line">    uint32_t unLen;</span><br><span class="line">    uint8_t i, ucComMF522Buf[MAXRLEN];</span><br><span class="line">    ucComMF522Buf[<span class="number">0</span>] = dd_mode;</span><br><span class="line">    ucComMF522Buf[<span class="number">1</span>] = addr;</span><br><span class="line">    CalulateCRC(ucComMF522Buf, <span class="number">2</span>, &amp;ucComMF522Buf[<span class="number">2</span>]);</span><br><span class="line">    status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, <span class="number">4</span>, ucComMF522Buf, &amp;unLen);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((status != MI_OK) || (unLen != <span class="number">4</span>) || ((ucComMF522Buf[<span class="number">0</span>] &amp; <span class="number">0x0F</span>) != <span class="number">0x0A</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        status = MI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (status == MI_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ucComMF522Buf[i] = *(pValue + i);</span><br><span class="line">        &#125;</span><br><span class="line">        CalulateCRC(ucComMF522Buf, <span class="number">4</span>, &amp;ucComMF522Buf[<span class="number">4</span>]);</span><br><span class="line">        unLen = <span class="number">0</span>;</span><br><span class="line">        status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, <span class="number">6</span>, ucComMF522Buf, &amp;unLen);</span><br><span class="line">        <span class="keyword">if</span> (status != MI_ERR)</span><br><span class="line">        &#123;</span><br><span class="line">            status = MI_OK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (status == MI_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        ucComMF522Buf[<span class="number">0</span>] = PICC_TRANSFER;</span><br><span class="line">        ucComMF522Buf[<span class="number">1</span>] = addr;</span><br><span class="line">        CalulateCRC(ucComMF522Buf, <span class="number">2</span>, &amp;ucComMF522Buf[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, <span class="number">4</span>, ucComMF522Buf, &amp;unLen);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((status != MI_OK) || (unLen != <span class="number">4</span>) || ((ucComMF522Buf[<span class="number">0</span>] &amp; <span class="number">0x0F</span>) != <span class="number">0x0A</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            status = MI_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：PcdBakValue</span></span><br><span class="line"><span class="comment"> * 描述  ：备份钱包</span></span><br><span class="line"><span class="comment"> * 输入  ：sourceaddr[IN]：源地址</span></span><br><span class="line"><span class="comment"> *         goaladdr[IN]：目标地址</span></span><br><span class="line"><span class="comment"> * 返回  : 状态值</span></span><br><span class="line"><span class="comment"> *         = MI_OK，成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdBakValue</span>(<span class="params">uint8_t sourceaddr, uint8_t goaladdr</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">char</span> status;</span><br><span class="line">    uint32_t unLen;</span><br><span class="line">    uint8_t ucComMF522Buf[MAXRLEN];</span><br><span class="line">    ucComMF522Buf[<span class="number">0</span>] = PICC_RESTORE;</span><br><span class="line">    ucComMF522Buf[<span class="number">1</span>] = sourceaddr;</span><br><span class="line">    CalulateCRC(ucComMF522Buf, <span class="number">2</span>, &amp;ucComMF522Buf[<span class="number">2</span>]);</span><br><span class="line">    status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, <span class="number">4</span>, ucComMF522Buf, &amp;unLen);</span><br><span class="line">    <span class="keyword">if</span> ((status != MI_OK) || (unLen != <span class="number">4</span>) || ((ucComMF522Buf[<span class="number">0</span>] &amp; <span class="number">0x0F</span>) != <span class="number">0x0A</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        status = MI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (status == MI_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        ucComMF522Buf[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        ucComMF522Buf[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        ucComMF522Buf[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        ucComMF522Buf[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">        CalulateCRC(ucComMF522Buf, <span class="number">4</span>, &amp;ucComMF522Buf[<span class="number">4</span>]);</span><br><span class="line">        status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, <span class="number">6</span>, ucComMF522Buf, &amp;unLen);</span><br><span class="line">        <span class="keyword">if</span> (status != MI_ERR)</span><br><span class="line">        &#123;</span><br><span class="line">            status = MI_OK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (status != MI_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> MI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    ucComMF522Buf[<span class="number">0</span>] = PICC_TRANSFER;</span><br><span class="line">    ucComMF522Buf[<span class="number">1</span>] = goaladdr;</span><br><span class="line">    CalulateCRC(ucComMF522Buf, <span class="number">2</span>, &amp;ucComMF522Buf[<span class="number">2</span>]);</span><br><span class="line">    status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, <span class="number">4</span>, ucComMF522Buf, &amp;unLen);</span><br><span class="line">    <span class="keyword">if</span> ((status != MI_OK) || (unLen != <span class="number">4</span>) || ((ucComMF522Buf[<span class="number">0</span>] &amp; <span class="number">0x0F</span>) != <span class="number">0x0A</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        status = MI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：PcdHalt</span></span><br><span class="line"><span class="comment"> * 描述  ：命令卡片进入休眠状态</span></span><br><span class="line"><span class="comment"> * 返回  : 状态值</span></span><br><span class="line"><span class="comment"> *         = MI_OK，成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdHalt</span>(<span class="params"><span class="keyword">void</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    uint32_t unLen;</span><br><span class="line">    uint8_t ucComMF522Buf[MAXRLEN];</span><br><span class="line"></span><br><span class="line">    ucComMF522Buf[<span class="number">0</span>] = PICC_HALT;</span><br><span class="line">    ucComMF522Buf[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    CalulateCRC(ucComMF522Buf, <span class="number">2</span>, &amp;ucComMF522Buf[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, <span class="number">4</span>, ucComMF522Buf, &amp;unLen);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MI_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：CalulateCRC</span></span><br><span class="line"><span class="comment"> * 描述  ：用RC522计算CRC16</span></span><br><span class="line"><span class="comment"> * 输入  ：pIndata，计算CRC16的数组</span></span><br><span class="line"><span class="comment"> *         ucLen，计算CRC16的数组字节长度</span></span><br><span class="line"><span class="comment"> *         pOutData，存放计算结果存放的首地址</span></span><br><span class="line"><span class="comment"> * 返回  : 无</span></span><br><span class="line"><span class="comment"> * 调用  ：内部调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CalulateCRC</span>(<span class="params">uint8_t *pIndata, uint8_t len, uint8_t *pOutData</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    uint8_t i, n;</span><br><span class="line">    ClearBitMask(DivIrqReg, <span class="number">0x04</span>);</span><br><span class="line">    WriteRawRC(CommandReg, PCD_IDLE);</span><br><span class="line">    SetBitMask(FIFOLevelReg, <span class="number">0x80</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        WriteRawRC(FIFODataReg, *(pIndata + i));</span><br><span class="line">    &#125;</span><br><span class="line">    WriteRawRC(CommandReg, PCD_CALCCRC);</span><br><span class="line">    i = <span class="number">0xFF</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = ReadRawRC(DivIrqReg);</span><br><span class="line">        i--;</span><br><span class="line">    &#125; <span class="keyword">while</span> ((i != <span class="number">0</span>) &amp;&amp; !(n &amp; <span class="number">0x04</span>));</span><br><span class="line">    pOutData[<span class="number">0</span>] = ReadRawRC(CRCResultRegL);</span><br><span class="line">    pOutData[<span class="number">1</span>] = ReadRawRC(CRCResultRegM);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：PcdRese</span></span><br><span class="line"><span class="comment"> * 描述  ：复位RC522</span></span><br><span class="line"><span class="comment"> * 返回  : 状态值</span></span><br><span class="line"><span class="comment"> *         = MI_OK，成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdReset</span>(<span class="params"><span class="keyword">void</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">RC522_Reset_Disable();</span><br><span class="line">    delay_ms(<span class="number">10</span>);</span><br><span class="line">    RC522_Reset_Enable();</span><br><span class="line">    delay_ms(<span class="number">60</span>);</span><br><span class="line">    RC522_Reset_Disable();</span><br><span class="line">    delay_ms(<span class="number">500</span>);</span><br><span class="line">    WriteRawRC(CommandReg, PCD_RESETPHASE);<span class="comment">//复位指令</span></span><br><span class="line">    delay_ms(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    WriteRawRC(ModeReg, <span class="number">0x3D</span>);<span class="comment">//定义发送和接收常用模式,和Mifare卡通讯，CRC初始值0x6363</span></span><br><span class="line">    WriteRawRC(TReloadRegL, <span class="number">30</span>);<span class="comment">//16位定时器低位</span></span><br><span class="line">    WriteRawRC(TReloadRegH, <span class="number">0</span>);<span class="comment">//16位定时器高位</span></span><br><span class="line">    WriteRawRC(TModeReg, <span class="number">0x8D</span>);<span class="comment">//定义内部定时器的设置</span></span><br><span class="line">    WriteRawRC(TPrescalerReg, <span class="number">0x3E</span>);<span class="comment">//设置定时器分频系数</span></span><br><span class="line">    WriteRawRC(TxAutoReg, <span class="number">0x40</span>);<span class="comment">//调制发送信号为100%ASK</span></span><br><span class="line"></span><br><span class="line">    ClearBitMask(TestPinEnReg, <span class="number">0x80</span>);</span><br><span class="line">    WriteRawRC(TxAutoReg, <span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MI_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：ReadRawRC</span></span><br><span class="line"><span class="comment"> * 描述  ：读RC522寄存器</span></span><br><span class="line"><span class="comment"> * 输入  ：ucAddress，寄存器地址</span></span><br><span class="line"><span class="comment"> * 返回  : 寄存器的当前值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">uint8_t <span class="title">ReadRawRC</span>(<span class="params">uint8_t Address</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    uint8_t ucAddr;</span><br><span class="line">    uint8_t ucResult = <span class="number">0</span>;</span><br><span class="line">    ucAddr = ((Address &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0x7E</span>) | <span class="number">0x80</span>;<span class="comment">//最高位置1，读操作;最低为默认0</span></span><br><span class="line">    delay_ms(<span class="number">1</span>);</span><br><span class="line">    RC522_CS_Enable();</span><br><span class="line">    SPI_WriteNBytes(SPI1_SPI, &amp;ucAddr, <span class="number">1</span>);  <span class="comment">//向总线写多个数据</span></span><br><span class="line">    SPI_ReadNBytes(SPI1_SPI, &amp;ucResult, <span class="number">1</span>); <span class="comment">//向总线读多个数据</span></span><br><span class="line">    RC522_CS_Disable();</span><br><span class="line">    <span class="keyword">return</span> ucResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：WriteRawRC</span></span><br><span class="line"><span class="comment"> * 描述  ：写RC522寄存器</span></span><br><span class="line"><span class="comment"> * 输入  ：ucAddress，寄存器地址</span></span><br><span class="line"><span class="comment"> *         ucValue，写入寄存器的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WriteRawRC</span>(<span class="params">uint8_t Address, uint8_t <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    uint8_t ucAddr;</span><br><span class="line">    uint8_t write_buffer[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    ucAddr = ((Address &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0x7E</span>);<span class="comment">//最高位置0，写操作;最低为默认0</span></span><br><span class="line">    write_buffer[<span class="number">0</span>] = ucAddr;</span><br><span class="line">    write_buffer[<span class="number">1</span>] = <span class="keyword">value</span>;</span><br><span class="line">    delay_ms(<span class="number">1</span>);</span><br><span class="line">    RC522_CS_Enable();</span><br><span class="line">    SPI_WriteNBytes(SPI1_SPI, write_buffer, <span class="number">2</span>);</span><br><span class="line">    RC522_CS_Disable();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：SetBitMask</span></span><br><span class="line"><span class="comment"> * 描述  ：对RC522寄存器置位，可对多个位同时操作</span></span><br><span class="line"><span class="comment"> * 输入  ：ucReg，寄存器地址</span></span><br><span class="line"><span class="comment"> *         ucMask，置位值,例0x13，0001 0011</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetBitMask</span>(<span class="params">uint8_t reg, uint8_t mask</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    uint8_t temp = <span class="number">0x00</span>;</span><br><span class="line"></span><br><span class="line">    temp = ReadRawRC(reg);        <span class="comment">//读寄存器</span></span><br><span class="line">    WriteRawRC(reg, temp | mask); <span class="comment">//将目标位置1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：ClearBitMask</span></span><br><span class="line"><span class="comment"> * 描述  ：对RC522寄存器清位</span></span><br><span class="line"><span class="comment"> * 输入  ：ucReg，寄存器地址</span></span><br><span class="line"><span class="comment"> *         ucMask，清位值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearBitMask</span>(<span class="params">uint8_t reg, uint8_t mask</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    uint8_t temp = <span class="number">0x00</span>;</span><br><span class="line"></span><br><span class="line">    temp = ReadRawRC(reg);</span><br><span class="line">    WriteRawRC(reg, temp &amp; ~mask);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：PcdAntennaOn</span></span><br><span class="line"><span class="comment"> * 描述  ：开启天线</span></span><br><span class="line"><span class="comment"> * TxControlReg寄存器位0置1，引脚TX1上的输出信号将传输由传输数据调制的13.56 MHz能量载波。</span></span><br><span class="line"><span class="comment"> * TxControlReg寄存器位1置1，引脚TX2上的输出信号将发送由传输数据调制的13.56 MHz能量载波。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PcdAntennaOn</span>(<span class="params"><span class="keyword">void</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    uint8_t i;</span><br><span class="line">    i = ReadRawRC(TxControlReg);</span><br><span class="line">    <span class="keyword">if</span> (!(i &amp; <span class="number">0x03</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        SetBitMask(TxControlReg, <span class="number">0x03</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：PcdAntennaOff</span></span><br><span class="line"><span class="comment"> * 描述  ：关闭天线</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PcdAntennaOff</span>(<span class="params"><span class="keyword">void</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ClearBitMask(TxControlReg, <span class="number">0x03</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：RC522_PcdConfig_Type</span></span><br><span class="line"><span class="comment"> * 描述  ：设置RC522的工作方式</span></span><br><span class="line"><span class="comment"> * 工作方式ISO14443_A</span></span><br><span class="line"><span class="comment"> * 复位中已经设置过，该函数暂时未调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RC522_Config</span>(<span class="params">uint8_t Card_Type</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ClearBitMask(Status2Reg, <span class="number">0x08</span>);</span><br><span class="line">    WriteRawRC(ModeReg, <span class="number">0x3D</span>);</span><br><span class="line">    WriteRawRC(RxSelReg, <span class="number">0x86</span>);</span><br><span class="line">    WriteRawRC(RFCfgReg, <span class="number">0x7F</span>);</span><br><span class="line">    WriteRawRC(TReloadRegL, <span class="number">30</span>);</span><br><span class="line">    WriteRawRC(TReloadRegH, <span class="number">0</span>);</span><br><span class="line">    WriteRawRC(TModeReg, <span class="number">0x8D</span>);</span><br><span class="line">    WriteRawRC(TPrescalerReg, <span class="number">0x3E</span>);</span><br><span class="line">    delay_ms(<span class="number">5</span>);</span><br><span class="line">    PcdAntennaOn();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>RC522.h</p><p>头文件内容与API大致相同，定义了指令集和寄存器。</p><p>这里的sys.h是正点原子的F1系列头文件。</p><p>加入了引脚定义和自定义函数。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#ifndef __RC522_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __RC522_H</span></span><br><span class="line"><span class="meta">#include &quot;sys.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************引脚定义****************************/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">RC522SPI引脚,RST和CS可随意更改</span></span><br><span class="line"><span class="comment">RST-PC5</span></span><br><span class="line"><span class="comment">CS-PA4</span></span><br><span class="line"><span class="comment">SCK-PA5</span></span><br><span class="line"><span class="comment">MISO-PA6</span></span><br><span class="line"><span class="comment">MOSI-PA7</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Reset</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC522_RST_Pin      GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC522_RST_GPIO_Port     GPIOC</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC522_GPIO_Reset_CLK_ENABLE() \</span></span><br><span class="line">    <span class="keyword">do</span> &#123; __HAL_RCC_GPIOA_CLK_ENABLE(); &#125; <span class="keyword">while</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//CS片选，模块SDA引脚，SPI通信时用作NSS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC522_GPIO_CS_PIN      GPIO_PIN_4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC522_GPIO_CS_PORT     GPIOA</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC522_GPIO_CS_CLK_ENABLE() \</span></span><br><span class="line">    <span class="keyword">do</span> &#123; __HAL_RCC_GPIOA_CLK_ENABLE(); &#125; <span class="keyword">while</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/***********************RC522 函数宏定义**********************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC522_Reset_Disable() HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_SET);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC522_Reset_Enable() HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_RESET);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC522_CS_Enable() HAL_GPIO_WritePin(RC522_GPIO_CS_PORT, RC522_GPIO_CS_PIN, GPIO_PIN_RESET);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC522_CS_Disable() HAL_GPIO_WritePin(RC522_GPIO_CS_PORT, RC522_GPIO_CS_PIN, GPIO_PIN_SET);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> readID  1//读</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> writeID 2//写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************自定义函数****************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RC522_Init</span>(<span class="params"><span class="keyword">void</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RC522_Start</span>(<span class="params">uint8_t block,uint8_t option,uint8_t *Write_Card_Data</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RC522_SPI_GPIO_Init</span>(<span class="params"><span class="keyword">void</span></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************RC522指令集****************************/</span></span><br><span class="line"><span class="comment">//MF522命令字</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCD_IDLE              0x00               //取消当前命令</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCD_AUTHENT           0x0E               //验证密钥</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCD_RECEIVE           0x08               //接收数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCD_TRANSMIT          0x04               //发送数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCD_TRANSCEIVE        0x0C               //发送并接收数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCD_RESETPHASE        0x0F               //复位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCD_CALCCRC           0x03               //CRC计算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Mifare_One卡片命令字</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PICC_REQIDL           0x26               //寻天线区内未进入休眠状态</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PICC_REQALL           0x52               //寻天线区内全部卡</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PICC_ANTICOLL1        0x93               //防冲撞</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PICC_ANTICOLL2        0x95               //防冲撞</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PICC_AUTHENT1A        0x60               //验证A密钥</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PICC_AUTHENT1B        0x61               //验证B密钥</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PICC_READ             0x30               //读块</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PICC_WRITE            0xA0               //写块</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PICC_DECREMENT        0xC0               //扣款</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PICC_INCREMENT        0xC1               //充值</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PICC_RESTORE          0xC2               //调块数据到缓冲区</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PICC_TRANSFER         0xB0               //保存缓冲区中数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PICC_HALT             0x50               //休眠</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MF522 FIFO长度定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEF_FIFO_LENGTH       64                 //FIFO size=64byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MF522寄存器定义</span></span><br><span class="line"><span class="comment">// PAGE 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RFU00                 0x00</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     CommandReg            0x01</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     ComIEnReg             0x02</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     DivlEnReg             0x03</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     ComIrqReg             0x04</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     DivIrqReg             0x05</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     ErrorReg              0x06</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     Status1Reg            0x07</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     Status2Reg            0x08</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     FIFODataReg           0x09</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     FIFOLevelReg          0x0A</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     WaterLevelReg         0x0B</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     ControlReg            0x0C</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     BitFramingReg         0x0D</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     CollReg               0x0E</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RFU0F                 0x0F</span></span><br><span class="line"><span class="comment">// PAGE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RFU10                 0x10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     ModeReg               0x11</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TxModeReg             0x12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RxModeReg             0x13</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TxControlReg          0x14</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TxAutoReg             0x15</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TxSelReg              0x16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RxSelReg              0x17</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RxThresholdReg        0x18</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     DemodReg              0x19</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RFU1A                 0x1A</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RFU1B                 0x1B</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     MifareReg             0x1C</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RFU1D                 0x1D</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RFU1E                 0x1E</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     SerialSpeedReg        0x1F</span></span><br><span class="line"><span class="comment">// PAGE 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RFU20                 0x20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     CRCResultRegM         0x21</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     CRCResultRegL         0x22</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RFU23                 0x23</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     ModWidthReg           0x24</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RFU25                 0x25</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RFCfgReg              0x26</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     GsNReg                0x27</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     CWGsCfgReg            0x28</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     ModGsCfgReg           0x29</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TModeReg              0x2A</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TPrescalerReg         0x2B</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TReloadRegH           0x2C</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TReloadRegL           0x2D</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TCounterValueRegH     0x2E</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TCounterValueRegL     0x2F</span></span><br><span class="line"><span class="comment">// PAGE 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RFU30                 0x30</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TestSel1Reg           0x31</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TestSel2Reg           0x32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TestPinEnReg          0x33</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TestPinValueReg       0x34</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TestBusReg            0x35</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     AutoTestReg           0x36</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     VersionReg            0x37</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     AnalogTestReg         0x38</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TestDAC1Reg           0x39</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TestDAC2Reg           0x3A</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     TestADCReg            0x3B</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RFU3C                 0x3C</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RFU3D                 0x3D</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RFU3E                 0x3E</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     RFU3F  0x3F</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//和MF522通讯时返回的错误代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MI_OK                          0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MI_NOTAGERR                    1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MI_ERR                         2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲数组大小</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXRLEN                       18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************内部调用函数**************************************/</span></span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdRequest</span>(<span class="params">uint8_t req_code,uint8_t *pTagType</span>)</span>;</span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdAnticoll</span>(<span class="params">uint8_t *pSnr</span>)</span>;</span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdSelect</span>(<span class="params">uint8_t *pSnr</span>)</span>;</span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdAuthState</span>(<span class="params">uint8_t auth_mode,uint8_t addr,uint8_t *pKey,uint8_t *pSnr</span>)</span>;</span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdRead</span>(<span class="params">uint8_t addr,uint8_t *pData</span>)</span>;</span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdWrite</span>(<span class="params">uint8_t addr,uint8_t *pData</span>)</span>;</span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdValue</span>(<span class="params">uint8_t dd_mode,uint8_t addr,uint8_t *pValue</span>)</span>;</span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdBakValue</span>(<span class="params">uint8_t sourceaddr, uint8_t goaladdr</span>)</span>;</span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdHalt</span>(<span class="params"><span class="keyword">void</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CalulateCRC</span>(<span class="params">uint8_t *pIndata,uint8_t len,uint8_t *pOutData</span>)</span>;</span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdReset</span>(<span class="params"><span class="keyword">void</span></span>)</span>;</span><br><span class="line"><span class="function">uint8_t <span class="title">ReadRawRC</span>(<span class="params">uint8_t Address</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WriteRawRC</span>(<span class="params">uint8_t Address, uint8_t <span class="keyword">value</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetBitMask</span>(<span class="params">uint8_t reg,uint8_t mask</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearBitMask</span>(<span class="params">uint8_t reg,uint8_t mask</span>)</span>;</span><br><span class="line"><span class="function"><span class="built_in">char</span> <span class="title">PcdComMF522</span>(<span class="params">uint8_t Command,uint8_t *pInData,uint8_t InLenByte,uint8_t *pOutData,unsigned <span class="built_in">int</span> *pOutLenBit</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PcdAntennaOn</span>(<span class="params"><span class="keyword">void</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PcdAntennaOff</span>(<span class="params"><span class="keyword">void</span></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RC522_Config</span>(<span class="params">uint8_t Card_Type</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="SPI定义"><a href="#SPI定义" class="headerlink" title="SPI定义"></a>SPI定义</h4><p>spi的初始化默认即可，注意以下两项的设置，才能保持和模块的正常通信：</p><p><strong>CLKPolarity</strong>&#x3D;SPI_POLARITY_LOW; &#x2F;&#x2F;串行同步时钟的空闲状态为低电平</p><p><strong>CLKPhase</strong>&#x3D;SPI_PHASE_1EDGE; &#x2F;&#x2F;串行同步时钟的第1个跳变沿（上升或下降）数据被采样</p><p>片选引脚改为软件管理，这样方便更改引脚，</p><p><strong>NSS</strong>&#x3D;SPI_NSS_SOFT; &#x2F;&#x2F;NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理</p><p>SPI.c</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &quot;spi.h&quot;</span></span><br><span class="line"></span><br><span class="line">SPI_HandleTypeDef SPI1_Handler;  <span class="comment">//SPI句柄</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是SPI模块的初始化代码，配置成主机模式</span></span><br><span class="line"><span class="comment">//SPI口初始化</span></span><br><span class="line"><span class="comment">//这里针是对SPI1的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_Init</span>(<span class="params"><span class="keyword">void</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    SPI1_Handler.Instance=SPI1_SPI;                         <span class="comment">//SPI1</span></span><br><span class="line">    SPI1_Handler.Init.Mode=SPI_MODE_MASTER;             <span class="comment">//设置SPI工作模式，设置为主模式</span></span><br><span class="line">    SPI1_Handler.Init.Direction=SPI_DIRECTION_2LINES;   <span class="comment">//设置SPI单向或者双向的数据模式:SPI设置为双线模式</span></span><br><span class="line">    SPI1_Handler.Init.DataSize=SPI_DATASIZE_8BIT;       <span class="comment">//设置SPI的数据大小:SPI发送接收8位帧结构</span></span><br><span class="line">    SPI1_Handler.Init.CLKPolarity=SPI_POLARITY_LOW;    <span class="comment">//串行同步时钟的空闲状态为低电平</span></span><br><span class="line">    SPI1_Handler.Init.CLKPhase=SPI_PHASE_1EDGE;         <span class="comment">//串行同步时钟的第1个跳变沿（上升或下降）数据被采样</span></span><br><span class="line">    SPI1_Handler.Init.NSS=SPI_NSS_SOFT;                 <span class="comment">//NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制</span></span><br><span class="line">    SPI1_Handler.Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_256;<span class="comment">//定义波特率预分频的值:波特率预分频值为256</span></span><br><span class="line">    SPI1_Handler.Init.FirstBit=SPI_FIRSTBIT_MSB;        <span class="comment">//指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始</span></span><br><span class="line">    SPI1_Handler.Init.TIMode=SPI_TIMODE_DISABLE;        <span class="comment">//关闭TI模式</span></span><br><span class="line">    SPI1_Handler.Init.CRCCalculation=SPI_CRCCALCULATION_DISABLE;<span class="comment">//关闭硬件CRC校验</span></span><br><span class="line">    SPI1_Handler.Init.CRCPolynomial=<span class="number">7</span>;                  <span class="comment">//CRC值计算的多项式,默认值为7</span></span><br><span class="line">    HAL_SPI_Init(&amp;SPI1_Handler);<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">    __HAL_SPI_ENABLE(&amp;SPI1_Handler);                    <span class="comment">//使能SPI1</span></span><br><span class="line"></span><br><span class="line">    SPI1_ReadWriteByte(<span class="number">0Xff</span>);                           <span class="comment">//启动传输,产生8个时钟脉冲, 达到清空DR的作用, 非必需</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SPI底层驱动，时钟使能，引脚配置</span></span><br><span class="line"><span class="comment">//此函数会被HAL_SPI_Init()调用</span></span><br><span class="line"><span class="comment">//hspi:SPI句柄</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HAL_SPI_MspInit</span>(<span class="params">SPI_HandleTypeDef *hspi</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_Initure;</span><br><span class="line"></span><br><span class="line">    SPI1_SPI_CLK_ENABLE();</span><br><span class="line">    SPI1_SCK_GPIO_CLK_ENABLE();</span><br><span class="line">    SPI1_MISO_GPIO_CLK_ENABLE();</span><br><span class="line">    SPI1_MOSI_GPIO_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">    GPIO_Initure.Pin=SPI1_SCK_GPIO_PIN;</span><br><span class="line">    GPIO_Initure.Mode=GPIO_MODE_AF_PP;</span><br><span class="line">    GPIO_Initure.Pull=GPIO_PULLDOWN;</span><br><span class="line">    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">    HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&amp;GPIO_Initure);</span><br><span class="line"></span><br><span class="line">    GPIO_Initure.Pin=SPI1_MISO_GPIO_PIN;</span><br><span class="line">    HAL_GPIO_Init(SPI1_MISO_GPIO_PORT,&amp;GPIO_Initure);</span><br><span class="line"></span><br><span class="line">    GPIO_Initure.Pin=SPI1_MOSI_GPIO_PIN;</span><br><span class="line">    HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT,&amp;GPIO_Initure);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SPI.h</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#ifndef __SPI_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SPI_H</span></span><br><span class="line"><span class="meta">#include &quot;sys.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> SPI_HandleTypeDef SPI1_Handler;  <span class="comment">//SPI句柄</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* SPI1 引脚 定义 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPI1_SCK_GPIO_PORT              GPIOA</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPI1_SCK_GPIO_PIN               GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPI1_SCK_GPIO_CLK_ENABLE()      do&#123; __HAL_RCC_GPIOA_CLK_ENABLE(); &#125;while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPI1_MISO_GPIO_PORT             GPIOA</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPI1_MISO_GPIO_PIN              GPIO_PIN_6</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPI1_MISO_GPIO_CLK_ENABLE()     do&#123; __HAL_RCC_GPIOA_CLK_ENABLE(); &#125;while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPI1_MOSI_GPIO_PORT             GPIOA</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPI1_MOSI_GPIO_PIN              GPIO_PIN_7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPI1_MOSI_GPIO_CLK_ENABLE()     do&#123; __HAL_RCC_GPIOA_CLK_ENABLE(); &#125;while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* SPI1相关定义 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPI1_SPI                        SPI1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SPI1_SPI_CLK_ENABLE()           do&#123; __HAL_RCC_SPI1_CLK_ENABLE(); &#125;while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_Init</span>(<span class="params"><span class="keyword">void</span></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h2><p><img src="https://img-blog.csdnimg.cn/53941b94abc34bf5a897740cede1942a.png"></p><p>本实验在于经验分享和学习记录，有不正确的地方请读者指正。</p><h2 id="五、更新源码："><a href="#五、更新源码：" class="headerlink" title="五、更新源码："></a>五、更新源码：</h2><p>源码已上传至gitee：</p><p><a href="https://gitee.com/lrf1125962926/stm32/tree/RC522_SPI/" title="stm32: 一些stm32模块使用经验记录 - Gitee.com">stm32: 一些stm32模块使用经验记录 - Gitee.com <img src="https://csdnimg.cn/release/blog_editor_html/release2.3.6/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=N7T8">https://gitee.com/lrf1125962926/stm32/tree/RC522_SPI&#x2F;;</a></p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 外设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.Systick滴答定时器初始化（HAL库）&amp;无OS延时函数</title>
      <link href="/2024/03/stm32-5-Systick%E6%BB%B4%E7%AD%94%E5%AE%9A%E6%97%B6%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%88HAL%E5%BA%93%EF%BC%89-%E6%97%A0OS%E5%BB%B6%E6%97%B6%E5%87%BD%E6%95%B0/"/>
      <url>/2024/03/stm32-5-Systick%E6%BB%B4%E7%AD%94%E5%AE%9A%E6%97%B6%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%88HAL%E5%BA%93%EF%BC%89-%E6%97%A0OS%E5%BB%B6%E6%97%B6%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li><a href="#1systick-1">1.Systick滴答定时器简介</a></li><li><a href="#2systick-3">2.Systick主要寄存器</a></li><li><a href="#3systick-9">3.Systick中断优先级</a></li><li><a href="#4systick-13">4.Systick初始化流程</a></li><li><a href="#5os-108">5.无OS延时函数</a></li></ul><h2 id="1-Systick滴答定时器简介"><a href="#1-Systick滴答定时器简介" class="headerlink" title="1.Systick滴答定时器简介"></a>1.Systick滴答定时器简介</h2><p>SysTick是属于CM4内核中的外设，其寄存器的定义和部分库函数都在core_cm4.h中实现。Systick是一个24bit的向下递减的计数器，一般设置其时钟等于SYSCLK的180M（另一个选择是HCLK&#x2F;8）。当重装载数值寄存器的值递减到0的时候，系统定时器就产生一次中断，以此循环往复。基于CM4内核的MCU都有这个系统定时器，使得软件在CM4 单片机中可以很容易的移植。因此它一般用于RTOS，用于产生时基，维持操作系统的心跳。Systick用于RTOS的总结我打算以后写UCOS博客的时候总结，这篇博客主要介绍无OS时，Systick初始化过程和延时函数使用方法。</p><h2 id="2-Systick主要寄存器"><a href="#2-Systick主要寄存器" class="headerlink" title="2.Systick主要寄存器"></a>2.Systick主要寄存器</h2><p><img src="https://img-blog.csdnimg.cn/20200404233234532.png"><br><strong>控制寄存器：</strong> CLKSOURCE用于选择时钟源，一般会选择处理器时钟；ENABLE位用于使能Systick；TICKINT位置1会开启Systick中断。<br><img src="https://img-blog.csdnimg.cn/20200404233348124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTg5ODgwNA==,size_1,color_FFFFFF,t_1"><br><strong>重装载值寄存器：</strong><br><img src="https://img-blog.csdnimg.cn/20200404234149713.png"></p><h2 id="3-Systick中断优先级"><a href="#3-Systick中断优先级" class="headerlink" title=";  3.Systick中断优先级"></a><a name="3systick_9">;</a>  3.Systick中断优先级</h2><p>SysTick属于内核外设，和普通外设的中断优先级不同，没有抢占优先级和响应优先级的说法。在F429 中，内核外设的中断优先级由内核SCB的外设的寄存器SHPRx（x&#x3D;1.2.3）配置。SPRH1-SPRH3是32位的寄存器，只能通过字节访问，每 8个字段控制着一个内核外设的中断优先级的配置。在F429 中只有位 7:3 这高四位有效，所以内核外设的中断优先级可编程为：0~15，数值越小优先级越高。<br><img src="https://img-blog.csdnimg.cn/20200405093144981.png"><br><img src="https://img-blog.csdnimg.cn/20200405093414919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTg5ODgwNA==,size_1,color_FFFFFF,t_1"></p><h2 id="4-Systick初始化流程"><a href="#4-Systick初始化流程" class="headerlink" title="4.Systick初始化流程"></a>4.Systick初始化流程</h2><ol><li>HAL_Init()是主函数main中执行的第一个函数，会设置中断优先级，将时钟源选为16M的HSI。我们可以注意到它还调用了HAL_InitTick()函数，它的输入参数是中断优先级，函数作用是初始化Systick并配置1ms中断一次。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (INSTRUCTION_CACHE_ENABLE != 0)</span></span><br><span class="line">   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> (DATA_CACHE_ENABLE != 0)</span></span><br><span class="line">   __HAL_FLASH_DATA_CACHE_ENABLE();&lt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> 外设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的requests在网络请求中添加cookies参数</title>
      <link href="/2024/03/python-python%E7%9A%84requests%E5%9C%A8%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E4%B8%AD%E6%B7%BB%E5%8A%A0cookies%E5%8F%82%E6%95%B0/"/>
      <url>/2024/03/python-python%E7%9A%84requests%E5%9C%A8%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E4%B8%AD%E6%B7%BB%E5%8A%A0cookies%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>哎，好久没有学习爬虫了，现在想要重新拾起来。发现之前学习爬虫有些粗糙，竟然连requests中添加cookies都没有掌握，惭愧。废话不宜多，直接上内容。</p><p>我们平时使用requests获取网络内容很简单，几行代码搞定了，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">res=requests.get(<span class="string">&quot;https://cloud.flyme.cn/browser/index.jsp&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> res.content</span><br></pre></td></tr></table></figure><p>你没有看错，真的只有三行代码。但是简单归简单，问题还是不少的。</p><p>首先，这里的请求只是get方法，并且没有解决cookies的问题。</p><p>然后就是这里并没有解决乱码的问题。（乱码是python中的变态点）</p><p>其实，在requests的get方法中添加cookies的方法不难 可以这样子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res=requests.get(<span class="string">&quot;https://cloud.flyme.cn/browser/index.jsp&quot;</span>,cookies=cookies)</span><br></pre></td></tr></table></figure><p>我们所面临的问题是，如何构造这里的cookies。</p><p>这里的cookies是一个字典格式的数据。</p><p>平时我们浏览网页的时候，在审查元素中可以查看到所访问网页的cookies内容，大都是这样子的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sn_openNetBySms=%23810EBMA3TE53; sn_map=810EBMA3TE53; DSESSIONID=f1987887-3d1d-4a85-ad75-c6270e588290; JSESSIONID=; _uid=; _keyLogin=; _rmtk=; _uticket=ns_0393027c2f9f686e3499e8ebb8d1d622; _ckk=ns_397a592791064029bf1336eff1cf516e; ucuid=8a135520affa423584307f6e2c210f02; _domain=cloud.flyme.cn; _islogin=true; lang=zh_CN; JSESSIONID=1gmfzynp0ns6s1u6a92xkqgi6q</span><br></pre></td></tr></table></figure><p>天那，这是人看的吗？不是。这是经过加密处理后的数据。同样，我们可以将加密后的数据传递到get方法的cookies参数中，服务器会自动将加密后的数据进行解密，再检查数据的正确性。</p><p>至于，如何查看所访问网页的cookies内容，可以使用浏览器的审查功能，F12或者右击审查（Chrome）打开。在network中查看链接的Headers内容。另外，也可以使用软件抓包查看，如Fiddler web Debugger。</p><p>这里假设获取到了cookies的内容，我们可以保存到本地TXT文件中（直接把cookies的内容粘贴进去即可），例如test.txt文件。</p><p>然后，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">r&#x27;test.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)<span class="comment">#打开所保存的cookies内容文件</span></span><br><span class="line">cookies=&#123;&#125;<span class="comment">#初始化cookies字典变量</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.read().split(<span class="string">&#x27;;&#x27;</span>):   <span class="comment">#按照字符：进行划分读取</span></span><br><span class="line">    <span class="comment">#其设置为1就会把字符串拆分成2份</span></span><br><span class="line">    name,value=line.strip().split(<span class="string">&#x27;=&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">    cookies[name]=value  <span class="comment">#为字典cookies添加内容</span></span><br></pre></td></tr></table></figure><p>这时候我们将cookies添加到get方法中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res=requests.get(<span class="string">&quot;https://cloud.flyme.cn/browser/index.jsp&quot;</span>,cookies=cookies)</span><br></pre></td></tr></table></figure><p>这时候获取到的res.content中就是我们将cookies信息添加到get中后访问网页所获取的内容。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> requests </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【STM32】HAL库_STM32CubeMX教程十三---RTC时钟</title>
      <link href="/2024/03/stm32-%E3%80%90STM32%E3%80%91HAL%E5%BA%93-STM32CubeMX%E6%95%99%E7%A8%8B%E5%8D%81%E4%B8%89-RTC%E6%97%B6%E9%92%9F/"/>
      <url>/2024/03/stm32-%E3%80%90STM32%E3%80%91HAL%E5%BA%93-STM32CubeMX%E6%95%99%E7%A8%8B%E5%8D%81%E4%B8%89-RTC%E6%97%B6%E9%92%9F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>前言：</p><p>本系列教程将 对应外设原理，HAL库与STM32CubeMX结合在一起讲解，使您可以更快速的学会各个模块的使用</p><p>所用工具：</p><p>1、芯片： STM32F407ZET6&#x2F; STM32F103ZET6</p><p>2、STM32CubeMx软件</p><p>3、IDE： MDK-Keil软件</p><p>4、STM32F1xx&#x2F;STM32F4xxHAL库</p><p>知识概括：</p><p>通过本篇博客您将学到：</p><p>RTC时钟原理</p><p>STM32CubeMX创建RTC例程</p><p>HAL库定时器RTC函数库</p><p><strong>PS: 这里的RTC讲解，我们只将原理，不讲寄存器，如果要看RTC的寄存器，请看这篇文章</strong> <a href="https://blog.csdn.net/as480133937/article/details/105026033">【STM32】RTC实时时钟，步骤超细详解，一文看懂RTC</a></p><h3 id="什么是RTC"><a href="#什么是RTC" class="headerlink" title="什么是RTC"></a>什么是RTC</h3><p>**RTC (Real Time Clock)**：实时时钟</p><p><strong>RTC是个独立的定时器</strong>。RTC模块拥有一个连续计数的计数器，在相应的软件配置下，可以提供时钟日历的功能。修改计数器的值可以重新设置当前时间和日期 RTC还包含用于管理低功耗模式的自动唤醒单元。</p><p><img src="https://img-blog.csdnimg.cn/20200423215123488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200423215123488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p><strong>在断电情况下 RTC仍可以独立运行 只要芯片的备用电源一直供电,RTC上的时间会一直走。</strong></p><p>RTC实质是一个掉电后还继续运行的定时器,从定时器的角度来看,相对于通用定时器TIM外设,它的功能十分简单,只有计时功能(也可以触发中断)。但其高级指出也就在于掉电之后还可以正常运行。</p><p>两个 32 位寄存器包含二进码十进数格式 (BCD) 的秒、分钟、小时（ 12 或 24 小时制）、星期几、日期、月份和年份。此外，还可提供二进制格式的亚秒值。系统可以自动将月份的天数补偿为 28、29（闰年）、30 和 31 天。</p><p>上电复位后，所有RTC寄存器都会受到保护，以防止可能的非正常写访问。</p><p>无论器件状态如何（运行模式、低功耗模式或处于复位状态），只要电源电压保持在工作范围内，RTC使不会停止工作。</p><h4 id="RCT特征："><a href="#RCT特征：" class="headerlink" title="RCT特征："></a><strong>RCT特征：</strong></h4><p>● <strong>可编程的预分频系数：分频系数高为220。</strong> ● <strong>32位的可编程计数器，可用于较长时间段的测量。</strong> ● <strong>2个分离的时钟：用于APB1接口的PCLK1和RTC时钟(RTC时钟的频率必须小于PCLK1时钟 频率的四分之一以上)。</strong> ● 可以选择以下<strong>三种RTC的时钟源</strong>：      ● HSE时钟除以128；      ● LSE振荡器时钟；      ● LSI振荡器时钟</p><p>● <strong>2个独立的复位类型：</strong>      ● APB1接口由系统复位；      ● RTC核心(预分频器、闹钟、计数器和分频器)只能由后备域复位</p><p>● <strong>3个专门的可屏蔽中断：</strong>      ● 1.<strong>闹钟中断</strong>，用来产生一个软件可编程的闹钟中断。</p><p>     ● 2.<strong>秒中断</strong>，用来产生一个可编程的周期性中断信号(长可达1秒)。</p><p>     ● 3.<strong>溢出中断</strong>，指示内部可编程计数器溢出并回转为0的状态。</p><p><strong>RTC时钟源：</strong> 三种不同的时钟源可被用来驱动系统时钟(SYSCLK)：</p><p>● <strong>HSI振荡器时钟</strong> ● <strong>HSE振荡器时钟</strong> ● <strong>PLL时钟</strong></p><p>这些设备有以下2种二级时钟源：</p><p>● 40kHz低速内部RC，可以用于驱动独立看门狗和通过程序选择驱动RTC。 RTC用于从停机&#x2F;待机模式下自动唤醒系统。 ● 32.768kHz低速外部晶体也可用来通过程序选择驱动RTC(RTCCLK)。</p><h4 id="RTC原理框图"><a href="#RTC原理框图" class="headerlink" title="RTC原理框图"></a>RTC原理框图</h4><p><img src="https://img-blog.csdnimg.cn/20200322144525734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200322144525734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"><br> RTC时钟的框图还是比较简单的，这里我们把他分成 <strong><code>两个部分</code></strong>:</p><p><strong>APB1 接口</strong>：用来和 APB1 总线相连。 此单元还包含一组 16 位寄存器，可通过 APB1 总线对其进行读写操作。APB1 接口由 APB1 总 线时钟驱动，用来与 APB1 总线连接。</p><p>通过APB1接口可以访问RTC的相关寄存器（预分频值，计数器值，闹钟值）。</p><p><strong>RTC 核心接口</strong>：由一组可编程计数器组成，分成 <strong><code>两个主要模块</code></strong> 。<br><img src="https://img-blog.csdnimg.cn/20200322223612113.png" alt="https://img-blog.csdnimg.cn/20200322223612113.png"><br>g) <strong>第一个模块是 RTC 的 预分频模块</strong>，它可编程产生 1 秒的 RTC 时间基准 TR_CLK。RTC 的预分频模块包含了一个 20 位的可编程分频器(RTC 预分频器)。如果在 RTC_CR 寄存器中设置了相应的允许位，则在每个 TR_CLK 周期中 RTC 产生一个中断(秒中断)。<br><img src="https://img-blog.csdnimg.cn/2020032222362770.png" alt="https://img-blog.csdnimg.cn/2020032222362770.png"><br> <strong>第二个模块是一个 32 位的可编程计数器 （RTC_CNT）</strong>，可被初始化为当前的系统时间，一个 32 位的时钟计数器，按秒钟计算，可以记 录 4294967296 秒，约合 136 年左右，作为一般应用，这已经是足够了的。</p><h4 id="RTC具体流程："><a href="#RTC具体流程：" class="headerlink" title="RTC具体流程："></a><strong>RTC具体流程：</strong></h4><p><strong>RTCCLK经过RTC_DIV预分频，RTC_PRL设置预分频系数，然后得到TR_CLK时钟信号，我们一般设置其周期为1s，RTC_CNT计数器计数，假如1970设置为时间起点为0s，通过当前时间的秒数计算得到当前的时间。RTC_ALR是设置闹钟时间，RTC_CNT计数到RTC_ALR就会产生计数中断，</strong></p><ul><li><strong>RTC_Second</strong>为秒中断，用于刷新时间，+ <strong>RTC_Overflow</strong>是溢出中断。+ <strong>RTC Alarm</strong> 控制开关机</li></ul><h4 id="RTC时钟选择"><a href="#RTC时钟选择" class="headerlink" title="RTC时钟选择"></a>RTC时钟选择</h4><p><strong>使用HSE分频时钟或者LSI的时候,在主电源VDD掉电的情况下,这两个时钟来源都会受到影响,因此没法保证RTC正常工作.所以RTC一般都时钟低速外部时钟LSE,频率为实时时钟模块中常用的32.768KHz,因为32768 &#x3D; 2^15,分频容易实现,所以被广泛应用到RTC模块.(在主电源VDD有效的情况下(待机),RTC还可以配置闹钟事件使STM32退出待机模式).</strong></p><h4 id="RTC复位过程"><a href="#RTC复位过程" class="headerlink" title="RTC复位过程"></a>RTC复位过程</h4><p>除了RTC_PRL、RTC_ALR、RTC_CNT和RTC_DIV寄存器外，所有的系统寄存器都由系统复位或电源复位进行异步复位。 RTC_PRL、RTC_ALR、RTC_CNT和RTC_DIV寄存器仅能通过备份域复位信号复位。</p><p><strong>系统复位后,禁止访问后备寄存器和RCT,防止对后卫区域(BKP)的意外写操作</strong></p><h4 id="RTC中断"><a href="#RTC中断" class="headerlink" title="RTC中断"></a>RTC中断</h4><p><strong>秒中断：</strong> 这里时钟自带一个秒中断，每当计数加一的时候就会触发一次秒中断，。注意，这里所说的秒中断并非一定是一秒的时间，它是由RTC时钟源和分频值决定的“秒”的时间，当然也是可以做到1秒钟中断一次。我们通过往秒中断里写更新时间的函数来达到时间同步的效果</p><p><strong>闹钟中断：</strong> 闹钟中断就是设置一个预设定的值，计数每自加多少次触发一次闹钟中断</p><h3 id="CubeMX配置RTC"><a href="#CubeMX配置RTC" class="headerlink" title="CubeMX配置RTC"></a>CubeMX配置RTC</h3><h4 id="工程创建"><a href="#工程创建" class="headerlink" title="工程创建"></a>工程创建</h4><p><strong>1设置RCC</strong><br><img src="https://img-blog.csdnimg.cn/20200425101549368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425101549368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li><strong>设置高速外部时钟HSE 选择外部时钟源</strong>+ <strong>使能外部晶振LSE</strong></li></ul><p><strong>RTC设备因为其独特的运行方式（即掉电依旧运行）使用HSE分频时钟或者LSI的时候,在主电源VDD掉电的情况下,这两个时钟来源都会受到影响，资源消耗太大，小小的纽扣电池根本吃不消。没法保证RTC正常工作.所以RTC一般都时钟低速外部时钟LSE</strong></p><p>2.<strong>配置RTC</strong><br><img src="https://img-blog.csdnimg.cn/20200425110730403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425110730403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li><strong>Activate Clock Source 激活时钟源</strong>+ <strong>Activate calendar激活日历</strong></li></ul><p><strong>这两个都要点，作用也很明显，先是使能时钟源，再使能RTC日历</strong></p><ul><li><strong>RTC_OUT： Not RTC_OUT</strong>+ <strong>Tamper：</strong> <strong>×</strong></li></ul><p>第一个是是否使能 <strong>tamper（PC13）引脚上输出校正的秒脉冲时钟，</strong></p><p>第二个： <strong>RTC入侵检测校验功能</strong></p><p><strong>RTC校验功能，使能侵入检测功能。RTC时钟经64分频输出到侵入检测引脚TAMPER上 当 TAMPER引脚上的信号从 0变成1或者从 1变成 0(取决于备份控制寄存器BKP_CR的 TPAL位)，会产生一个侵入检测事件。侵入检测事件将所有数据备份寄存器内容清除。</strong></p><ul><li>也就是第一个是使能tamper（PC13）引脚作为时钟脉冲输出+ 第二个是使能tamper（PC13）引脚作为入侵检测功能</li></ul><p>下面是两个RTC的中断：</p><ul><li><strong>RTC全局中断RTC_IRQHandler()</strong>+ <strong>闹钟中断函数RTCAlarm_IRQHandler()</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/2020042514381771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/2020042514381771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p><strong>此处设置时间为2020&#x2F;04&#x2F;25 13:30:00</strong></p><ul><li>Data Format: 日期格式</li></ul><p><strong>Binary data format 十六进制 BCD data format BCD码进制</strong></p><p>使用自动配置，初始化时间必须使用BCD data format，原因是库函数存在bug，如果使用Binary data format，月份配置会出错，比如说11月，配置时会赋值为RTC_MONTH_NOVEMBER，而此宏定义值为0x11，也就是说其十进制值为17</p><ul><li><strong>Hours： 小时</strong> +  <strong>Minutes： 分钟</strong> +  <strong>Seconds： 秒</strong> +  <strong>Week Day： 星期</strong> +  <strong>Month 月份</strong> +  <strong>Date： 日期</strong> +  <strong>Year： 年份</strong></li></ul><p><strong>3 使能串口</strong><br><img src="https://img-blog.csdnimg.cn/20200425143944495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425143944495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"><br> <strong>使能一下串口，因为发送日期到上位机</strong></p><p><strong>4时钟源设置</strong><br><img src="https://img-blog.csdnimg.cn/20200425144337169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425144337169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p>我的是 外部晶振为8MHz</p><ul><li>1选择外部时钟HSE 8MHz+ 2PLL锁相环倍频9倍+ 3系统时钟来源选择为PLL+ 4设置APB1分频器为 &#x2F;2+ 5 使能CSS监视时钟+ <strong>6 设置RTC时钟为LSE</strong></li></ul><p>32的时钟树框图 如果不懂的话请看<a href="https://blog.csdn.net/as480133937/article/details/98845509">《【STM32】系统时钟RCC详解(超详细，超全面)》</a></p><p><strong>5项目文件设置</strong><br><img src="https://img-blog.csdnimg.cn/20200425144600886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425144600886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li>1 设置项目名称+ 2 设置存储路径+ 3 选择所用IDE<br><img src="https://img-blog.csdnimg.cn/2020042514462236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/2020042514462236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></li></ul><p><strong>6创建工程文件</strong></p><p><strong>然后点击GENERATE CODE 创建工程</strong></p><p><strong>配置下载工具</strong> 新建的工程所有配置都是默认的 我们需要自行选择下载模式，勾选上下载后复位运行</p><p><img src="https://img-blog.csdnimg.cn/202004251446415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/202004251446415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><h4 id="RTC-HAL库函数"><a href="#RTC-HAL库函数" class="headerlink" title="RTC_HAL库函数"></a>RTC_HAL库函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*设置系统时间*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span> </span><br><span class="line"><span class="comment">/*读取系统时间*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*设置系统日期*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*读取系统日期*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*启动报警功能*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetAlarm</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*设置报警中断*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetAlarm_IT</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*报警时间回调函数*/</span></span><br><span class="line">__weak <span class="keyword">void</span> <span class="title function_">HAL_RTC_AlarmAEventCallback</span><span class="params">(RTC_HandleTypeDef *hrtc)</span></span><br><span class="line"><span class="comment">/*写入后备储存器*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">HAL_RTCEx_BKUPWrite</span><span class="params">(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)</span></span><br><span class="line"><span class="comment">/*读取后备储存器*/</span></span><br><span class="line">uint32_t <span class="title function_">HAL_RTCEx_BKUPRead</span><span class="params">(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister  </span></span><br></pre></td></tr></table></figure><p>我们可以看到前面的四个函数，分别是</p><ul><li><strong>设置系统时间：HAL_RTC_SetTime();</strong>+ <strong>读取系统时间: HAL_RTC_GetTime();</strong>+ <strong>设置系统日期: HAL_RTC_SetDate();</strong>+ <strong>读取系统日期: HAL_RTC_GetDate();</strong></li></ul><p>因为系统的时间和日期开始的时候已经设置过了，所以我们这里只用两个读取函数</p><p> <strong>读取系统时间函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*读取系统时间*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span></span><br></pre></td></tr></table></figure><p>功能： 获取RTC时钟的时间</p><p>参数：</p><ul><li>*hrtc RTC结构体参数 例：&amp;hi2c2 +  <strong>RTC_TimeTypeDef</strong> *sTime： 获取RTC时间的结构体， +  Format： <strong>获取时间的格式</strong> <strong>RTC_FORMAT_BIN 使用16进制 RTC_FORMAT_BCD 使用BCD进制</strong></li></ul><p> <strong>读取系统日期函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*读取系统日期*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br></pre></td></tr></table></figure><p>功能： 获取RTC时钟的日期</p><p>参数：</p><ul><li>*hrtc RTC结构体参数 例：&amp;hi2c2 +  <strong>RTC_DateTypeDef</strong> *sTime： 获取RTC日期的结构体， +  Format： <strong>获取日期的格式</strong> <strong>RTC_FORMAT_BIN 使用16进制 RTC_FORMAT_BCD 使用BCD进制</strong></li></ul><p>在stm32f1xx_hal_rtc.h头文件中，可以找到<code>RTC_TimeTypeDef</code>，<code>RTC_DateTypeDef</code>这两个结构体的成员变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * @brief  RTC Time structure definition</span><br><span class="line">  */</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  uint8_t Hours;            /*!&lt; Specifies the RTC Time Hour.</span><br><span class="line">                                 This parameter must be a number between Min_Data = 0 and Max_Data = 23 */</span><br><span class="line"></span><br><span class="line">  uint8_t Minutes;          /*!&lt; Specifies the RTC Time Minutes.</span><br><span class="line">                                 This parameter must be a number between Min_Data = 0 and Max_Data = 59 */</span><br><span class="line"></span><br><span class="line">  uint8_t Seconds;          /*!&lt; Specifies the RTC Time Seconds.</span><br><span class="line">                                 This parameter must be a number between Min_Data = 0 and Max_Data = 59 */</span><br><span class="line"></span><br><span class="line">&#125; RTC_TimeTypeDef;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * @brief  RTC Date structure definition</span><br><span class="line">  */</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  uint8_t WeekDay;  /*!&lt; Specifies the RTC Date WeekDay (not necessary for HAL_RTC_SetDate).</span><br><span class="line">                         This parameter can be a value of @ref RTC_WeekDay_Definitions */</span><br><span class="line"></span><br><span class="line">  uint8_t Month;    /*!&lt; Specifies the RTC Date Month (in BCD format).</span><br><span class="line">                         This parameter can be a value of @ref RTC_Month_Date_Definitions */</span><br><span class="line"></span><br><span class="line">  uint8_t Date;     /*!&lt; Specifies the RTC Date.</span><br><span class="line">                         This parameter must be a number between Min_Data = 1 and Max_Data = 31 */</span><br><span class="line"></span><br><span class="line">  uint8_t Year;     /*!&lt; Specifies the RTC Date Year.</span><br><span class="line">                         This parameter must be a number between Min_Data = 0 and Max_Data = 99 */</span><br><span class="line"></span><br><span class="line">&#125; RTC_DateTypeDef;</span><br></pre></td></tr></table></figure><p><strong>程序代码：</strong></p><p>main.c</p><p><strong>在main.c中重写fputc函数，使得能够使用printf函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdio.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int fputc(int ch,FILE *f)&#123;</span><br><span class="line"> uint8_t temp[1]=&#123;ch&#125;;</span><br><span class="line"> HAL_UART_Transmit(&amp;huart1,temp,1,2);</span><br><span class="line"> return ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义两个结构体来获取日期和时间：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RTC_DateTypeDef GetData;  //获取日期结构体</span><br><span class="line"></span><br><span class="line">RTC_TimeTypeDef GetTime;   //获取时间结构体</span><br></pre></td></tr></table></figure><p>在while循环中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* Get the RTC current Time */</span><br><span class="line">HAL_RTC_GetTime(&amp;hrtc, &amp;GetTime, RTC_FORMAT_BIN);</span><br><span class="line">   /* Get the RTC current Date */</span><br><span class="line">   HAL_RTC_GetDate(&amp;hrtc, &amp;GetData, RTC_FORMAT_BIN);</span><br><span class="line"></span><br><span class="line">   /* Display date Format : yy/mm/dd */</span><br><span class="line">   printf(&quot;%02d/%02d/%02d\r\n&quot;,2000 + GetData.Year, GetData.Month, GetData.Date);</span><br><span class="line">   /* Display time Format : hh:mm:ss */</span><br><span class="line">   printf(&quot;%02d:%02d:%02d\r\n&quot;,GetTime.Hours, GetTime.Minutes, GetTime.Seconds);</span><br><span class="line"></span><br><span class="line">   printf(&quot;\r\n&quot;);</span><br><span class="line"></span><br><span class="line">   HAL_Delay(1000);</span><br></pre></td></tr></table></figure><p><strong>程序中使用HAL_RTC_GetTime（）,HAL_RTC_GetDate()读取时间和日期，并保存到结构体变量中，然后通过串口输出读取的时间和日期。</strong></p><p><strong>例程测试正常：</strong><br><img src="https://img-blog.csdnimg.cn/20200425153330941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425153330941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><h4 id="RTC掉电重置"><a href="#RTC掉电重置" class="headerlink" title="RTC掉电重置"></a>RTC掉电重置</h4><p>但是呢，在hal库中生成的代码，<strong>每次断电就RTC时间会重置</strong>，每次上电都会重新初始化时间</p><p>因为HAL库设置了一个BKP寄存器保存一个标志。每次单片机启动时都读取这个标志并判断是不是预先设定的值：如度果不是就初始化RTC并设置时间，再设置标志为预期值；如果是预期值就跳过初始化和时间设置，继续执行后面的程序</p><p><strong>所以这里我们只需要每次上电执行RTC初始化之前，将标志设置为预期值即可</strong></p><p><strong>在rtc.c中的RTC_Init修改为以下内容即可</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"> void MX_RTC_Init(void)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN RTC_Init 0 */</span><br><span class="line">RTC_TimeTypeDef time;   //时间结构体参数</span><br><span class="line">RTC_DateTypeDef datebuff;   //日期结构体参数</span><br><span class="line">  /* USER CODE END RTC_Init 0 */</span><br><span class="line"></span><br><span class="line">  RTC_TimeTypeDef sTime = &#123;0&#125;;</span><br><span class="line">  RTC_DateTypeDef DateToUpdate = &#123;0&#125;;</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN RTC_Init 1 */</span><br><span class="line">__HAL_RCC_BKP_CLK_ENABLE();       //开启后备区域时钟</span><br><span class="line">__HAL_RCC_PWR_CLK_ENABLE();  //开启电源时钟</span><br><span class="line">  /* USER CODE END RTC_Init 1 */</span><br><span class="line">  /**Initialize RTC Only </span><br><span class="line">  */</span><br><span class="line">  hrtc.Instance = RTC;</span><br><span class="line">  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;</span><br><span class="line">  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;</span><br><span class="line">  if (HAL_RTC_Init(&amp;hrtc) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN Check_RTC_BKUP */</span><br><span class="line">if(HAL_RTCEx_BKUPRead(&amp;hrtc,RTC_BKP_DR1)!= 0x5051)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  /* USER CODE END Check_RTC_BKUP */</span><br><span class="line"></span><br><span class="line">  /**Initialize RTC and set the Time and Date </span><br><span class="line">  */</span><br><span class="line">  sTime.Hours = 0x14;</span><br><span class="line">  sTime.Minutes = 0x30;</span><br><span class="line">  sTime.Seconds = 0x0;</span><br><span class="line"></span><br><span class="line">  if (HAL_RTC_SetTime(&amp;hrtc, &amp;sTime, RTC_FORMAT_BCD) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;</span><br><span class="line">  DateToUpdate.Month = RTC_MONTH_APRIL;</span><br><span class="line">  DateToUpdate.Date = 0x25;</span><br><span class="line">  DateToUpdate.Year = 0x20;</span><br><span class="line"></span><br><span class="line">  if (HAL_RTC_SetDate(&amp;hrtc, &amp;DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  /* USER CODE BEGIN RTC_Init 2 */</span><br><span class="line"></span><br><span class="line">__HAL_RTC_SECOND_ENABLE_IT(&amp;hrtc,RTC_IT_SEC); //开启RTC时钟秒中断</span><br><span class="line">datebuff = DateToUpdate;  //把日期数据拷贝到自己定义的data中</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR1, 0x5051);//向指定的后备区域寄存器写入数据</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR2, (uint16_t)datebuff.Year);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR3, (uint16_t)datebuff.Month);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR4, (uint16_t)datebuff.Date);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR5, (uint16_t)datebuff.WeekDay);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">datebuff.Year    = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR2);</span><br><span class="line">datebuff.Month   = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR3);</span><br><span class="line">datebuff.Date    = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR4);</span><br><span class="line">datebuff.WeekDay = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR5);</span><br><span class="line">DateToUpdate = datebuff;</span><br><span class="line">if (HAL_RTC_SetDate(&amp;hrtc, &amp;DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line">Error_Handler();</span><br><span class="line">&#125;</span><br><span class="line">__HAL_RTC_SECOND_ENABLE_IT(&amp;hrtc,RTC_IT_SEC); //开启RTC时钟秒中断</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425165901167.gif" alt="https://img-blog.csdnimg.cn/20200425165901167.gif"></p><p><img src="https://img-blog.csdnimg.cn/20200425165904365.gif" alt="https://img-blog.csdnimg.cn/20200425165904365.gif"></p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32_HAL库驱动DHT11读取温湿度程序</title>
      <link href="/2024/03/stm32-STM32-HAL%E5%BA%93%E9%A9%B1%E5%8A%A8DHT11%E8%AF%BB%E5%8F%96%E6%B8%A9%E6%B9%BF%E5%BA%A6%E7%A8%8B%E5%BA%8F/"/>
      <url>/2024/03/stm32-STM32-HAL%E5%BA%93%E9%A9%B1%E5%8A%A8DHT11%E8%AF%BB%E5%8F%96%E6%B8%A9%E6%B9%BF%E5%BA%A6%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="STM32使用HAL库驱动DHT11读取温湿度程序"><a href="#STM32使用HAL库驱动DHT11读取温湿度程序" class="headerlink" title="STM32使用HAL库驱动DHT11读取温湿度程序"></a>STM32使用HAL库驱动DHT11读取温湿度程序</h2><p><strong>驱动DHT11、DHT22、DS18BB20等温湿度模块时序是比较简单的，关键在于控制好时序的<code>延时时间</code>，HAL库的延时函数HAL_Delay是毫秒级别延时函数，所关键点就是实现微秒级别的延时函数。</strong></p><p><strong>微秒级别延时函数实现见我的另一篇博客：<a href="https://blog.csdn.net/qq153471503/article/details/102930097">https://blog.csdn.net/qq153471503/article/details/102930097</a></strong></p><p><strong>扫描以下二维码，关注公众号<code>雍正不秃头</code>获取更多STM32资源及干货！</strong><br><img src="https://img-blog.csdnimg.cn/20210126155428872.png" alt="https://img-blog.csdnimg.cn/20210126155428872.png"></p><h3 id="sys-h"><a href="#sys-h" class="headerlink" title="sys.h"></a>sys.h</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _SYS_H_</span><br><span class="line">#define _SYS_H_</span><br><span class="line"></span><br><span class="line">#include &quot;main.h&quot;</span><br><span class="line"></span><br><span class="line">#define BITBAND(addr, bitnum) ((addr &amp; 0xF0000000)+0x2000000+((addr &amp;0xFFFFF)&lt;&lt;5)+(bitnum&lt;&lt;2))</span><br><span class="line">#define MEM_ADDR(addr)  *((volatile unsigned long  *)(addr))</span><br><span class="line">#define BIT_ADDR(addr, bitnum)   MEM_ADDR(BITBAND(addr, bitnum))</span><br><span class="line"></span><br><span class="line">#define GPIOA_ODR_Addr    (GPIOA_BASE+12) //0x4001080C </span><br><span class="line">#define GPIOB_ODR_Addr    (GPIOB_BASE+12) //0x40010C0C </span><br><span class="line">#define GPIOC_ODR_Addr    (GPIOC_BASE+12) //0x4001100C </span><br><span class="line">#define GPIOD_ODR_Addr    (GPIOD_BASE+12) //0x4001140C </span><br><span class="line">#define GPIOE_ODR_Addr    (GPIOE_BASE+12) //0x4001180C </span><br><span class="line">#define GPIOF_ODR_Addr    (GPIOF_BASE+12) //0x40011A0C    </span><br><span class="line">#define GPIOG_ODR_Addr    (GPIOG_BASE+12) //0x40011E0C    </span><br><span class="line"></span><br><span class="line">#define GPIOA_IDR_Addr    (GPIOA_BASE+8) //0x40010808 </span><br><span class="line">#define GPIOB_IDR_Addr    (GPIOB_BASE+8) //0x40010C08 </span><br><span class="line">#define GPIOC_IDR_Addr    (GPIOC_BASE+8) //0x40011008 </span><br><span class="line">#define GPIOD_IDR_Addr    (GPIOD_BASE+8) //0x40011408 </span><br><span class="line">#define GPIOE_IDR_Addr    (GPIOE_BASE+8) //0x40011808 </span><br><span class="line">#define GPIOF_IDR_Addr    (GPIOF_BASE+8) //0x40011A08 </span><br><span class="line">#define GPIOG_IDR_Addr    (GPIOG_BASE+8) //0x40011E08 </span><br><span class="line"></span><br><span class="line">#define PAout(n)   BIT_ADDR(GPIOA_ODR_Addr,n)  //</span><br><span class="line">#define PAin(n)    BIT_ADDR(GPIOA_IDR_Addr,n)  //</span><br><span class="line"></span><br><span class="line">#define PBout(n)   BIT_ADDR(GPIOB_ODR_Addr,n)  //</span><br><span class="line">#define PBin(n)    BIT_ADDR(GPIOB_IDR_Addr,n)  //</span><br><span class="line"></span><br><span class="line">#define PCout(n)   BIT_ADDR(GPIOC_ODR_Addr,n)  //</span><br><span class="line">#define PCin(n)    BIT_ADDR(GPIOC_IDR_Addr,n)  //</span><br><span class="line"></span><br><span class="line">#define PDout(n)   BIT_ADDR(GPIOD_ODR_Addr,n)  //</span><br><span class="line">#define PDin(n)    BIT_ADDR(GPIOD_IDR_Addr,n)  //</span><br><span class="line"></span><br><span class="line">#define PEout(n)   BIT_ADDR(GPIOE_ODR_Addr,n)  //</span><br><span class="line">#define PEin(n)    BIT_ADDR(GPIOE_IDR_Addr,n)  //</span><br><span class="line"></span><br><span class="line">#define PFout(n)   BIT_ADDR(GPIOF_ODR_Addr,n)  //</span><br><span class="line">#define PFin(n)    BIT_ADDR(GPIOF_IDR_Addr,n)  //</span><br><span class="line"></span><br><span class="line">#define PGout(n)   BIT_ADDR(GPIOG_ODR_Addr,n)  //</span><br><span class="line">#define PGin(n)    BIT_ADDR(GPIOG_IDR_Addr,n)  //</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="dht11-h"><a href="#dht11-h" class="headerlink" title="dht11.h"></a>dht11.h</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __DHT11_H</span><br><span class="line">#define __DHT11_H</span><br><span class="line"></span><br><span class="line">#include &quot;main.h&quot;</span><br><span class="line">#include &quot;sys.h&quot;</span><br><span class="line"></span><br><span class="line">typedef uint8_t u8;</span><br><span class="line">typedef uint16_t u16;</span><br><span class="line">typedef uint32_t u32;</span><br><span class="line"></span><br><span class="line">//IO方向设置</span><br><span class="line">#define DHT11_IO_IN()  &#123;IODHT22_GPIO_Port-&gt;CRH &amp;= 0xFFFFF0FF;IODHT22_GPIO_Port-&gt;CRH |= 8 &lt;&lt; 8;&#125;// PC10 IN  MODE</span><br><span class="line">#define DHT11_IO_OUT() &#123;IODHT22_GPIO_Port-&gt;CRH &amp;= 0xFFFFF0FF;IODHT22_GPIO_Port-&gt;CRH |= 3 &lt;&lt; 8;&#125;// PC10 OUT MODE</span><br><span class="line"></span><br><span class="line">IO操作函数</span><br><span class="line">#defineDHT11_DQ_OUT PCout(10) //数据端口PC10</span><br><span class="line">#defineDHT11_DQ_IN  PCin(10)  //数据端口PC10</span><br><span class="line"></span><br><span class="line">u8 DHT11_Init(void);//初始化DHT11</span><br><span class="line">u8 DHT11_Read_Data(u8 *temp, u8 *humi); //读取温湿度</span><br><span class="line">u8 DHT11_Read_Byte(void);//读出一个字节</span><br><span class="line">u8 DHT11_Read_Bit(void);//读出一个位</span><br><span class="line">u8 DHT11_Check(void);//检测是否存在DHT11</span><br><span class="line">void DHT11_Rst(void);//复位DHT11</span><br><span class="line">u8 DHT11_Read_Data_Float(float *temp,float *humi);</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="dht11-c"><a href="#dht11-c" class="headerlink" title="dht11.c"></a>dht11.c</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;dht11.h&quot;</span><br><span class="line"></span><br><span class="line">//复位DHT11</span><br><span class="line">void DHT11_Rst(void)</span><br><span class="line">&#123;</span><br><span class="line">    DHT11_IO_OUT(); //SET OUTPUT</span><br><span class="line">    DHT11_DQ_OUT=0; //拉低DQ</span><br><span class="line">    delay_ms(20);    //拉低至少18ms,(DHT22 500us)</span><br><span class="line">    DHT11_DQ_OUT=1; //DQ=1</span><br><span class="line">    delay_us(30);     //主机拉高20~40us</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//等待DHT11的回应</span><br><span class="line">//返回1:未检测到DHT11的存在</span><br><span class="line">//返回0:存在</span><br><span class="line">u8 DHT11_Check(void)</span><br><span class="line">&#123;</span><br><span class="line">    u8 retry=0;</span><br><span class="line">    DHT11_IO_IN();//SET INPUT</span><br><span class="line">    while (DHT11_DQ_IN&amp;&amp;retry&lt;100)//DHT11会拉低40~80us</span><br><span class="line">    &#123;</span><br><span class="line">        retry++;</span><br><span class="line">        delay_us(1);</span><br><span class="line">    &#125;;</span><br><span class="line">    if(retry&gt;=100)return 1;</span><br><span class="line">    else retry=0;</span><br><span class="line">    while (!DHT11_DQ_IN&amp;&amp;retry&lt;100)//DHT11拉低后会再次拉高40~80us</span><br><span class="line">    &#123;</span><br><span class="line">        retry++;</span><br><span class="line">        delay_us(1);</span><br><span class="line">    &#125;;</span><br><span class="line">    if(retry&gt;=100)return 1;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//从DHT11读取一个位</span><br><span class="line">//返回值：1/0</span><br><span class="line">u8 DHT11_Read_Bit(void)</span><br><span class="line">&#123;</span><br><span class="line">    u8 retry=0;</span><br><span class="line">    while(DHT11_DQ_IN&amp;&amp;retry&lt;100)//等待变为低电平</span><br><span class="line">    &#123;</span><br><span class="line">        retry++;</span><br><span class="line">        delay_us(1);</span><br><span class="line">    &#125;</span><br><span class="line">    retry=0;</span><br><span class="line">    while(!DHT11_DQ_IN&amp;&amp;retry&lt;100)//等待变高电平</span><br><span class="line">    &#123;</span><br><span class="line">        retry++;</span><br><span class="line">        delay_us(1);</span><br><span class="line">    &#125;</span><br><span class="line">    delay_us(40);//等待40us</span><br><span class="line">    if(DHT11_DQ_IN)return 1;</span><br><span class="line">    else return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//从DHT11读取一个字节</span><br><span class="line">//返回值：读到的数据</span><br><span class="line">u8 DHT11_Read_Byte(void)</span><br><span class="line">&#123;</span><br><span class="line">    u8 i,dat;</span><br><span class="line">    dat=0;</span><br><span class="line">    for (i=0; i&lt;8; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dat&lt;&lt;=1;</span><br><span class="line">        dat|=DHT11_Read_Bit();</span><br><span class="line">    &#125;</span><br><span class="line">    return dat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//从DHT11读取一次数据</span><br><span class="line">//temp:温度值(范围:0~50°)</span><br><span class="line">//humi:湿度值(范围:20%~90%)</span><br><span class="line">//返回值：0,正常;1,读取失败</span><br><span class="line">u8 DHT11_Read_Data(u8 *temp,u8 *humi)</span><br><span class="line">&#123;</span><br><span class="line">    u8 buf[5];</span><br><span class="line">    u8 i;</span><br><span class="line">    DHT11_Rst();</span><br><span class="line">    if(DHT11_Check()==0)</span><br><span class="line">    &#123;</span><br><span class="line">        for(i=0; i&lt;5; i++) //读取40位数据</span><br><span class="line">        &#123;</span><br><span class="line">            buf[i]=DHT11_Read_Byte();</span><br><span class="line">        &#125;</span><br><span class="line">        if((buf[0]+buf[1]+buf[2]+buf[3])==buf[4])</span><br><span class="line">        &#123;</span><br><span class="line">            *humi=buf[0];</span><br><span class="line">            *temp=buf[2];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else return 1;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u8 DHT11_Read_Data_Float(float *temp,float *humi)</span><br><span class="line">&#123;</span><br><span class="line">    u8 buf[5];</span><br><span class="line">    u8 i;</span><br><span class="line">    DHT11_Rst();</span><br><span class="line">    if(DHT11_Check()==0)</span><br><span class="line">    &#123;</span><br><span class="line">        for(i=0; i&lt;5; i++) //读取40位数据</span><br><span class="line">        &#123;</span><br><span class="line">            buf[i]=DHT11_Read_Byte();</span><br><span class="line">        &#125;</span><br><span class="line">        if((buf[0]+buf[1]+buf[2]+buf[3])==buf[4])</span><br><span class="line">        &#123;</span><br><span class="line">*humi=((buf[0] &lt;&lt; 8) + buf[1]) / 10.0;</span><br><span class="line">*temp=((buf[2] &lt;&lt; 8) + buf[3]) / 10.0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else return 1;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//初始化DHT11的IO口 DQ 同时检测DHT11的存在</span><br><span class="line">//返回1:不存在</span><br><span class="line">//返回0:存在</span><br><span class="line">u8 DHT11_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">    u8 ret = 1;</span><br><span class="line">    DHT11_Rst();  //复位DHT11</span><br><span class="line">    ret = DHT11_Check();</span><br><span class="line">    printf(&quot;dht11 init %s. \r\n&quot;, ret == 0 ? &quot;ok&quot; : &quot;failed&quot;);</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32CubeMX_|_HAL库的ADC多通道数据采集（轮训、DMA、DMA+TIM)、读取内部传感器温度</title>
      <link href="/2024/03/stm32-STM32CubeMX-HAL%E5%BA%93%E7%9A%84ADC%E5%A4%9A%E9%80%9A%E9%81%93%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%EF%BC%88%E8%BD%AE%E8%AE%AD%E3%80%81DMA%E3%80%81DMA-TIM-%E3%80%81%E8%AF%BB%E5%8F%96%E5%86%85%E9%83%A8%E4%BC%A0%E6%84%9F%E5%99%A8%E6%B8%A9%E5%BA%A6/"/>
      <url>/2024/03/stm32-STM32CubeMX-HAL%E5%BA%93%E7%9A%84ADC%E5%A4%9A%E9%80%9A%E9%81%93%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%EF%BC%88%E8%BD%AE%E8%AE%AD%E3%80%81DMA%E3%80%81DMA-TIM-%E3%80%81%E8%AF%BB%E5%8F%96%E5%86%85%E9%83%A8%E4%BC%A0%E6%84%9F%E5%99%A8%E6%B8%A9%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="STM32CubeMX-HAL库的ADC多通道数据采集（轮训、DMA、DMA-TIM-、读取内部传感器温度"><a href="#STM32CubeMX-HAL库的ADC多通道数据采集（轮训、DMA、DMA-TIM-、读取内部传感器温度" class="headerlink" title="STM32CubeMX | HAL库的ADC多通道数据采集（轮训、DMA、DMA+TIM)、读取内部传感器温度"></a>STM32CubeMX | HAL库的ADC多通道数据采集（轮训、DMA、DMA+TIM)、读取内部传感器温度</h2><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li><p><a href="#STM32CubeMX__HALADCDMADMATIM_0">STM32CubeMX | HAL库的ADC多通道数据采集（轮训、DMA、DMA+TIM)、读取内部传感器温度</a>+ </p></li><li></li><li><p><a href="#1ADC_11">1、ADC简介</a>+ </p></li><li><p><a href="#11__13">1.1 采样定理</a>+ <a href="#12__15">1.2 模式介绍</a>+ <a href="#13__24">1.3 采样时间和采样频率的计算</a></p></li><li><p><a href="#2_56">2、轮训方式的多通道采集</a>+ </p></li><li><p><a href="#21__57">2.1 方式一：间断模式+扫描模式</a>+ <a href="#22__72">2.2 方式二：完全轮训</a></p></li><li><p><a href="#3DMA_108">3、DMA实现多通道采集</a>+ <a href="#4TIMDMA_136">4、TIM+DMA实现多通道采集</a>+ <a href="#5ADC_179">5、补充：内部温度传感器ADC通道</a></p></li></ul><p><em>注：本片文章以STM32F103系列为例，其他系列可能稍有不同。</em></p><h4 id="1、ADC简介"><a href="#1、ADC简介" class="headerlink" title="1、ADC简介"></a>1、ADC简介</h4><h5 id="1-1-采样定理"><a href="#1-1-采样定理" class="headerlink" title="1.1 采样定理"></a>1.1 采样定理</h5><h5 id="1-2-模式介绍"><a href="#1-2-模式介绍" class="headerlink" title="1.2 模式介绍"></a>1.2 模式介绍</h5><ul><li><strong>扫描模式：</strong> 使用STM32CUBEMX配置了多通道后，这一项默认开启且无法设置成关闭。这个模式就是自动扫描你开启的所有通道进行转换，直至转换完。例如你开启了CH0、CH1、CH2、CH3这四个通道，启动转换后ADC会自动将这4个通道全部转换完，但是这种连续性是可以被打断的，所以就引出了间断模式。 +  <strong>连续模式：</strong> 在CUBE中选中ENABLE就是连续模式，DISABLE就是单次模式。开启连续模式后，ADC的转换不由其他控制。例如将ADC设置为了定时器的TGRO触发采样，如果开启连续模式，ADC将忽略定时器的触发采样。（连续转换模式开启后其实就是满频率的采样）。 +  <strong>间断模式：</strong> 可以将多个通道进行<strong>分组采集</strong>，例如你开启了CH0~3这4个通道，假如你设置了间断次数为4，就相当于将4个通道分成了4组，每组1个通道，那么要想采集完这4个通道就需要手动触发4次ADC采集；如果设置了间断次数为2，那么采集完4个通道就需要手动触发2次ADC采集。</li></ul><h5 id="1-3-采样时间和采样频率的计算"><a href="#1-3-采样时间和采样频率的计算" class="headerlink" title="1.3 采样时间和采样频率的计算"></a>1.3 采样时间和采样频率的计算</h5><p><strong>ADC采样两点间隔的时间一定要大于ADC的采样时间！</strong> 采样时间怎么算，下面就细说一下。</p><p>STM32F103一般将时钟配置主频为72M、APB2为72M。ADC挂在APB2时钟总线上，且ADC的时钟不能超过14M。所以一般将ADC的分频设置为6，ADC的时钟主频就为72&#x2F;6&#x3D;12MHz。那么一个周期就是：1&#x2F;12MHz&#x3D;0.0833us。</p><p>以下截图为STM32F1参考手册（手册编号RM0008，可在ST官网直接搜索下载）：</p><p><img src="https://img-blog.csdnimg.cn/84ca12cd9d40459eb3e03c54889e9df3.png" alt="https://img-blog.csdnimg.cn/84ca12cd9d40459eb3e03c54889e9df3.png"></p><p>上图的意思是：ADC对输入电压采样若干个ADC_CLK周期，这些周期可通过ADC_SMPR1和ADC_SMPR2寄存器中的SMP[2:0]位进行修改。每个通道都可以用不同的采样时间进行采样。</p><p><strong>ADC转换时间 &#x3D; 采样时间 + 12.5个周期</strong></p><p>示例： $~~~~~~~~$当ADC时钟主频为14MHz并且采样时间为1.5个周期时：采样时间 &#x3D; 1.5 + 12.5 &#x3D; 14个周期；一个周期的时间为1&#x2F;14MHz，一共14个周期，<strong>1 &#x2F; 14MHz * 14个周期 &#x3D; 1us</strong>，那么此时ADC的采样频率就是1&#x2F;1us&#x3D;1000KHz&#x3D;1MHz，这也是理论上ADC的最大采样频率。</p><p>STM32F1系列的时钟主频一般设置为了12M，采样时间的设置所对应采样频率如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/de1135452e21490a94b671995f48824f.png" alt="https://img-blog.csdnimg.cn/de1135452e21490a94b671995f48824f.png"></p><p>知道了最短时间后，当ADC时钟主频为12M并且采样时间为1.5个周期时，ADC采样两点的时间必须大于1.17us。</p><p>而STM32F031系列的ADC时钟主频为14MHz，采样时间的设置所对应采样频率如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/4616052a159b4c6da44230ee81f9a4a0.png" alt="https://img-blog.csdnimg.cn/4616052a159b4c6da44230ee81f9a4a0.png"></p><p>当ADC时钟主频为14M并且采样时间为1.5个周期时，ADC采样两点的时间必须大于1us。</p><h4 id="2、轮训方式的多通道采集"><a href="#2、轮训方式的多通道采集" class="headerlink" title="2、轮训方式的多通道采集"></a>2、轮训方式的多通道采集</h4><h5 id="2-1-方式一：间断模式-扫描模式"><a href="#2-1-方式一：间断模式-扫描模式" class="headerlink" title="2.1 方式一：间断模式+扫描模式"></a>2.1 方式一：间断模式+扫描模式</h5><p>我开启了通道0、1、2以及内部温度读取通道一共四个通道：</p><p><img src="https://img-blog.csdnimg.cn/20200820144708671.png#pic_center" alt="https://img-blog.csdnimg.cn/20200820144708671.png#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/20200820144717271.png#pic_center" alt="https://img-blog.csdnimg.cn/20200820144717271.png#pic_center"><br> 如果想使用轮训方式并且不使用DMA的多通道采集，那么就要配置为 <strong>【单次模式+间断模式】</strong>，并且将Number Of Discontinuous Conversions为1，也就是每个通道分成了一个组，配置如下图：<br><img src="https://img-blog.csdnimg.cn/20200820145205371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center" alt="https://img-blog.csdnimg.cn/20200820145205371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center"></p><p>由于我这里设置间断数为1，也就是将4个通道分成了4组，那么我每次采集的时候都需要手动去触发ADC采集，也就是调用一次HAL_ADC_Start函数，完整代码如下：</p><p><img src="https://img-blog.csdnimg.cn/2020082014582133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center" alt="https://img-blog.csdnimg.cn/2020082014582133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center"><br> 我将通道0分别接到3.3V和GND上，4通道采集运行效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200820150008132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center" alt="https://img-blog.csdnimg.cn/20200820150008132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center"></p><h5 id="2-2-方式二：完全轮训"><a href="#2-2-方式二：完全轮训" class="headerlink" title="2.2 方式二：完全轮训"></a>2.2 方式二：完全轮训</h5><p>完全使用轮训的方式不能使用<strong>扫描模式</strong>（理论上来说多通道需要使用扫描模式，而不是完全轮训），但是使用STM32CUBEMX配置多通道扫描模式不无法被关闭的，所以我们先用STM32CUBEMX配置成一个通道：<br><img src="https://img-blog.csdnimg.cn/0b4c62f299d54bcf89ba61ea0aee0eca.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeS16aGVuZw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/0b4c62f299d54bcf89ba61ea0aee0eca.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeS16aGVuZw==,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>然后读取ADC采集数值的函数是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">uint16_t ADC_Read(uint32_t Channel)</span><br><span class="line">&#123;</span><br><span class="line">ADC_ChannelConfTypeDef sConfig = &#123;0&#125;;</span><br><span class="line">sConfig.Channel = Channel;                                         /* 通道 */</span><br><span class="line">sConfig.Rank = ADC_REGULAR_RANK_1;                              </span><br><span class="line">sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;                  /* 采样时间 */</span><br><span class="line">if (HAL_ADC_ConfigChannel(&amp;hadc1, &amp;sConfig) != HAL_OK)             </span><br><span class="line">&#123;</span><br><span class="line">Error_Handler();</span><br><span class="line">&#125;</span><br><span class="line">HAL_ADC_Start(&amp;hadc1);</span><br><span class="line">HAL_ADC_PollForConversion(&amp;hadc1, HAL_MAX_DELAY);</span><br><span class="line">return (uint16_t)HAL_ADC_GetValue(&amp;hadc1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">uint16_t ADC_Value[5];</span><br><span class="line"></span><br><span class="line">ADC_Value[0] = ADC_Read(ADC_CHANNEL_1);  // 采集并读取通道1</span><br><span class="line">ADC_Value[1] = ADC_Read(ADC_CHANNEL_4);</span><br><span class="line">ADC_Value[2] = ADC_Read(ADC_CHANNEL_5);</span><br><span class="line">ADC_Value[3] = ADC_Read(ADC_CHANNEL_6);</span><br><span class="line">ADC_Value[4] = ADC_Read(ADC_CHANNEL_7);</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h4 id="3、DMA实现多通道采集"><a href="#3、DMA实现多通道采集" class="headerlink" title="3、DMA实现多通道采集"></a>3、DMA实现多通道采集</h4><p>通过DMA实现多通道数据采集，<strong>要将连续模式和间断模式关闭！</strong></p><p>如果连续模式开启，那么通过DMA传输到的数组中，每个通道所采集到的值对应数组中的一个位置就是不固定的。</p><p>例如你开启了IN0~IN3这四个通道，并通过DMA将这四个通道的数据放到ADC_Value这个大小为4的u16类型数组，</p><p>你在第一次采集的时候IN0通道的数值通过DMA被放在ADC_Value[0]，</p><p>第二次采集的时候IN0采集到的数值就可能被放到了ADC_Value[1]，</p><p>这样的话就极不方便我们对每个通道的数据进行分析和提取。</p><p>配置如下，将连续转换模式和间断转换模式关闭，并开启ADC的DMA通道，将DMA的模式配置为周期模式：</p><p><img src="https://img-blog.csdnimg.cn/20200820152200735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center" alt="https://img-blog.csdnimg.cn/20200820152200735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/ddd590ed84b44942863728c7b84ff639.png" alt="https://img-blog.csdnimg.cn/ddd590ed84b44942863728c7b84ff639.png"></p><p>代码如下：</p><p><img src="https://img-blog.csdnimg.cn/c457e847f73847ceb3a35f112f66667e.png" alt="https://img-blog.csdnimg.cn/c457e847f73847ceb3a35f112f66667e.png"><br> 4个通道采集运行效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200820152427227.png#pic_center" alt="https://img-blog.csdnimg.cn/20200820152427227.png#pic_center"></p><h4 id="4、TIM-DMA实现多通道采集"><a href="#4、TIM-DMA实现多通道采集" class="headerlink" title="4、TIM+DMA实现多通道采集"></a>4、TIM+DMA实现多通道采集</h4><p>在不使用DMA的情况下，定时器控制ADC进行数据采集只能是单通道！如果开启了多通道，读取到的ADC采集值只会是最后一个通道的值！</p><p>所以，要想使用定时器控制ADC采集<strong>多通道</strong>，必须使用DMA！</p><p>CubeMX配置如下，使能ADC的DMA：</p><p><img src="https://img-blog.csdnimg.cn/42aa3e7658df4d89ac32b7f2a1ebc643.png" alt="https://img-blog.csdnimg.cn/42aa3e7658df4d89ac32b7f2a1ebc643.png"></p><p>ADC的触发方式设置为定时器3的触发事件：</p><p><img src="https://img-blog.csdnimg.cn/c4ff90b3330b44fda0a609316e2370db.png" alt="https://img-blog.csdnimg.cn/c4ff90b3330b44fda0a609316e2370db.png"></p><p>采样时间设置为了55.5个周期，对应采样频率为176.47KHz，所以定时器3的频率设置要低于176.47KHz。</p><p>设置定时器3分频系数为72，重载值为10，得到<code>72MHz / 72分频 / 10 = 100KHz</code>的定时器3：</p><p><img src="https://img-blog.csdnimg.cn/a50e71979339457e90f451449ec69d86.png" alt="https://img-blog.csdnimg.cn/a50e71979339457e90f451449ec69d86.png"></p><p>代码如下：</p><p><img src="https://img-blog.csdnimg.cn/c418cbe4d5b340a2ae94438927728da5.png" alt="https://img-blog.csdnimg.cn/c418cbe4d5b340a2ae94438927728da5.png"></p><p>运行结果如下：</p><p><img src="https://img-blog.csdnimg.cn/534899ff62e24bcb9909ffaff4b29065.png" alt="https://img-blog.csdnimg.cn/534899ff62e24bcb9909ffaff4b29065.png"></p><p>当然也可以选择进行一组数据，例如将32个点为一组数据进行采集，设置如下：</p><p><img src="https://img-blog.csdnimg.cn/a08aa8f0ae7c4cd8bfd70d40a980b3e1.png" alt="https://img-blog.csdnimg.cn/a08aa8f0ae7c4cd8bfd70d40a980b3e1.png"></p><p>运行结果如下：</p><p><img src="https://img-blog.csdnimg.cn/eb3feca6e37140eeb65f794634e86da3.png" alt="https://img-blog.csdnimg.cn/eb3feca6e37140eeb65f794634e86da3.png"></p><h4 id="5、补充：内部温度传感器ADC通道"><a href="#5、补充：内部温度传感器ADC通道" class="headerlink" title="5、补充：内部温度传感器ADC通道"></a>5、补充：内部温度传感器ADC通道</h4><p><img src="https://img-blog.csdnimg.cn/87fe51b0eb7b447798ade02be31b4329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/87fe51b0eb7b447798ade02be31b4329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70"><br> 上面图片是截取在STM32F103RC的datasheet中的，中文意思就是：温度传感器必须产生随温度线性变化的电压。转换范围在2v &lt; VDDA &lt; 3.6 V之间。温度传感器内部连接ADC1_IN16输入通道，用于将传感器输出电压转换为数字值。</p><p>内部温度计算公式：</p><p>【Temperature &#x3D; {(V25 - VSENSE) &#x2F; Avg_Slope} + 25】</p><p>字段说明：</p><ul><li><strong>V25：</strong> 最小1.34V，最大1.52V，典型值1.43V+ <strong>Avg_Slope：</strong> 最小4.0，最大4.6，典型值4.3mv&#x2F;℃+ <strong>VSENSE：</strong> ADC采集到的电压<br><img src="https://img-blog.csdnimg.cn/da0745b68e874c41b42573887a74e20e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/da0745b68e874c41b42573887a74e20e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70"></li></ul><p>ADC值转电压值计算公式：【电压 &#x3D; ADC采集到的值 * 3.3 &#x2F; 4096】</p><p>看上图我采集到的值为1703，先转换为电压值：1703*3.3&#x2F;4096≈1.37</p><p><strong>（1.43 - 1.37）&#x2F; 0.0043 + 25 ≈ 38.95℃</strong></p><p>ends…</p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>module</title>
      <link href="/2024/03/daily/"/>
      <url>/2024/03/daily/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/03/C%E8%AF%AD%E8%A8%80-1-C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2024/03/C%E8%AF%AD%E8%A8%80-1-C%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言基本概念"><a href="#C语言基本概念" class="headerlink" title="C语言基本概念"></a>C语言基本概念</h1><h2 id="1-标识符"><a href="#1-标识符" class="headerlink" title="1.标识符"></a>1.标识符</h2><p>&emsp;&emsp;标识符是我们在编程时使用的名字，比如指定某个东西、人，都要用到它，他或她的名字。在电脑语言中，对于变量，常量，函数，语句块也有名字，统统称为标识符。需要注意的是标识符只能由三种字符组成，<font color="red">字母、数字和下划线</font>且第一个字符必须是字母或下划线。</p><h2 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2.关键字"></a>2.关键字</h2><p>&emsp;&emsp;C语言的关键字共有32个，根据关键字的作用，可分其为数据类型关键字、控制语句关键字、存储类型关键字和其它关键字四类。</p><h3 id="1、数据类型关键字（12个）："><a href="#1、数据类型关键字（12个）：" class="headerlink" title="1、数据类型关键字（12个）："></a>1、数据类型关键字（12个）：</h3><pre><code>(1) char ：声明字符型变量或函数(2) double ：声明双精度变量或函数(3) enum ：声明枚举类型(4) float：声明浮点型变量或函数(5) int： 声明整型变量或函数(6) long ：声明长整型变量或函数(7) short ：声明短整型变量或函数(8) signed：声明有符号类型变量或函数(9) struct：声明结构体变量或函数(10) union：声明联合数据类型(11) unsigned：声明无符号类型变量或函数(12) void ：声明函数无返回值或无参数，声明无类型指针（基本上就这三个作用）</code></pre><p><font color="red">&emsp;&emsp;需要注意的是，C语言没有字符串类型。</font></p><h3 id="2、控制语句关键字（12个）："><a href="#2、控制语句关键字（12个）：" class="headerlink" title="2、控制语句关键字（12个）："></a>2、控制语句关键字（12个）：</h3><p>A、循环语句 ：</p><pre><code>(1) for：一种循环语句(可意会不可言传） (2) do ：循环语句的循环体 (3) while ：循环语句的循环条件 (4) break：跳出当前循环 (5) continue：结束当前循环，开始下一轮循环</code></pre><p>B、条件语句：</p><pre><code>(1)if: 条件语句 (2)else ：条件语句否定分支（与 if 连用） (3)goto：无条件跳转语句</code></pre><p>C、开关语句： </p><pre><code>(1)switch :用于开关语句 (2)case：开关语句分支 (3)default：开关语句中的“其他”分支</code></pre><p>D、程序返回语句：</p><pre><code>return ：子程序返回语句（可以带参数，也看不带参数）</code></pre><h3 id="3、预定义标识符"><a href="#3、预定义标识符" class="headerlink" title="3、预定义标识符"></a>3、预定义标识符</h3><pre><code>(1)auto ：声明自动变量 一般不使用，使用数据类型关键词声明变量，默认即为auto(2)extern：声明变量是在其他文件正声明（也可以看做是引用变量）(3)register：声明积存器变量(4)static ：声明静态变量</code></pre><h3 id="4、-其它关键字（4个）："><a href="#4、-其它关键字（4个）：" class="headerlink" title="4、 其它关键字（4个）："></a>4、 其它关键字（4个）：</h3><pre><code>(1)const ：声明只读变量(2)sizeof：计算数据类型长度(3)typedef：用以给数据类型取别名（当然还有其他作用(4)volatile：说明变量在程序执行中可被隐含地改变。使用此关键字声明变量可以避免变量因为被优化而导致程序出错。</code></pre><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h2><pre><code>    对不变的值，C语言中用常量概念来表示，可变的值，C语言中使用变量的概念来表示。对C语言编译器来说，常量的一般形式为：1.数字：1, 2, 3, 4...2.字符：&#39;a&#39;, &#39;b&#39;, &#39;c&#39;...3.字符串: &quot;hello&quot;, &quot;world&quot;...4 const修饰的常变量5 #define定义的标识符常量6 枚举常量    前三类可以统称为字面常量。除此之外，C编译器在编译的时候会将除了保留关键字所有的字符串认为是变量。如果变量没有定义却使用了就会报错。</code></pre><h3 id="1-定义一个变量"><a href="#1-定义一个变量" class="headerlink" title="1.定义一个变量"></a>1.定义一个变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> age = <span class="number">150</span>;#定义一个整形变量</span><br><span class="line"><span class="type">float</span> weight = <span class="number">45.5f</span>;<span class="comment">//这里后面必须加上f,否则编译器会认为是双精度</span></span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;#定义一个字符型变量</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;此外，上文曾经说过变量的命名只能由字母（包括大写和小写）、数字和下划线_组成，且不能以数字开头，长度不能超过63个字符，变量中区分大小写，变量名不能使用关键字。</p><h3 id="2-将变量值打印出来"><a href="#2-将变量值打印出来" class="headerlink" title="2.将变量值打印出来"></a>2.将变量值打印出来</h3><p>&emsp;&emsp;打印变量一般使用printf()函数,举例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value of a is %d\r\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value of b is %d\r\n&quot;</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你还没有系统的学习过C语言或其他编程语言，那么现在你可能对上面的代码一头雾水，但请不要退缩，在下面我们会详细的解释上述代码。他并没有你想象的那么晦涩难懂。</p><h3 id="3-变量的分类"><a href="#3-变量的分类" class="headerlink" title="3.变量的分类"></a>3.变量的分类</h3><p>&emsp;&emsp;变量分为局部变量与全局变量，当重名的时候，局部变量优先使用（就近原则），但是还请尽量避免出现全局变量与局部变量重名的情况，因为这可能会干扰到我们思考程序逻辑。</p><h3 id="4-变量的作用域和生命周期"><a href="#4-变量的作用域和生命周期" class="headerlink" title="4. 变量的作用域和生命周期"></a>4. 变量的作用域和生命周期</h3><p>&emsp;&emsp;作用域（scope）是程序设计概念，通常来说，一段程序代码中所用到的名字并不总是有效&#x2F;可用的而限定这个名字的可用性的代码范围就是这个名字的作用域。</p><pre><code>1.局部变量的作用域是变量所在的局部范围2.全局变量的作用域是整个工程</code></pre><p>&emsp;&emsp;变量的生命周期指的是变量的创建到变量的销毁之间的一个时间段</p><pre><code>1.局部变量的生命周期是：进入作用域生命周期开始，出作用域生命周期结束2.全局变量的生命周期是：整个程序的生命周期</code></pre><h3 id="5-常量"><a href="#5-常量" class="headerlink" title="5.常量"></a>5.常量</h3><p>&emsp;&emsp;C语言的常量分为以下几种</p><pre><code>• 字面常量• const修饰的常变量• #define定义的标识符常量• 枚举常量</code></pre><h2 id="4-字符串、转义字符与注释"><a href="#4-字符串、转义字符与注释" class="headerlink" title="4. 字符串、转义字符与注释"></a>4. 字符串、转义字符与注释</h2><h3 id="4-1-字符串"><a href="#4-1-字符串" class="headerlink" title="4.1 字符串"></a>4.1 字符串</h3><p>&emsp;&emsp;由双引号引起来的一串字符成为字符串字面值，或者简称字符串。字符串的结束标志是一个’\0’的转义字符，在计算字符串的长度的时候\0是结束标志，不算作字符串的内容。</p><h3 id="4-2-转义字符："><a href="#4-2-转义字符：" class="headerlink" title="4.2 转义字符："></a>4.2 转义字符：</h3><p>常用的转义字符：</p><table><thead><tr><th>转义字符</th><th>释义</th></tr></thead><tbody><tr><td><code>?</code></td><td>在书写连续多个问号是使用，防止被解析成三字母符</td></tr><tr><td><code>&#39;</code></td><td>用于表示字符常量的单引号</td></tr><tr><td><code>&quot;</code></td><td>用于表示字符串内部的双引号</td></tr><tr><td><code>|</code></td><td>用于表示一个反斜杠，防止解析成一个转义序列符</td></tr><tr><td><code>\a</code></td><td>警告字符，蜂鸣</td></tr><tr><td><code>\b</code></td><td>退格符</td></tr><tr><td><code>\f</code></td><td>进纸符</td></tr><tr><td><code>\n</code></td><td>换行</td></tr><tr><td><code>\r</code></td><td>回车</td></tr><tr><td><code>\t</code></td><td>水平制表符</td></tr><tr><td><code>\v</code></td><td>垂直制表符</td></tr><tr><td><code>\ddd</code></td><td>ddd表示1-3个8进制的数字</td></tr><tr><td><code>\xdd</code></td><td>dd表示1-2个8进制的数字</td></tr></tbody></table><h3 id="4-3-注释"><a href="#4-3-注释" class="headerlink" title="4.3 注释"></a>4.3 注释</h3><p>注释有两种风格：</p><p>&emsp;&emsp;1.C语言风格的注释</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我不会被编译器看到</span></span><br><span class="line"><span class="comment">我也不会被编译器看到</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这种注释风格有一个缺陷：不能嵌套注释</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我不会被编译器看到</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我不会被编译器看到</span></span><br><span class="line"><span class="comment">我也不会被编译器看到</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">我会被编译器看到，而且下方横杠也会被编译器看到</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;2.C++风格的注释</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我不会被编译器看到</span></span><br><span class="line">我会被编译器看到</span><br><span class="line"><span class="comment">//我不会被编译器看到</span></span><br><span class="line"><span class="comment">//我不会被编译器看到</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【STM32】HAL库_STM32CubeMX教程十三---RTC时钟</title>
      <link href="/2024/03/%E3%80%90STM32%E3%80%91HAL%E5%BA%93_STM32CubeMX%E6%95%99%E7%A8%8B%E5%8D%81%E4%B8%89---RTC%E6%97%B6%E9%92%9F/"/>
      <url>/2024/03/%E3%80%90STM32%E3%80%91HAL%E5%BA%93_STM32CubeMX%E6%95%99%E7%A8%8B%E5%8D%81%E4%B8%89---RTC%E6%97%B6%E9%92%9F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>前言：</p><p>本系列教程将 对应外设原理，HAL库与STM32CubeMX结合在一起讲解，使您可以更快速的学会各个模块的使用</p><p>所用工具：</p><p>1、芯片： STM32F407ZET6&#x2F; STM32F103ZET6</p><p>2、STM32CubeMx软件</p><p>3、IDE： MDK-Keil软件</p><p>4、STM32F1xx&#x2F;STM32F4xxHAL库</p><p>知识概括：</p><p>通过本篇博客您将学到：</p><p>RTC时钟原理</p><p>STM32CubeMX创建RTC例程</p><p>HAL库定时器RTC函数库</p><p><strong>PS: 这里的RTC讲解，我们只将原理，不讲寄存器，如果要看RTC的寄存器，请看这篇文章</strong> <a href="https://blog.csdn.net/as480133937/article/details/105026033">【STM32】RTC实时时钟，步骤超细详解，一文看懂RTC</a></p><h3 id="什么是RTC"><a href="#什么是RTC" class="headerlink" title="什么是RTC"></a>什么是RTC</h3><p>**RTC (Real Time Clock)**：实时时钟</p><p><strong>RTC是个独立的定时器</strong>。RTC模块拥有一个连续计数的计数器，在相应的软件配置下，可以提供时钟日历的功能。修改计数器的值可以重新设置当前时间和日期 RTC还包含用于管理低功耗模式的自动唤醒单元。</p><p><img src="https://img-blog.csdnimg.cn/20200423215123488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200423215123488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p><strong>在断电情况下 RTC仍可以独立运行 只要芯片的备用电源一直供电,RTC上的时间会一直走。</strong></p><p>RTC实质是一个掉电后还继续运行的定时器,从定时器的角度来看,相对于通用定时器TIM外设,它的功能十分简单,只有计时功能(也可以触发中断)。但其高级指出也就在于掉电之后还可以正常运行。</p><p>两个 32 位寄存器包含二进码十进数格式 (BCD) 的秒、分钟、小时（ 12 或 24 小时制）、星期几、日期、月份和年份。此外，还可提供二进制格式的亚秒值。系统可以自动将月份的天数补偿为 28、29（闰年）、30 和 31 天。</p><p>上电复位后，所有RTC寄存器都会受到保护，以防止可能的非正常写访问。</p><p>无论器件状态如何（运行模式、低功耗模式或处于复位状态），只要电源电压保持在工作范围内，RTC使不会停止工作。</p><h4 id="RCT特征："><a href="#RCT特征：" class="headerlink" title="RCT特征："></a><strong>RCT特征：</strong></h4><p>● <strong>可编程的预分频系数：分频系数高为220。</strong> ● <strong>32位的可编程计数器，可用于较长时间段的测量。</strong> ● <strong>2个分离的时钟：用于APB1接口的PCLK1和RTC时钟(RTC时钟的频率必须小于PCLK1时钟 频率的四分之一以上)。</strong> ● 可以选择以下<strong>三种RTC的时钟源</strong>：      ● HSE时钟除以128；      ● LSE振荡器时钟；      ● LSI振荡器时钟</p><p>● <strong>2个独立的复位类型：</strong>      ● APB1接口由系统复位；      ● RTC核心(预分频器、闹钟、计数器和分频器)只能由后备域复位</p><p>● <strong>3个专门的可屏蔽中断：</strong>      ● 1.<strong>闹钟中断</strong>，用来产生一个软件可编程的闹钟中断。</p><p>     ● 2.<strong>秒中断</strong>，用来产生一个可编程的周期性中断信号(长可达1秒)。</p><p>     ● 3.<strong>溢出中断</strong>，指示内部可编程计数器溢出并回转为0的状态。</p><p><strong>RTC时钟源：</strong> 三种不同的时钟源可被用来驱动系统时钟(SYSCLK)：</p><p>● <strong>HSI振荡器时钟</strong> ● <strong>HSE振荡器时钟</strong> ● <strong>PLL时钟</strong></p><p>这些设备有以下2种二级时钟源：</p><p>● 40kHz低速内部RC，可以用于驱动独立看门狗和通过程序选择驱动RTC。 RTC用于从停机&#x2F;待机模式下自动唤醒系统。 ● 32.768kHz低速外部晶体也可用来通过程序选择驱动RTC(RTCCLK)。</p><h4 id="RTC原理框图"><a href="#RTC原理框图" class="headerlink" title="RTC原理框图"></a>RTC原理框图</h4><p><img src="https://img-blog.csdnimg.cn/20200322144525734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200322144525734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"><br> RTC时钟的框图还是比较简单的，这里我们把他分成 <strong><code>两个部分</code></strong>:</p><p><strong>APB1 接口</strong>：用来和 APB1 总线相连。 此单元还包含一组 16 位寄存器，可通过 APB1 总线对其进行读写操作。APB1 接口由 APB1 总 线时钟驱动，用来与 APB1 总线连接。</p><p>通过APB1接口可以访问RTC的相关寄存器（预分频值，计数器值，闹钟值）。</p><p><strong>RTC 核心接口</strong>：由一组可编程计数器组成，分成 <strong><code>两个主要模块</code></strong> 。<br><img src="https://img-blog.csdnimg.cn/20200322223612113.png" alt="https://img-blog.csdnimg.cn/20200322223612113.png"><br>g) <strong>第一个模块是 RTC 的 预分频模块</strong>，它可编程产生 1 秒的 RTC 时间基准 TR_CLK。RTC 的预分频模块包含了一个 20 位的可编程分频器(RTC 预分频器)。如果在 RTC_CR 寄存器中设置了相应的允许位，则在每个 TR_CLK 周期中 RTC 产生一个中断(秒中断)。<br><img src="https://img-blog.csdnimg.cn/2020032222362770.png" alt="https://img-blog.csdnimg.cn/2020032222362770.png"><br> <strong>第二个模块是一个 32 位的可编程计数器 （RTC_CNT）</strong>，可被初始化为当前的系统时间，一个 32 位的时钟计数器，按秒钟计算，可以记 录 4294967296 秒，约合 136 年左右，作为一般应用，这已经是足够了的。</p><h4 id="RTC具体流程："><a href="#RTC具体流程：" class="headerlink" title="RTC具体流程："></a><strong>RTC具体流程：</strong></h4><p><strong>RTCCLK经过RTC_DIV预分频，RTC_PRL设置预分频系数，然后得到TR_CLK时钟信号，我们一般设置其周期为1s，RTC_CNT计数器计数，假如1970设置为时间起点为0s，通过当前时间的秒数计算得到当前的时间。RTC_ALR是设置闹钟时间，RTC_CNT计数到RTC_ALR就会产生计数中断，</strong></p><ul><li><strong>RTC_Second</strong>为秒中断，用于刷新时间，+ <strong>RTC_Overflow</strong>是溢出中断。+ <strong>RTC Alarm</strong> 控制开关机</li></ul><h4 id="RTC时钟选择"><a href="#RTC时钟选择" class="headerlink" title="RTC时钟选择"></a>RTC时钟选择</h4><p><strong>使用HSE分频时钟或者LSI的时候,在主电源VDD掉电的情况下,这两个时钟来源都会受到影响,因此没法保证RTC正常工作.所以RTC一般都时钟低速外部时钟LSE,频率为实时时钟模块中常用的32.768KHz,因为32768 &#x3D; 2^15,分频容易实现,所以被广泛应用到RTC模块.(在主电源VDD有效的情况下(待机),RTC还可以配置闹钟事件使STM32退出待机模式).</strong></p><h4 id="RTC复位过程"><a href="#RTC复位过程" class="headerlink" title="RTC复位过程"></a>RTC复位过程</h4><p>除了RTC_PRL、RTC_ALR、RTC_CNT和RTC_DIV寄存器外，所有的系统寄存器都由系统复位或电源复位进行异步复位。 RTC_PRL、RTC_ALR、RTC_CNT和RTC_DIV寄存器仅能通过备份域复位信号复位。</p><p><strong>系统复位后,禁止访问后备寄存器和RCT,防止对后卫区域(BKP)的意外写操作</strong></p><h4 id="RTC中断"><a href="#RTC中断" class="headerlink" title="RTC中断"></a>RTC中断</h4><p><strong>秒中断：</strong> 这里时钟自带一个秒中断，每当计数加一的时候就会触发一次秒中断，。注意，这里所说的秒中断并非一定是一秒的时间，它是由RTC时钟源和分频值决定的“秒”的时间，当然也是可以做到1秒钟中断一次。我们通过往秒中断里写更新时间的函数来达到时间同步的效果</p><p><strong>闹钟中断：</strong> 闹钟中断就是设置一个预设定的值，计数每自加多少次触发一次闹钟中断</p><h3 id="CubeMX配置RTC"><a href="#CubeMX配置RTC" class="headerlink" title="CubeMX配置RTC"></a>CubeMX配置RTC</h3><h4 id="工程创建"><a href="#工程创建" class="headerlink" title="工程创建"></a>工程创建</h4><p><strong>1设置RCC</strong><br><img src="https://img-blog.csdnimg.cn/20200425101549368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425101549368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li><strong>设置高速外部时钟HSE 选择外部时钟源</strong>+ <strong>使能外部晶振LSE</strong></li></ul><p><strong>RTC设备因为其独特的运行方式（即掉电依旧运行）使用HSE分频时钟或者LSI的时候,在主电源VDD掉电的情况下,这两个时钟来源都会受到影响，资源消耗太大，小小的纽扣电池根本吃不消。没法保证RTC正常工作.所以RTC一般都时钟低速外部时钟LSE</strong></p><p>2.<strong>配置RTC</strong><br><img src="https://img-blog.csdnimg.cn/20200425110730403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425110730403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li><strong>Activate Clock Source 激活时钟源</strong>+ <strong>Activate calendar激活日历</strong></li></ul><p><strong>这两个都要点，作用也很明显，先是使能时钟源，再使能RTC日历</strong></p><ul><li><strong>RTC_OUT： Not RTC_OUT</strong>+ <strong>Tamper：</strong> <strong>×</strong></li></ul><p>第一个是是否使能 <strong>tamper（PC13）引脚上输出校正的秒脉冲时钟，</strong></p><p>第二个： <strong>RTC入侵检测校验功能</strong></p><p><strong>RTC校验功能，使能侵入检测功能。RTC时钟经64分频输出到侵入检测引脚TAMPER上 当 TAMPER引脚上的信号从 0变成1或者从 1变成 0(取决于备份控制寄存器BKP_CR的 TPAL位)，会产生一个侵入检测事件。侵入检测事件将所有数据备份寄存器内容清除。</strong></p><ul><li>也就是第一个是使能tamper（PC13）引脚作为时钟脉冲输出+ 第二个是使能tamper（PC13）引脚作为入侵检测功能</li></ul><p>下面是两个RTC的中断：</p><ul><li><strong>RTC全局中断RTC_IRQHandler()</strong>+ <strong>闹钟中断函数RTCAlarm_IRQHandler()</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/2020042514381771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/2020042514381771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p><strong>此处设置时间为2020&#x2F;04&#x2F;25 13:30:00</strong></p><ul><li>Data Format: 日期格式</li></ul><p><strong>Binary data format 十六进制 BCD data format BCD码进制</strong></p><p>使用自动配置，初始化时间必须使用BCD data format，原因是库函数存在bug，如果使用Binary data format，月份配置会出错，比如说11月，配置时会赋值为RTC_MONTH_NOVEMBER，而此宏定义值为0x11，也就是说其十进制值为17</p><ul><li><strong>Hours： 小时</strong> +  <strong>Minutes： 分钟</strong> +  <strong>Seconds： 秒</strong> +  <strong>Week Day： 星期</strong> +  <strong>Month 月份</strong> +  <strong>Date： 日期</strong> +  <strong>Year： 年份</strong></li></ul><p><strong>3 使能串口</strong><br><img src="https://img-blog.csdnimg.cn/20200425143944495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425143944495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"><br> <strong>使能一下串口，因为发送日期到上位机</strong></p><p><strong>4时钟源设置</strong><br><img src="https://img-blog.csdnimg.cn/20200425144337169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425144337169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p>我的是 外部晶振为8MHz</p><ul><li>1选择外部时钟HSE 8MHz+ 2PLL锁相环倍频9倍+ 3系统时钟来源选择为PLL+ 4设置APB1分频器为 &#x2F;2+ 5 使能CSS监视时钟+ <strong>6 设置RTC时钟为LSE</strong></li></ul><p>32的时钟树框图 如果不懂的话请看<a href="https://blog.csdn.net/as480133937/article/details/98845509">《【STM32】系统时钟RCC详解(超详细，超全面)》</a></p><p><strong>5项目文件设置</strong><br><img src="https://img-blog.csdnimg.cn/20200425144600886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425144600886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li>1 设置项目名称+ 2 设置存储路径+ 3 选择所用IDE<br><img src="https://img-blog.csdnimg.cn/2020042514462236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/2020042514462236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></li></ul><p><strong>6创建工程文件</strong></p><p><strong>然后点击GENERATE CODE 创建工程</strong></p><p><strong>配置下载工具</strong> 新建的工程所有配置都是默认的 我们需要自行选择下载模式，勾选上下载后复位运行</p><p><img src="https://img-blog.csdnimg.cn/202004251446415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/202004251446415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><h4 id="RTC-HAL库函数"><a href="#RTC-HAL库函数" class="headerlink" title="RTC_HAL库函数"></a>RTC_HAL库函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*设置系统时间*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span> </span><br><span class="line"><span class="comment">/*读取系统时间*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*设置系统日期*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*读取系统日期*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*启动报警功能*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetAlarm</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*设置报警中断*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetAlarm_IT</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*报警时间回调函数*/</span></span><br><span class="line">__weak <span class="keyword">void</span> <span class="title function_">HAL_RTC_AlarmAEventCallback</span><span class="params">(RTC_HandleTypeDef *hrtc)</span></span><br><span class="line"><span class="comment">/*写入后备储存器*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">HAL_RTCEx_BKUPWrite</span><span class="params">(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)</span></span><br><span class="line"><span class="comment">/*读取后备储存器*/</span></span><br><span class="line">uint32_t <span class="title function_">HAL_RTCEx_BKUPRead</span><span class="params">(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister  </span></span><br></pre></td></tr></table></figure><p>我们可以看到前面的四个函数，分别是</p><ul><li><strong>设置系统时间：HAL_RTC_SetTime();</strong>+ <strong>读取系统时间: HAL_RTC_GetTime();</strong>+ <strong>设置系统日期: HAL_RTC_SetDate();</strong>+ <strong>读取系统日期: HAL_RTC_GetDate();</strong></li></ul><p>因为系统的时间和日期开始的时候已经设置过了，所以我们这里只用两个读取函数</p><p> <strong>读取系统时间函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*读取系统时间*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span></span><br></pre></td></tr></table></figure><p>功能： 获取RTC时钟的时间</p><p>参数：</p><ul><li>*hrtc RTC结构体参数 例：&amp;hi2c2 +  <strong>RTC_TimeTypeDef</strong> *sTime： 获取RTC时间的结构体， +  Format： <strong>获取时间的格式</strong> <strong>RTC_FORMAT_BIN 使用16进制 RTC_FORMAT_BCD 使用BCD进制</strong></li></ul><p> <strong>读取系统日期函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*读取系统日期*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br></pre></td></tr></table></figure><p>功能： 获取RTC时钟的日期</p><p>参数：</p><ul><li>*hrtc RTC结构体参数 例：&amp;hi2c2 +  <strong>RTC_DateTypeDef</strong> *sTime： 获取RTC日期的结构体， +  Format： <strong>获取日期的格式</strong> <strong>RTC_FORMAT_BIN 使用16进制 RTC_FORMAT_BCD 使用BCD进制</strong></li></ul><p>在stm32f1xx_hal_rtc.h头文件中，可以找到<code>RTC_TimeTypeDef</code>，<code>RTC_DateTypeDef</code>这两个结构体的成员变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * @brief  RTC Time structure definition</span><br><span class="line">  */</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  uint8_t Hours;            /*!&lt; Specifies the RTC Time Hour.</span><br><span class="line">                                 This parameter must be a number between Min_Data = 0 and Max_Data = 23 */</span><br><span class="line"></span><br><span class="line">  uint8_t Minutes;          /*!&lt; Specifies the RTC Time Minutes.</span><br><span class="line">                                 This parameter must be a number between Min_Data = 0 and Max_Data = 59 */</span><br><span class="line"></span><br><span class="line">  uint8_t Seconds;          /*!&lt; Specifies the RTC Time Seconds.</span><br><span class="line">                                 This parameter must be a number between Min_Data = 0 and Max_Data = 59 */</span><br><span class="line"></span><br><span class="line">&#125; RTC_TimeTypeDef;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * @brief  RTC Date structure definition</span><br><span class="line">  */</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  uint8_t WeekDay;  /*!&lt; Specifies the RTC Date WeekDay (not necessary for HAL_RTC_SetDate).</span><br><span class="line">                         This parameter can be a value of @ref RTC_WeekDay_Definitions */</span><br><span class="line"></span><br><span class="line">  uint8_t Month;    /*!&lt; Specifies the RTC Date Month (in BCD format).</span><br><span class="line">                         This parameter can be a value of @ref RTC_Month_Date_Definitions */</span><br><span class="line"></span><br><span class="line">  uint8_t Date;     /*!&lt; Specifies the RTC Date.</span><br><span class="line">                         This parameter must be a number between Min_Data = 1 and Max_Data = 31 */</span><br><span class="line"></span><br><span class="line">  uint8_t Year;     /*!&lt; Specifies the RTC Date Year.</span><br><span class="line">                         This parameter must be a number between Min_Data = 0 and Max_Data = 99 */</span><br><span class="line"></span><br><span class="line">&#125; RTC_DateTypeDef;</span><br></pre></td></tr></table></figure><p><strong>程序代码：</strong></p><p>main.c</p><p><strong>在main.c中重写fputc函数，使得能够使用printf函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdio.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int fputc(int ch,FILE *f)&#123;</span><br><span class="line"> uint8_t temp[1]=&#123;ch&#125;;</span><br><span class="line"> HAL_UART_Transmit(&amp;huart1,temp,1,2);</span><br><span class="line"> return ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义两个结构体来获取日期和时间：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RTC_DateTypeDef GetData;  //获取日期结构体</span><br><span class="line"></span><br><span class="line">RTC_TimeTypeDef GetTime;   //获取时间结构体</span><br></pre></td></tr></table></figure><p>在while循环中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* Get the RTC current Time */</span><br><span class="line">HAL_RTC_GetTime(&amp;hrtc, &amp;GetTime, RTC_FORMAT_BIN);</span><br><span class="line">   /* Get the RTC current Date */</span><br><span class="line">   HAL_RTC_GetDate(&amp;hrtc, &amp;GetData, RTC_FORMAT_BIN);</span><br><span class="line"></span><br><span class="line">   /* Display date Format : yy/mm/dd */</span><br><span class="line">   printf(&quot;%02d/%02d/%02d\r\n&quot;,2000 + GetData.Year, GetData.Month, GetData.Date);</span><br><span class="line">   /* Display time Format : hh:mm:ss */</span><br><span class="line">   printf(&quot;%02d:%02d:%02d\r\n&quot;,GetTime.Hours, GetTime.Minutes, GetTime.Seconds);</span><br><span class="line"></span><br><span class="line">   printf(&quot;\r\n&quot;);</span><br><span class="line"></span><br><span class="line">   HAL_Delay(1000);</span><br></pre></td></tr></table></figure><p><strong>程序中使用HAL_RTC_GetTime（）,HAL_RTC_GetDate()读取时间和日期，并保存到结构体变量中，然后通过串口输出读取的时间和日期。</strong></p><p><strong>例程测试正常：</strong><br><img src="https://img-blog.csdnimg.cn/20200425153330941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425153330941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><h4 id="RTC掉电重置"><a href="#RTC掉电重置" class="headerlink" title="RTC掉电重置"></a>RTC掉电重置</h4><p>但是呢，在hal库中生成的代码，<strong>每次断电就RTC时间会重置</strong>，每次上电都会重新初始化时间</p><p>因为HAL库设置了一个BKP寄存器保存一个标志。每次单片机启动时都读取这个标志并判断是不是预先设定的值：如度果不是就初始化RTC并设置时间，再设置标志为预期值；如果是预期值就跳过初始化和时间设置，继续执行后面的程序</p><p><strong>所以这里我们只需要每次上电执行RTC初始化之前，将标志设置为预期值即可</strong></p><p><strong>在rtc.c中的RTC_Init修改为以下内容即可</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"> void MX_RTC_Init(void)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN RTC_Init 0 */</span><br><span class="line">RTC_TimeTypeDef time;   //时间结构体参数</span><br><span class="line">RTC_DateTypeDef datebuff;   //日期结构体参数</span><br><span class="line">  /* USER CODE END RTC_Init 0 */</span><br><span class="line"></span><br><span class="line">  RTC_TimeTypeDef sTime = &#123;0&#125;;</span><br><span class="line">  RTC_DateTypeDef DateToUpdate = &#123;0&#125;;</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN RTC_Init 1 */</span><br><span class="line">__HAL_RCC_BKP_CLK_ENABLE();       //开启后备区域时钟</span><br><span class="line">__HAL_RCC_PWR_CLK_ENABLE();  //开启电源时钟</span><br><span class="line">  /* USER CODE END RTC_Init 1 */</span><br><span class="line">  /**Initialize RTC Only </span><br><span class="line">  */</span><br><span class="line">  hrtc.Instance = RTC;</span><br><span class="line">  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;</span><br><span class="line">  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;</span><br><span class="line">  if (HAL_RTC_Init(&amp;hrtc) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN Check_RTC_BKUP */</span><br><span class="line">if(HAL_RTCEx_BKUPRead(&amp;hrtc,RTC_BKP_DR1)!= 0x5051)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  /* USER CODE END Check_RTC_BKUP */</span><br><span class="line"></span><br><span class="line">  /**Initialize RTC and set the Time and Date </span><br><span class="line">  */</span><br><span class="line">  sTime.Hours = 0x14;</span><br><span class="line">  sTime.Minutes = 0x30;</span><br><span class="line">  sTime.Seconds = 0x0;</span><br><span class="line"></span><br><span class="line">  if (HAL_RTC_SetTime(&amp;hrtc, &amp;sTime, RTC_FORMAT_BCD) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;</span><br><span class="line">  DateToUpdate.Month = RTC_MONTH_APRIL;</span><br><span class="line">  DateToUpdate.Date = 0x25;</span><br><span class="line">  DateToUpdate.Year = 0x20;</span><br><span class="line"></span><br><span class="line">  if (HAL_RTC_SetDate(&amp;hrtc, &amp;DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  /* USER CODE BEGIN RTC_Init 2 */</span><br><span class="line"></span><br><span class="line">__HAL_RTC_SECOND_ENABLE_IT(&amp;hrtc,RTC_IT_SEC); //开启RTC时钟秒中断</span><br><span class="line">datebuff = DateToUpdate;  //把日期数据拷贝到自己定义的data中</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR1, 0x5051);//向指定的后备区域寄存器写入数据</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR2, (uint16_t)datebuff.Year);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR3, (uint16_t)datebuff.Month);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR4, (uint16_t)datebuff.Date);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR5, (uint16_t)datebuff.WeekDay);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">datebuff.Year    = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR2);</span><br><span class="line">datebuff.Month   = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR3);</span><br><span class="line">datebuff.Date    = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR4);</span><br><span class="line">datebuff.WeekDay = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR5);</span><br><span class="line">DateToUpdate = datebuff;</span><br><span class="line">if (HAL_RTC_SetDate(&amp;hrtc, &amp;DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line">Error_Handler();</span><br><span class="line">&#125;</span><br><span class="line">__HAL_RTC_SECOND_ENABLE_IT(&amp;hrtc,RTC_IT_SEC); //开启RTC时钟秒中断</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425165901167.gif" alt="https://img-blog.csdnimg.cn/20200425165901167.gif"></p><p><img src="https://img-blog.csdnimg.cn/20200425165904365.gif" alt="https://img-blog.csdnimg.cn/20200425165904365.gif"></p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32 HAL GPIO详细篇</title>
      <link href="/2024/03/stm32-STM32HAL%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94GPIO/"/>
      <url>/2024/03/stm32-STM32HAL%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94GPIO/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><p>GPIO全名为General Purpose Input Output，即通用输入输出。有时候简称为“IO口”。通用，说明它是常见的。输入输出，就是说既能当输入口使用，又能当输出口使用。端口，就是元器件上的一个引脚。</p><p>输入模式和输出模式是GPIO的基本特性，当然GPIO还有其它模式可选。</p><p><img src="https://img-blog.csdnimg.cn/4b4a4a4a754c42a686395c54851dac7f.png" alt="./figures/4b4a4a4a754c42a686395c54851dac7f.png"></p><h3 id="IO耐压问题"><a href="#IO耐压问题" class="headerlink" title="IO耐压问题"></a>IO耐压问题</h3><p>STM32是一款3.3V电压的芯片，IO输出是3.3V,但IO大部分都是可以容忍5V电压输入。一般在芯片手册的“引脚定义”章节可以查看到有FT标识表示该IO可以容忍5V电压输入。</p><p><img src="https://img-blog.csdnimg.cn/417fa39b882b42de99526837d5af45b2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP56W655qE5a6d5a6d,size_20,color_FFFFFF,t_70,g_se,x_16" alt="./figures/417fa39b882b42de99526837d5af45b2.png"></p><h2 id="二、在HAL库中的GPIO的模式"><a href="#二、在HAL库中的GPIO的模式" class="headerlink" title="二、在HAL库中的GPIO的模式"></a>二、在HAL库中的GPIO的模式</h2><h2 id="１、输入模式GPIO＿Input"><a href="#１、输入模式GPIO＿Input" class="headerlink" title="１、输入模式GPIO＿Input"></a>１、输入模式GPIO＿Input</h2><h4 id="上拉或下拉输入（GPIO-Pull-up／Pull-down）："><a href="#上拉或下拉输入（GPIO-Pull-up／Pull-down）：" class="headerlink" title="上拉或下拉输入（GPIO　Pull-up／Pull-down）："></a>上拉或下拉输入（GPIO　Pull-up／Pull-down）：</h4><p>        ｜浮空输入（No　pull－up　and　no　pull－down）：引脚电平是真实的外部连接器件电压，电平有不确定性</p><p>        ｜上拉输入（Pull－up）：默认通过电阻上拉到VCC,不接外部器件时可以读出高电平</p><p>        ｜下拉输入（Pull-down）：默认通过电阻下拉到GND,不接外部器件时可以读出低电平</p><h3 id="２、输出模式GPIO-Out"><a href="#２、输出模式GPIO-Out" class="headerlink" title="２、输出模式GPIO_Out"></a>２、输出模式GPIO_Out</h3><h4 id="默认输出电平（GPIO-output-level）："><a href="#默认输出电平（GPIO-output-level）：" class="headerlink" title="默认输出电平（GPIO　output　level）："></a>默认输出电平（GPIO　output　level）：</h4><p>        ｜低电平（Low）：默认输出低电平</p><p>        ｜高电平（High）：默认输出高电平</p><h4 id="输出类型（GPIO-Mode）："><a href="#输出类型（GPIO-Mode）：" class="headerlink" title="输出类型（GPIO　Mode）："></a>输出类型（GPIO　Mode）：</h4><p>        ｜推挽输出（Output　Push　Pull）：一种使用一对选择性地从相连负载灌电流或者拉电流的器件的电路。</p><p>        ｜开漏输出（Output　Open　Drain）：高电平时没有驱动能力，需要借助外部上拉电阻完成对外驱动。</p><h4 id="上拉或下拉输出（GPIO-Pull-up／Pull-down）："><a href="#上拉或下拉输出（GPIO-Pull-up／Pull-down）：" class="headerlink" title="上拉或下拉输出（GPIO　Pull-up／Pull-down）："></a>上拉或下拉输出（GPIO　Pull-up／Pull-down）：</h4><p>        ｜浮空输出（No　pull－up　and　no　pull－down）：引脚电平是真实的外部连接器件电压，电平有不确定性</p><p>        ｜上拉输出（Pull－up）：默认通过电阻上拉到VCC,不接外部器件时可以输出高电平</p><p>        ｜下拉输出（Pull-down）：默认通过电阻下拉到GND,不接外部器件时可以输出低电平 </p><h4 id="输出频率（Maximum-output-speed）："><a href="#输出频率（Maximum-output-speed）：" class="headerlink" title="输出频率（Maximum　output　speed）："></a>输出频率（Maximum　output　speed）：</h4><p>        ｜低频率输出（LOW）</p><p>        ｜中频率输出（Medium）</p><p>        ｜高频率输出（High）</p><p>        ｜极高频率输出（Very　High）</p><h2 id="三、在CubeMX中修改引脚名称"><a href="#三、在CubeMX中修改引脚名称" class="headerlink" title="三、在CubeMX中修改引脚名称"></a>三、在CubeMX中修改引脚名称</h2><p>        1.在左侧找到System Core-&gt;GPIO；</p><p>        2.找到应对的GPIO，例如PH10；</p><p>        3.在下方的配置单中User Label 填写命名，填好后会在芯片缩略图中更新</p><p>        4.点击 GENERATE CODE 生成代码</p><h2 id="四、常用引脚输入函数"><a href="#四、常用引脚输入函数" class="headerlink" title="四、常用引脚输入函数"></a>四、常用引脚输入函数</h2><p>        函数名：HAL_GPIO_ReadPin(参数1,参数2)</p><p>        函数作用：读取对应的引脚电平</p><p>        返回值：若读取到高电平，则返回GPIO_PIN_SET；反之，读取到低电平，则返回GPIO_PIN_RESET      </p><p>        参数1：GPIOx      对应GPIO总线，其中x可以是A…I，例如PH10，则输入GPIOH</p><p>        参数2：GPIO_Pin   对应引脚数，可以是1…15，例如PH10，则输入GPIO_PIN_10</p><h2 id="五、常用引脚输出函数"><a href="#五、常用引脚输出函数" class="headerlink" title="五、常用引脚输出函数"></a>五、常用引脚输出函数</h2><p>        函数名：HAL_GPIO_WritePin(参数1,参数2,参数3)</p><p>        函数作用：使对应的引脚输出高电平或者低电平</p><p>        返回值：viod</p><p>        参数1：GPIOx      对应GPIO总线，其中x可以是A…I，例如PH10，则输入GPIOH</p><p>        参数2：GPIO_Pin   对应引脚数，可以是1…15，例如PH10，则输入GPIO_PIN_10</p><p>        参数3：PinState    GPIO_PIN_RESET，输出低电平；GPIO_PIN_SET，输出高电平</p><p>（若修改对应引脚的名字，例如PH10修改为LED，则输入 HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,参数3)）</p><h2 id="六、其他常用函数"><a href="#六、其他常用函数" class="headerlink" title="六、其他常用函数"></a>六、其他常用函数</h2><p>        函数名：HAL_GPIO_ToglePin(参数1,参数2)</p><p>        函数作用：翻转对应引脚的电平</p><p>        返回值：viod</p><p>        参数1：GPIOx      对应GPIO总线，其中x可以是A…I，例如PH10，则输入GPIOH</p><p>        参数2：GPIO_Pin   对应引脚数，可以是1…15，例如PH10，则输入GPIO_PIN_10</p><p>        </p><p>        函数名：HAL_Delay(参数1)</p><p>        函数作用：延时</p><p>        返回值：void</p><p>        参数1：常数，单位ms</p><p>参考文章：<a href="https://www.cnblogs.com/dongxiaodong/p/14128088.html">STM32 GPIO详细篇（基于HAL库）</a></p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用教程</title>
      <link href="/2024/03/usageOfHexo/"/>
      <url>/2024/03/usageOfHexo/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo使用教程"><a href="#hexo使用教程" class="headerlink" title="hexo使用教程"></a>hexo使用教程</h1><h2 id="1-发布文章"><a href="#1-发布文章" class="headerlink" title="1. 发布文章"></a>1. 发布文章</h2><p>1.新建文章<br>&emsp;&emsp;使用如下命令来新建文章：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] \&lt;title\&gt; </span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;其中layout是文章的布局，默认为post，可以先不写。title 是文章的标题，也是文件的名字，存储在source&#x2F;_posts下。在编写文章的shi’hshih ，有时候会遇见无法缩进的问题，可以使用如下字符进行缩进：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不换行空格: \&amp;nbsp;或\&amp;#160;</span><br><span class="line">半角空格: \&amp;ensp;或\&amp;#8194;</span><br><span class="line">全角空格: \&amp;emsp;或\&amp;#8195;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;写好文章后，输入如下命令进行发布：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2024/03/linux-common-cmd/"/>
      <url>/2024/03/linux-common-cmd/</url>
      
        <content type="html"><![CDATA[<h1 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h1><h2 id="1-tmux"><a href="#1-tmux" class="headerlink" title="1. tmux"></a>1. tmux</h2><p>1.暂时退出窗口</p><blockquote><p>ctrl + b , d</p></blockquote><p>2.查看tmux历史log</p><blockquote><p>ctrl + b , [<br>此命令会进入到复制模式，可以查看tmux当前窗口的历史log，使用q键可以退出此模式</p></blockquote><p>3.查看当前开了哪些tmux窗口</p><blockquote><p>tmux list-windows</p></blockquote><p>4.重命名当前窗口的名字：</p><blockquote><p>Ctrl + b, ,<br>确保当前处于要重命名的窗口中。按下快捷键 Ctrl + b, , (逗号键)。这会使当前窗口的名称进入编辑状态。</p></blockquote><p>5.切换到别的窗口：</p><blockquote><p>tmux switch-client -t 2:0<br>其中2为作业号，0为窗口号<br>tmux attach-session -t 10<br>此处10为作业号</p></blockquote><h2 id="2-ip命令"><a href="#2-ip命令" class="headerlink" title="2. ip命令"></a>2. ip命令</h2><h2 id="2-1-网络接口管理"><a href="#2-1-网络接口管理" class="headerlink" title="2.1 网络接口管理"></a>2.1 网络接口管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ip <span class="built_in">link</span> show <span class="comment">#显示所有网络接口信息</span></span><br><span class="line">ip <span class="built_in">link</span> show dev eth0 <span class="comment">#显示指定网络接口信息</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 up <span class="comment"># 启用指定网络接口</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 down <span class="comment"># 禁用指定网络接口</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 address 00:11:22:33:44:55 <span class="comment">#设置指定网络接口的mac地址</span></span><br><span class="line">ip addr add 192.168.1.2/24 dev eth0 <span class="comment">#配置ip地址</span></span><br><span class="line">ip addr del 192.168.1.2/24 dev eth0 <span class="comment">#删除ip地址</span></span><br></pre></td></tr></table></figure><h2 id="2-2-路由管理"><a href="#2-2-路由管理" class="headerlink" title="2.2 路由管理"></a>2.2 路由管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip route show <span class="comment">#显示路由表</span></span><br><span class="line">ip route add 192.168.2.0/24 via 192.168.1.1 dev eth0 <span class="comment">#添加静态路由</span></span><br><span class="line">ip route del 192.168.2.0/24 <span class="comment">#删除路由</span></span><br></pre></td></tr></table></figure><h2 id="2-3-arp管理"><a href="#2-3-arp管理" class="headerlink" title="2.3 arp管理"></a>2.3 arp管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip neigh show<span class="comment">#显示arp缓存</span></span><br><span class="line">ip neigh add 192.168.1.1 lladdr 00:11:22:33:44:55 dev eth0 <span class="comment">#添加静态arp</span></span><br><span class="line">ip neigh del 192.168.1.1 dev eth0<span class="comment">#删除arp条目</span></span><br></pre></td></tr></table></figure><h2 id="2-4-其他"><a href="#2-4-其他" class="headerlink" title="2.4 其他"></a>2.4 其他</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w net.ipv4.ip_forward=1 <span class="comment">#启用ip转发</span></span><br><span class="line">ip neigh show <span class="comment">#显示邻居缓存</span></span><br><span class="line">ip -s <span class="built_in">link</span> i希纳是统计信息</span><br></pre></td></tr></table></figure><h2 id="3-brctl"><a href="#3-brctl" class="headerlink" title="3. brctl"></a>3. brctl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brctl show <span class="comment"># 显示网络桥接信息</span></span><br><span class="line">brctl addbr mybridge <span class="comment"># 创建一个新的网络桥接</span></span><br><span class="line">brctl addif mybridge eth0 <span class="comment"># 将网络接口添加到桥接</span></span><br><span class="line">brctl delif mybridge eth0 <span class="comment"># 从桥接中移除网络接口</span></span><br><span class="line">brctl delbr mybridge<span class="comment"># 删除网络桥接</span></span><br></pre></td></tr></table></figure><h2 id="4-du"><a href="#4-du" class="headerlink" title="4. du"></a>4. du</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -sh <span class="comment">#查看当前目录的使用情况</span></span><br><span class="line"><span class="built_in">du</span> -h --max-depth=1<span class="comment">#逐级显示子目录的磁盘使用情况</span></span><br><span class="line"><span class="built_in">du</span> -h --max-depth=1 * <span class="comment">#显示每个文件和目录的磁盘使用情况</span></span><br><span class="line"><span class="built_in">du</span> -h --max-depth=1 | <span class="built_in">sort</span> -h <span class="comment">#按大小排序显示文件和目录</span></span><br></pre></td></tr></table></figure><h2 id="5-sort排序命令"><a href="#5-sort排序命令" class="headerlink" title="5. sort排序命令"></a>5. sort排序命令</h2><p>5.1 经典用法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span> filename <span class="comment">#对文件的每一行信息按照字典顺序排序，并输出到当前目录</span></span><br><span class="line"><span class="built_in">sort</span> -n filename <span class="comment">#对文件的每一行信息按照数字顺序排序，并输出到当前目录</span></span><br><span class="line"><span class="built_in">sort</span> -r filename <span class="comment">#对文件的每一行信息按照字典倒序排序，并输出到当前目录</span></span><br><span class="line"><span class="built_in">sort</span> -u filename <span class="comment">#对文件的每一行信息按照字典顺序并且去重排序，并输出到当前目录</span></span><br><span class="line"><span class="built_in">sort</span> -k&lt;列数&gt; filename <span class="comment">#按列排序</span></span><br><span class="line"><span class="built_in">sort</span> -n -k&lt;列数&gt; filename <span class="comment">#按数字字段排序</span></span><br><span class="line"><span class="built_in">sort</span> -t<span class="string">&#x27;:&#x27;</span> -k2 filename <span class="comment">#自定义分隔符使用 -t 选项指定字段分隔符，例如 :，然后使用 -k 选项按照指定列排序</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;b\na\nc&quot;</span> | <span class="built_in">sort</span> <span class="comment">#从标准输入读取数据并排序</span></span><br></pre></td></tr></table></figure><h2 id="6-i2ctools"><a href="#6-i2ctools" class="headerlink" title="6. i2ctools"></a>6. i2ctools</h2><p>6.1 i2cset命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i2cset -f -y 0x1 0x48 0x03 0x0020 w</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其中,-y 指定了i2c控制器为i2c1，0x48为i2c设备的地址，0x03为寄存器偏移量，他表示了寄存器地址，0x0020为要写入的数据。w表示以字（16 位）为单位读写，还可以选择其他读写单位：b，以字节（8 位）为单位读取；c， 以字符（ASCII）为单位读取。</p><p>6.2 i2cget命令</p><p>&emsp;&emsp;use example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i2cget -y 1 0x48 0x03 w <span class="comment">#以字为单位，读取i2c地址为0x48，寄存器0x03的数据</span></span><br></pre></td></tr></table></figure><h2 id="7-dd"><a href="#7-dd" class="headerlink" title="7.dd"></a>7.dd</h2><p>&emsp;&emsp;命令基本形式：</p><pre><code>    dd if=input_file of=output_file bs=block_size options</code></pre><p>examples:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/dev/mmcblk0gp0 bs=512 count=1024 seek=3072</span><br><span class="line"><span class="comment"># 指定块大小为512，复制块数为1024，跳过输出文件的前3072块。（也就是从输出文件的第3072*512处开始，将输入文件的数据复制进去）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/dev/mmcblk0gp0 bs=512 count=1024 skip=3072</span><br><span class="line"><span class="comment"># 指定块大小为512，复制块数为1024，跳过输入文件的前3072块。（也就是从输入文件的第3072*512处开始，将往后的512*1024块数据复制进输出文件。（从输出文件的0x00地址开始））</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;dd命令还有一些其他的可选命令选项，具体为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">• bs=1024：设置块大小为1024字节，即1KB。这是<span class="built_in">dd</span>每次读取和写入的数据块大小。</span><br><span class="line">• count：指定要复制的块数或数据块的数量。</span><br><span class="line">• skip 在复制之前跳过输入文件的块数或字节数。用于设置输入文件的起始位置，即在输入文件中跳过一定数量的块</span><br><span class="line">• seek：在写入之前跳过输出文件的块数或字节数。用于设置输出文件的起始位置，即在输出文件中跳过一定数量的块</span><br><span class="line">• iflag：设置输入选项，例如iflag=direct表示直接访问输入文件而不进行缓存。</span><br><span class="line">• oflag：设置输出选项，例如oflag=direct表示直接写入输出文件而不进行缓存。</span><br><span class="line">• status=progress：显示复制进度信息</span><br></pre></td></tr></table></figure><h2 id="8-stty命令"><a href="#8-stty命令" class="headerlink" title="8.stty命令"></a>8.stty命令</h2><p>&emsp;&emsp;stty命令可以修改终端驱动程序里的设置，可以用来显示和修改终端命令。下面是它的常见用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stty</span> size;<span class="comment">#显示终端的大小，也就是行数和列数，加上-a可以显示的更加详细。</span></span><br><span class="line"><span class="comment">#此外，有的时候在终端误按ctrl+s导致终端僵死，此时按下ctrl+q便可以使终端回复；</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stty</span> -F /dev/tty0 115200; <span class="comment">#设置串口波特率为115200</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stty</span> -a -F /dev/tty2; <span class="comment">#检查当前串口2的设置</span></span><br></pre></td></tr></table></figure><h2 id="9-使用命令行进行简单的串口通信"><a href="#9-使用命令行进行简单的串口通信" class="headerlink" title="9.使用命令行进行简单的串口通信"></a>9.使用命令行进行简单的串口通信</h2><ol><li>首先使用stty设置串口波特率<blockquote><p>stty -F &#x2F;dev&#x2F;ttyAMA1 115200</p></blockquote></li><li>使用echo向串口发送信息<blockquote><p>echo “Hello world” &gt; &#x2F;dev&#x2F;ttyAMA1 </p></blockquote></li><li>使用cat打印当前串口返回的信息<blockquote><p>cat &#x2F;dev&#x2F;ttyAMA1</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux常用命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
