<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【STM32】HAL库_STM32CubeMX教程十三---RTC时钟</title>
      <link href="/2024/03/stm32-%E3%80%90STM32%E3%80%91HAL%E5%BA%93-STM32CubeMX%E6%95%99%E7%A8%8B%E5%8D%81%E4%B8%89-RTC%E6%97%B6%E9%92%9F/"/>
      <url>/2024/03/stm32-%E3%80%90STM32%E3%80%91HAL%E5%BA%93-STM32CubeMX%E6%95%99%E7%A8%8B%E5%8D%81%E4%B8%89-RTC%E6%97%B6%E9%92%9F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>前言：</p><p>本系列教程将 对应外设原理，HAL库与STM32CubeMX结合在一起讲解，使您可以更快速的学会各个模块的使用</p><p>所用工具：</p><p>1、芯片： STM32F407ZET6&#x2F; STM32F103ZET6</p><p>2、STM32CubeMx软件</p><p>3、IDE： MDK-Keil软件</p><p>4、STM32F1xx&#x2F;STM32F4xxHAL库</p><p>知识概括：</p><p>通过本篇博客您将学到：</p><p>RTC时钟原理</p><p>STM32CubeMX创建RTC例程</p><p>HAL库定时器RTC函数库</p><p><strong>PS: 这里的RTC讲解，我们只将原理，不讲寄存器，如果要看RTC的寄存器，请看这篇文章</strong> <a href="https://blog.csdn.net/as480133937/article/details/105026033">【STM32】RTC实时时钟，步骤超细详解，一文看懂RTC</a></p><h3 id="什么是RTC"><a href="#什么是RTC" class="headerlink" title="什么是RTC"></a>什么是RTC</h3><p>**RTC (Real Time Clock)**：实时时钟</p><p><strong>RTC是个独立的定时器</strong>。RTC模块拥有一个连续计数的计数器，在相应的软件配置下，可以提供时钟日历的功能。修改计数器的值可以重新设置当前时间和日期 RTC还包含用于管理低功耗模式的自动唤醒单元。</p><p><img src="https://img-blog.csdnimg.cn/20200423215123488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200423215123488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p><strong>在断电情况下 RTC仍可以独立运行 只要芯片的备用电源一直供电,RTC上的时间会一直走。</strong></p><p>RTC实质是一个掉电后还继续运行的定时器,从定时器的角度来看,相对于通用定时器TIM外设,它的功能十分简单,只有计时功能(也可以触发中断)。但其高级指出也就在于掉电之后还可以正常运行。</p><p>两个 32 位寄存器包含二进码十进数格式 (BCD) 的秒、分钟、小时（ 12 或 24 小时制）、星期几、日期、月份和年份。此外，还可提供二进制格式的亚秒值。系统可以自动将月份的天数补偿为 28、29（闰年）、30 和 31 天。</p><p>上电复位后，所有RTC寄存器都会受到保护，以防止可能的非正常写访问。</p><p>无论器件状态如何（运行模式、低功耗模式或处于复位状态），只要电源电压保持在工作范围内，RTC使不会停止工作。</p><h4 id="RCT特征："><a href="#RCT特征：" class="headerlink" title="RCT特征："></a><strong>RCT特征：</strong></h4><p>● <strong>可编程的预分频系数：分频系数高为220。</strong> ● <strong>32位的可编程计数器，可用于较长时间段的测量。</strong> ● <strong>2个分离的时钟：用于APB1接口的PCLK1和RTC时钟(RTC时钟的频率必须小于PCLK1时钟 频率的四分之一以上)。</strong> ● 可以选择以下<strong>三种RTC的时钟源</strong>：      ● HSE时钟除以128；      ● LSE振荡器时钟；      ● LSI振荡器时钟</p><p>● <strong>2个独立的复位类型：</strong>      ● APB1接口由系统复位；      ● RTC核心(预分频器、闹钟、计数器和分频器)只能由后备域复位</p><p>● <strong>3个专门的可屏蔽中断：</strong>      ● 1.<strong>闹钟中断</strong>，用来产生一个软件可编程的闹钟中断。</p><p>     ● 2.<strong>秒中断</strong>，用来产生一个可编程的周期性中断信号(长可达1秒)。</p><p>     ● 3.<strong>溢出中断</strong>，指示内部可编程计数器溢出并回转为0的状态。</p><p><strong>RTC时钟源：</strong> 三种不同的时钟源可被用来驱动系统时钟(SYSCLK)：</p><p>● <strong>HSI振荡器时钟</strong> ● <strong>HSE振荡器时钟</strong> ● <strong>PLL时钟</strong></p><p>这些设备有以下2种二级时钟源：</p><p>● 40kHz低速内部RC，可以用于驱动独立看门狗和通过程序选择驱动RTC。 RTC用于从停机&#x2F;待机模式下自动唤醒系统。 ● 32.768kHz低速外部晶体也可用来通过程序选择驱动RTC(RTCCLK)。</p><h4 id="RTC原理框图"><a href="#RTC原理框图" class="headerlink" title="RTC原理框图"></a>RTC原理框图</h4><p><img src="https://img-blog.csdnimg.cn/20200322144525734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200322144525734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"><br> RTC时钟的框图还是比较简单的，这里我们把他分成 <strong><code>两个部分</code></strong>:</p><p><strong>APB1 接口</strong>：用来和 APB1 总线相连。 此单元还包含一组 16 位寄存器，可通过 APB1 总线对其进行读写操作。APB1 接口由 APB1 总 线时钟驱动，用来与 APB1 总线连接。</p><p>通过APB1接口可以访问RTC的相关寄存器（预分频值，计数器值，闹钟值）。</p><p><strong>RTC 核心接口</strong>：由一组可编程计数器组成，分成 <strong><code>两个主要模块</code></strong> 。<br><img src="https://img-blog.csdnimg.cn/20200322223612113.png" alt="https://img-blog.csdnimg.cn/20200322223612113.png"><br>g) <strong>第一个模块是 RTC 的 预分频模块</strong>，它可编程产生 1 秒的 RTC 时间基准 TR_CLK。RTC 的预分频模块包含了一个 20 位的可编程分频器(RTC 预分频器)。如果在 RTC_CR 寄存器中设置了相应的允许位，则在每个 TR_CLK 周期中 RTC 产生一个中断(秒中断)。<br><img src="https://img-blog.csdnimg.cn/2020032222362770.png" alt="https://img-blog.csdnimg.cn/2020032222362770.png"><br> <strong>第二个模块是一个 32 位的可编程计数器 （RTC_CNT）</strong>，可被初始化为当前的系统时间，一个 32 位的时钟计数器，按秒钟计算，可以记 录 4294967296 秒，约合 136 年左右，作为一般应用，这已经是足够了的。</p><h4 id="RTC具体流程："><a href="#RTC具体流程：" class="headerlink" title="RTC具体流程："></a><strong>RTC具体流程：</strong></h4><p><strong>RTCCLK经过RTC_DIV预分频，RTC_PRL设置预分频系数，然后得到TR_CLK时钟信号，我们一般设置其周期为1s，RTC_CNT计数器计数，假如1970设置为时间起点为0s，通过当前时间的秒数计算得到当前的时间。RTC_ALR是设置闹钟时间，RTC_CNT计数到RTC_ALR就会产生计数中断，</strong></p><ul><li><strong>RTC_Second</strong>为秒中断，用于刷新时间，+ <strong>RTC_Overflow</strong>是溢出中断。+ <strong>RTC Alarm</strong> 控制开关机</li></ul><h4 id="RTC时钟选择"><a href="#RTC时钟选择" class="headerlink" title="RTC时钟选择"></a>RTC时钟选择</h4><p><strong>使用HSE分频时钟或者LSI的时候,在主电源VDD掉电的情况下,这两个时钟来源都会受到影响,因此没法保证RTC正常工作.所以RTC一般都时钟低速外部时钟LSE,频率为实时时钟模块中常用的32.768KHz,因为32768 &#x3D; 2^15,分频容易实现,所以被广泛应用到RTC模块.(在主电源VDD有效的情况下(待机),RTC还可以配置闹钟事件使STM32退出待机模式).</strong></p><h4 id="RTC复位过程"><a href="#RTC复位过程" class="headerlink" title="RTC复位过程"></a>RTC复位过程</h4><p>除了RTC_PRL、RTC_ALR、RTC_CNT和RTC_DIV寄存器外，所有的系统寄存器都由系统复位或电源复位进行异步复位。 RTC_PRL、RTC_ALR、RTC_CNT和RTC_DIV寄存器仅能通过备份域复位信号复位。</p><p><strong>系统复位后,禁止访问后备寄存器和RCT,防止对后卫区域(BKP)的意外写操作</strong></p><h4 id="RTC中断"><a href="#RTC中断" class="headerlink" title="RTC中断"></a>RTC中断</h4><p><strong>秒中断：</strong> 这里时钟自带一个秒中断，每当计数加一的时候就会触发一次秒中断，。注意，这里所说的秒中断并非一定是一秒的时间，它是由RTC时钟源和分频值决定的“秒”的时间，当然也是可以做到1秒钟中断一次。我们通过往秒中断里写更新时间的函数来达到时间同步的效果</p><p><strong>闹钟中断：</strong> 闹钟中断就是设置一个预设定的值，计数每自加多少次触发一次闹钟中断</p><h3 id="CubeMX配置RTC"><a href="#CubeMX配置RTC" class="headerlink" title="CubeMX配置RTC"></a>CubeMX配置RTC</h3><h4 id="工程创建"><a href="#工程创建" class="headerlink" title="工程创建"></a>工程创建</h4><p><strong>1设置RCC</strong><br><img src="https://img-blog.csdnimg.cn/20200425101549368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425101549368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li><strong>设置高速外部时钟HSE 选择外部时钟源</strong>+ <strong>使能外部晶振LSE</strong></li></ul><p><strong>RTC设备因为其独特的运行方式（即掉电依旧运行）使用HSE分频时钟或者LSI的时候,在主电源VDD掉电的情况下,这两个时钟来源都会受到影响，资源消耗太大，小小的纽扣电池根本吃不消。没法保证RTC正常工作.所以RTC一般都时钟低速外部时钟LSE</strong></p><p>2.<strong>配置RTC</strong><br><img src="https://img-blog.csdnimg.cn/20200425110730403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425110730403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li><strong>Activate Clock Source 激活时钟源</strong>+ <strong>Activate calendar激活日历</strong></li></ul><p><strong>这两个都要点，作用也很明显，先是使能时钟源，再使能RTC日历</strong></p><ul><li><strong>RTC_OUT： Not RTC_OUT</strong>+ <strong>Tamper：</strong> <strong>×</strong></li></ul><p>第一个是是否使能 <strong>tamper（PC13）引脚上输出校正的秒脉冲时钟，</strong></p><p>第二个： <strong>RTC入侵检测校验功能</strong></p><p><strong>RTC校验功能，使能侵入检测功能。RTC时钟经64分频输出到侵入检测引脚TAMPER上 当 TAMPER引脚上的信号从 0变成1或者从 1变成 0(取决于备份控制寄存器BKP_CR的 TPAL位)，会产生一个侵入检测事件。侵入检测事件将所有数据备份寄存器内容清除。</strong></p><ul><li>也就是第一个是使能tamper（PC13）引脚作为时钟脉冲输出+ 第二个是使能tamper（PC13）引脚作为入侵检测功能</li></ul><p>下面是两个RTC的中断：</p><ul><li><strong>RTC全局中断RTC_IRQHandler()</strong>+ <strong>闹钟中断函数RTCAlarm_IRQHandler()</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/2020042514381771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/2020042514381771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p><strong>此处设置时间为2020&#x2F;04&#x2F;25 13:30:00</strong></p><ul><li>Data Format: 日期格式</li></ul><p><strong>Binary data format 十六进制 BCD data format BCD码进制</strong></p><p>使用自动配置，初始化时间必须使用BCD data format，原因是库函数存在bug，如果使用Binary data format，月份配置会出错，比如说11月，配置时会赋值为RTC_MONTH_NOVEMBER，而此宏定义值为0x11，也就是说其十进制值为17</p><ul><li><strong>Hours： 小时</strong> +  <strong>Minutes： 分钟</strong> +  <strong>Seconds： 秒</strong> +  <strong>Week Day： 星期</strong> +  <strong>Month 月份</strong> +  <strong>Date： 日期</strong> +  <strong>Year： 年份</strong></li></ul><p><strong>3 使能串口</strong><br><img src="https://img-blog.csdnimg.cn/20200425143944495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425143944495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"><br> <strong>使能一下串口，因为发送日期到上位机</strong></p><p><strong>4时钟源设置</strong><br><img src="https://img-blog.csdnimg.cn/20200425144337169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425144337169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p>我的是 外部晶振为8MHz</p><ul><li>1选择外部时钟HSE 8MHz+ 2PLL锁相环倍频9倍+ 3系统时钟来源选择为PLL+ 4设置APB1分频器为 &#x2F;2+ 5 使能CSS监视时钟+ <strong>6 设置RTC时钟为LSE</strong></li></ul><p>32的时钟树框图 如果不懂的话请看<a href="https://blog.csdn.net/as480133937/article/details/98845509">《【STM32】系统时钟RCC详解(超详细，超全面)》</a></p><p><strong>5项目文件设置</strong><br><img src="https://img-blog.csdnimg.cn/20200425144600886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425144600886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li>1 设置项目名称+ 2 设置存储路径+ 3 选择所用IDE<br><img src="https://img-blog.csdnimg.cn/2020042514462236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/2020042514462236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></li></ul><p><strong>6创建工程文件</strong></p><p><strong>然后点击GENERATE CODE 创建工程</strong></p><p><strong>配置下载工具</strong> 新建的工程所有配置都是默认的 我们需要自行选择下载模式，勾选上下载后复位运行</p><p><img src="https://img-blog.csdnimg.cn/202004251446415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/202004251446415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><h4 id="RTC-HAL库函数"><a href="#RTC-HAL库函数" class="headerlink" title="RTC_HAL库函数"></a>RTC_HAL库函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*设置系统时间*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span> </span><br><span class="line"><span class="comment">/*读取系统时间*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*设置系统日期*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*读取系统日期*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*启动报警功能*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetAlarm</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*设置报警中断*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetAlarm_IT</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*报警时间回调函数*/</span></span><br><span class="line">__weak <span class="keyword">void</span> <span class="title function_">HAL_RTC_AlarmAEventCallback</span><span class="params">(RTC_HandleTypeDef *hrtc)</span></span><br><span class="line"><span class="comment">/*写入后备储存器*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">HAL_RTCEx_BKUPWrite</span><span class="params">(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)</span></span><br><span class="line"><span class="comment">/*读取后备储存器*/</span></span><br><span class="line">uint32_t <span class="title function_">HAL_RTCEx_BKUPRead</span><span class="params">(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister  </span></span><br></pre></td></tr></table></figure><p>我们可以看到前面的四个函数，分别是</p><ul><li><strong>设置系统时间：HAL_RTC_SetTime();</strong>+ <strong>读取系统时间: HAL_RTC_GetTime();</strong>+ <strong>设置系统日期: HAL_RTC_SetDate();</strong>+ <strong>读取系统日期: HAL_RTC_GetDate();</strong></li></ul><p>因为系统的时间和日期开始的时候已经设置过了，所以我们这里只用两个读取函数</p><p> <strong>读取系统时间函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*读取系统时间*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span></span><br></pre></td></tr></table></figure><p>功能： 获取RTC时钟的时间</p><p>参数：</p><ul><li>*hrtc RTC结构体参数 例：&amp;hi2c2 +  <strong>RTC_TimeTypeDef</strong> *sTime： 获取RTC时间的结构体， +  Format： <strong>获取时间的格式</strong> <strong>RTC_FORMAT_BIN 使用16进制 RTC_FORMAT_BCD 使用BCD进制</strong></li></ul><p> <strong>读取系统日期函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*读取系统日期*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br></pre></td></tr></table></figure><p>功能： 获取RTC时钟的日期</p><p>参数：</p><ul><li>*hrtc RTC结构体参数 例：&amp;hi2c2 +  <strong>RTC_DateTypeDef</strong> *sTime： 获取RTC日期的结构体， +  Format： <strong>获取日期的格式</strong> <strong>RTC_FORMAT_BIN 使用16进制 RTC_FORMAT_BCD 使用BCD进制</strong></li></ul><p>在stm32f1xx_hal_rtc.h头文件中，可以找到<code>RTC_TimeTypeDef</code>，<code>RTC_DateTypeDef</code>这两个结构体的成员变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * @brief  RTC Time structure definition</span><br><span class="line">  */</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  uint8_t Hours;            /*!&lt; Specifies the RTC Time Hour.</span><br><span class="line">                                 This parameter must be a number between Min_Data = 0 and Max_Data = 23 */</span><br><span class="line"></span><br><span class="line">  uint8_t Minutes;          /*!&lt; Specifies the RTC Time Minutes.</span><br><span class="line">                                 This parameter must be a number between Min_Data = 0 and Max_Data = 59 */</span><br><span class="line"></span><br><span class="line">  uint8_t Seconds;          /*!&lt; Specifies the RTC Time Seconds.</span><br><span class="line">                                 This parameter must be a number between Min_Data = 0 and Max_Data = 59 */</span><br><span class="line"></span><br><span class="line">&#125; RTC_TimeTypeDef;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * @brief  RTC Date structure definition</span><br><span class="line">  */</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  uint8_t WeekDay;  /*!&lt; Specifies the RTC Date WeekDay (not necessary for HAL_RTC_SetDate).</span><br><span class="line">                         This parameter can be a value of @ref RTC_WeekDay_Definitions */</span><br><span class="line"></span><br><span class="line">  uint8_t Month;    /*!&lt; Specifies the RTC Date Month (in BCD format).</span><br><span class="line">                         This parameter can be a value of @ref RTC_Month_Date_Definitions */</span><br><span class="line"></span><br><span class="line">  uint8_t Date;     /*!&lt; Specifies the RTC Date.</span><br><span class="line">                         This parameter must be a number between Min_Data = 1 and Max_Data = 31 */</span><br><span class="line"></span><br><span class="line">  uint8_t Year;     /*!&lt; Specifies the RTC Date Year.</span><br><span class="line">                         This parameter must be a number between Min_Data = 0 and Max_Data = 99 */</span><br><span class="line"></span><br><span class="line">&#125; RTC_DateTypeDef;</span><br></pre></td></tr></table></figure><p><strong>程序代码：</strong></p><p>main.c</p><p><strong>在main.c中重写fputc函数，使得能够使用printf函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdio.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int fputc(int ch,FILE *f)&#123;</span><br><span class="line"> uint8_t temp[1]=&#123;ch&#125;;</span><br><span class="line"> HAL_UART_Transmit(&amp;huart1,temp,1,2);</span><br><span class="line"> return ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义两个结构体来获取日期和时间：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RTC_DateTypeDef GetData;  //获取日期结构体</span><br><span class="line"></span><br><span class="line">RTC_TimeTypeDef GetTime;   //获取时间结构体</span><br></pre></td></tr></table></figure><p>在while循环中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* Get the RTC current Time */</span><br><span class="line">HAL_RTC_GetTime(&amp;hrtc, &amp;GetTime, RTC_FORMAT_BIN);</span><br><span class="line">   /* Get the RTC current Date */</span><br><span class="line">   HAL_RTC_GetDate(&amp;hrtc, &amp;GetData, RTC_FORMAT_BIN);</span><br><span class="line"></span><br><span class="line">   /* Display date Format : yy/mm/dd */</span><br><span class="line">   printf(&quot;%02d/%02d/%02d\r\n&quot;,2000 + GetData.Year, GetData.Month, GetData.Date);</span><br><span class="line">   /* Display time Format : hh:mm:ss */</span><br><span class="line">   printf(&quot;%02d:%02d:%02d\r\n&quot;,GetTime.Hours, GetTime.Minutes, GetTime.Seconds);</span><br><span class="line"></span><br><span class="line">   printf(&quot;\r\n&quot;);</span><br><span class="line"></span><br><span class="line">   HAL_Delay(1000);</span><br></pre></td></tr></table></figure><p><strong>程序中使用HAL_RTC_GetTime（）,HAL_RTC_GetDate()读取时间和日期，并保存到结构体变量中，然后通过串口输出读取的时间和日期。</strong></p><p><strong>例程测试正常：</strong><br><img src="https://img-blog.csdnimg.cn/20200425153330941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425153330941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><h4 id="RTC掉电重置"><a href="#RTC掉电重置" class="headerlink" title="RTC掉电重置"></a>RTC掉电重置</h4><p>但是呢，在hal库中生成的代码，<strong>每次断电就RTC时间会重置</strong>，每次上电都会重新初始化时间</p><p>因为HAL库设置了一个BKP寄存器保存一个标志。每次单片机启动时都读取这个标志并判断是不是预先设定的值：如度果不是就初始化RTC并设置时间，再设置标志为预期值；如果是预期值就跳过初始化和时间设置，继续执行后面的程序</p><p><strong>所以这里我们只需要每次上电执行RTC初始化之前，将标志设置为预期值即可</strong></p><p><strong>在rtc.c中的RTC_Init修改为以下内容即可</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"> void MX_RTC_Init(void)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN RTC_Init 0 */</span><br><span class="line">RTC_TimeTypeDef time;   //时间结构体参数</span><br><span class="line">RTC_DateTypeDef datebuff;   //日期结构体参数</span><br><span class="line">  /* USER CODE END RTC_Init 0 */</span><br><span class="line"></span><br><span class="line">  RTC_TimeTypeDef sTime = &#123;0&#125;;</span><br><span class="line">  RTC_DateTypeDef DateToUpdate = &#123;0&#125;;</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN RTC_Init 1 */</span><br><span class="line">__HAL_RCC_BKP_CLK_ENABLE();       //开启后备区域时钟</span><br><span class="line">__HAL_RCC_PWR_CLK_ENABLE();  //开启电源时钟</span><br><span class="line">  /* USER CODE END RTC_Init 1 */</span><br><span class="line">  /**Initialize RTC Only </span><br><span class="line">  */</span><br><span class="line">  hrtc.Instance = RTC;</span><br><span class="line">  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;</span><br><span class="line">  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;</span><br><span class="line">  if (HAL_RTC_Init(&amp;hrtc) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN Check_RTC_BKUP */</span><br><span class="line">if(HAL_RTCEx_BKUPRead(&amp;hrtc,RTC_BKP_DR1)!= 0x5051)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  /* USER CODE END Check_RTC_BKUP */</span><br><span class="line"></span><br><span class="line">  /**Initialize RTC and set the Time and Date </span><br><span class="line">  */</span><br><span class="line">  sTime.Hours = 0x14;</span><br><span class="line">  sTime.Minutes = 0x30;</span><br><span class="line">  sTime.Seconds = 0x0;</span><br><span class="line"></span><br><span class="line">  if (HAL_RTC_SetTime(&amp;hrtc, &amp;sTime, RTC_FORMAT_BCD) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;</span><br><span class="line">  DateToUpdate.Month = RTC_MONTH_APRIL;</span><br><span class="line">  DateToUpdate.Date = 0x25;</span><br><span class="line">  DateToUpdate.Year = 0x20;</span><br><span class="line"></span><br><span class="line">  if (HAL_RTC_SetDate(&amp;hrtc, &amp;DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  /* USER CODE BEGIN RTC_Init 2 */</span><br><span class="line"></span><br><span class="line">__HAL_RTC_SECOND_ENABLE_IT(&amp;hrtc,RTC_IT_SEC); //开启RTC时钟秒中断</span><br><span class="line">datebuff = DateToUpdate;  //把日期数据拷贝到自己定义的data中</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR1, 0x5051);//向指定的后备区域寄存器写入数据</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR2, (uint16_t)datebuff.Year);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR3, (uint16_t)datebuff.Month);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR4, (uint16_t)datebuff.Date);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR5, (uint16_t)datebuff.WeekDay);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">datebuff.Year    = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR2);</span><br><span class="line">datebuff.Month   = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR3);</span><br><span class="line">datebuff.Date    = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR4);</span><br><span class="line">datebuff.WeekDay = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR5);</span><br><span class="line">DateToUpdate = datebuff;</span><br><span class="line">if (HAL_RTC_SetDate(&amp;hrtc, &amp;DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line">Error_Handler();</span><br><span class="line">&#125;</span><br><span class="line">__HAL_RTC_SECOND_ENABLE_IT(&amp;hrtc,RTC_IT_SEC); //开启RTC时钟秒中断</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425165901167.gif" alt="https://img-blog.csdnimg.cn/20200425165901167.gif"></p><p><img src="https://img-blog.csdnimg.cn/20200425165904365.gif" alt="https://img-blog.csdnimg.cn/20200425165904365.gif"></p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.Systick滴答定时器初始化（HAL库）&amp;无OS延时函数</title>
      <link href="/2024/03/stm32-5-Systick%E6%BB%B4%E7%AD%94%E5%AE%9A%E6%97%B6%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%88HAL%E5%BA%93%EF%BC%89-%E6%97%A0OS%E5%BB%B6%E6%97%B6%E5%87%BD%E6%95%B0/"/>
      <url>/2024/03/stm32-5-Systick%E6%BB%B4%E7%AD%94%E5%AE%9A%E6%97%B6%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%88HAL%E5%BA%93%EF%BC%89-%E6%97%A0OS%E5%BB%B6%E6%97%B6%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li><a href="#1Systick_1">1.Systick滴答定时器简介</a></li><li><a href="#2Systick_3">2.Systick主要寄存器</a></li><li><a href="#3Systick_9">3.Systick中断优先级</a></li><li><a href="#4Systick_13">4.Systick初始化流程</a></li><li><a href="#5OS_108">5.无OS延时函数</a></li></ul><h2 id="1-Systick滴答定时器简介"><a href="#1-Systick滴答定时器简介" class="headerlink" title="1.Systick滴答定时器简介"></a>1.Systick滴答定时器简介</h2><p>SysTick是属于CM4内核中的外设，其寄存器的定义和部分库函数都在core_cm4.h中实现。Systick是一个24bit的向下递减的计数器，一般设置其时钟等于SYSCLK的180M（另一个选择是HCLK&#x2F;8）。当重装载数值寄存器的值递减到0的时候，系统定时器就产生一次中断，以此循环往复。基于CM4内核的MCU都有这个系统定时器，使得软件在CM4 单片机中可以很容易的移植。因此它一般用于RTOS，用于产生时基，维持操作系统的心跳。Systick用于RTOS的总结我打算以后写UCOS博客的时候总结，这篇博客主要介绍无OS时，Systick初始化过程和延时函数使用方法。</p><h2 id="2-Systick主要寄存器"><a href="#2-Systick主要寄存器" class="headerlink" title="2.Systick主要寄存器"></a>2.Systick主要寄存器</h2><p><img src="https://img-blog.csdnimg.cn/20200404233234532.png" alt="https://img-blog.csdnimg.cn/20200404233234532.png"><br> <strong>控制寄存器：</strong> CLKSOURCE用于选择时钟源，一般会选择处理器时钟；ENABLE位用于使能Systick；TICKINT位置1会开启Systick中断。<br><img src="https://img-blog.csdnimg.cn/20200404233348124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTg5ODgwNA==,size_1,color_FFFFFF,t_1" alt="https://img-blog.csdnimg.cn/20200404233348124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTg5ODgwNA==,size_1,color_FFFFFF,t_1"><br> <strong>重装载值寄存器：</strong><br><img src="https://img-blog.csdnimg.cn/20200404234149713.png" alt="https://img-blog.csdnimg.cn/20200404234149713.png"></p><h2 id="3-Systick中断优先级"><a href="#3-Systick中断优先级" class="headerlink" title="3.Systick中断优先级"></a>3.Systick中断优先级</h2><p>SysTick属于内核外设，和普通外设的中断优先级不同，没有抢占优先级和响应优先级的说法。在F429 中，内核外设的中断优先级由内核SCB的外设的寄存器SHPRx（x&#x3D;1.2.3）配置。SPRH1-SPRH3是32位的寄存器，只能通过字节访问，每 8个字段控制着一个内核外设的中断优先级的配置。在F429 中只有位 7:3 这高四位有效，所以内核外设的中断优先级可编程为：0~15，数值越小优先级越高。<br><img src="https://img-blog.csdnimg.cn/20200405093144981.png" alt="https://img-blog.csdnimg.cn/20200405093144981.png"></p><p><img src="https://img-blog.csdnimg.cn/20200405093414919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTg5ODgwNA==,size_1,color_FFFFFF,t_1" alt="https://img-blog.csdnimg.cn/20200405093414919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTg5ODgwNA==,size_1,color_FFFFFF,t_1"></p><h2 id="4-Systick初始化流程"><a href="#4-Systick初始化流程" class="headerlink" title="4.Systick初始化流程"></a>4.Systick初始化流程</h2><ul><li>HAL_Init()是主函数main中执行的第一个函数，会设置中断优先级，将时钟源选为16M的HSI。我们可以注意到它还调用了HAL_InitTick()函数，它的输入参数是中断优先级，函数作用是初始化Systick并配置1ms中断一次。</li></ul><pre><code>HAL_StatusTypeDef HAL_Init(void)&#123;     /* Configure Flash prefetch, Instruction cache, Data cache */ #if (INSTRUCTION_CACHE_ENABLE != 0)   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();#endif /* INSTRUCTION_CACHE_ENABLE */#if (DATA_CACHE_ENABLE != 0)   __HAL_FLASH_DATA_CACHE_ENABLE();&lt;```</code></pre>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HAL库】STM32+ESP8266+Onenet+MQTT，极简工程，hal库移植。</title>
      <link href="/2024/03/stm32-%E3%80%90HAL%E5%BA%93%E3%80%91STM32-ESP8266-Onenet-MQTT%EF%BC%8C%E6%9E%81%E7%AE%80%E5%B7%A5%E7%A8%8B%EF%BC%8Chal%E5%BA%93%E7%A7%BB%E6%A4%8D%E3%80%82/"/>
      <url>/2024/03/stm32-%E3%80%90HAL%E5%BA%93%E3%80%91STM32-ESP8266-Onenet-MQTT%EF%BC%8C%E6%9E%81%E7%AE%80%E5%B7%A5%E7%A8%8B%EF%BC%8Chal%E5%BA%93%E7%A7%BB%E6%A4%8D%E3%80%82/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h4 id="ESP8266-Onenet-MQTT"><a href="#ESP8266-Onenet-MQTT" class="headerlink" title="ESP8266+Onenet+MQTT"></a>ESP8266+Onenet+MQTT</h4><p>+ </p><ul><li><a href="#1_chLED_12">1 导入.c.h文件（不再赘述，详细见LED部分）</a>+ <a href="#2_Cubemx_21">2 Cubemx配置</a>+ <a href="#3__ch__27">3 修改 .c.h 文件</a>+ <a href="#4__65">4 测试</a></li></ul><p>ESP8266通过MQTT协议连接Onenet。从标准库移到了HAL库，过程有点麻烦，整了一天。做完后整理了一下，这个极简的工程，方便以后开发，也希望能帮助到大家，节约时间。</p><p>代码工程： <a href="https://github.com/wyfroom/ESP8266-Onenet-MQTT">https://github.com/wyfroom/ESP8266-Onenet-MQTT</a></p><p>该份代码硬件配置： 板子：STM32F103C8T6最小系统板。 外设：串口1用作调试，串口3用作esp8266。 esp8266：淘宝，esp-01s</p><h3 id="1-导入-c-h文件（不再赘述，详细见LED部分）"><a href="#1-导入-c-h文件（不再赘述，详细见LED部分）" class="headerlink" title="1 导入.c.h文件（不再赘述，详细见LED部分）"></a>1 导入.c.h文件（不再赘述，详细见LED部分）</h3><p>在keil工程中导入之前写好的.c.h文件。这个是我从标准库移倒hal库的，直接从我工程里复制就行，很纯净，没有加多余的东西。下面介绍如何根据个人实际使用情况更改一些参数。</p><p>cubemx详细使用教程及所有模块整合见这篇： <a href="http://t.csdn.cn/Awtl9">【HAL库】HAL库STM32cubemx快速使用</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/913840e121e5a09eff4133733245efe9.png" alt="https://img-blog.csdnimg.cn/img_convert/913840e121e5a09eff4133733245efe9.png"></p><h3 id="2-Cubemx配置"><a href="#2-Cubemx配置" class="headerlink" title="2 Cubemx配置"></a>2 Cubemx配置</h3><p>串口1用于调试，串口3用于ESP8266通信，打开中断。</p><p>基础的我就不配置了，可以看前面的详细讲解。</p><h3 id="3-修改-c-h-文件"><a href="#3-修改-c-h-文件" class="headerlink" title="3 修改 .c.h 文件"></a>3 修改 .c.h 文件</h3><p>移植时要修改的地方：</p><p>1 改所用串口</p><p>发送部分：在esp8266.c里，将huart3全部替换为要修改的串口号，比如串口2。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/87b34edd334476992b18233290799fe3.png" alt="https://img-blog.csdnimg.cn/img_convert/87b34edd334476992b18233290799fe3.png"></p><p>接收部分：用串口中断接收esp8266发来的消息。随便在哪个文件夹填加串口回调函数，我个人是之前专门建了个uart.c文件放串口相关的所有代码。</p><p>加入下面的代码（串口号根据个人情况修改）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)</span><br><span class="line">&#123;</span><br><span class="line">    if(huart == &amp;huart3)//esp8266接收云平台数据</span><br><span class="line">&#123;</span><br><span class="line">if(esp8266_cnt &gt;= sizeof(esp8266_buf))</span><br><span class="line">&#123;            </span><br><span class="line">esp8266_cnt = 0; //防止串口被刷爆</span><br><span class="line">&#125;</span><br><span class="line">esp8266_buf[esp8266_cnt++] = Uart3_RxData;</span><br><span class="line"></span><br><span class="line">HAL_UART_Receive_IT(&amp;huart3,(uint8_t *)&amp;Uart3_RxData, 1); //&amp;取地址</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 改wifi名字和密码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/601b58b84f41ec638f86d9e63eeb4c41.png" alt="https://img-blog.csdnimg.cn/img_convert/601b58b84f41ec638f86d9e63eeb4c41.png"></p><p>3 改产品ID、设备ID、鉴权信息。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/03f4e721469e45d2729425eca9a8d38a.png" alt="https://img-blog.csdnimg.cn/img_convert/03f4e721469e45d2729425eca9a8d38a.png"></p><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4 测试"></a>4 测试</h3><p><strong>添加头文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;onenet.h&quot;</span><br><span class="line">#include &quot;esp8266.h&quot;</span><br></pre></td></tr></table></figure><p><strong>添加初始化</strong></p><p>别忘了开串口中断。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HAL_UART_Receive_IT(&amp;huart3,(uint8_t *)&amp;Uart3_RxData, 1);//开启串口中断</span><br><span class="line">/* esp8266连接wifi+连接Onenet */</span><br><span class="line">HAL_Delay(2000);</span><br><span class="line">ESP8266_Init();//初始化ESP8266，连接wifi</span><br><span class="line">HAL_Delay(2000);</span><br><span class="line">while(OneNet_DevLink())//连接OneNET</span><br><span class="line">HAL_Delay(2000);</span><br></pre></td></tr></table></figure><p>连接成功的话，onenet会显示设备在线。串口也会打印成功。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e08522ae2a3d08bd5f99c7fdeda41379.png" alt="https://img-blog.csdnimg.cn/img_convert/e08522ae2a3d08bd5f99c7fdeda41379.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/4e1ab1158b6bfc9430b57a31e27cfab3.png" alt="https://img-blog.csdnimg.cn/img_convert/4e1ab1158b6bfc9430b57a31e27cfab3.png"></p><p><strong>发送数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OneNet_SendData();//发送数据</span><br><span class="line">ESP8266_Clear();//清空数据缓存区</span><br><span class="line">HAL_Delay(3000);//3s发送一次</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/05e4629537d4b953e7e7f4bc651a0267.png" alt="https://img-blog.csdnimg.cn/img_convert/05e4629537d4b953e7e7f4bc651a0267.png"></p><p>要发什么数据，在这里改：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2e0513318f4aa1042b26a9f18b546071.png" alt="https://img-blog.csdnimg.cn/img_convert/2e0513318f4aa1042b26a9f18b546071.png"></p><p><strong>接收数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataPtr = ESP8266_GetIPD(0);//获取平台返回的数据</span><br><span class="line">if(dataPtr != NULL)//如果返回数据不为空</span><br><span class="line">OneNet_RevPro(dataPtr);//平台返回数据检测</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32_HAL库驱动DHT11读取温湿度程序</title>
      <link href="/2024/03/stm32-STM32-HAL%E5%BA%93%E9%A9%B1%E5%8A%A8DHT11%E8%AF%BB%E5%8F%96%E6%B8%A9%E6%B9%BF%E5%BA%A6%E7%A8%8B%E5%BA%8F/"/>
      <url>/2024/03/stm32-STM32-HAL%E5%BA%93%E9%A9%B1%E5%8A%A8DHT11%E8%AF%BB%E5%8F%96%E6%B8%A9%E6%B9%BF%E5%BA%A6%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="STM32使用HAL库驱动DHT11读取温湿度程序"><a href="#STM32使用HAL库驱动DHT11读取温湿度程序" class="headerlink" title="STM32使用HAL库驱动DHT11读取温湿度程序"></a>STM32使用HAL库驱动DHT11读取温湿度程序</h2><p><strong>驱动DHT11、DHT22、DS18BB20等温湿度模块时序是比较简单的，关键在于控制好时序的<code>延时时间</code>，HAL库的延时函数HAL_Delay是毫秒级别延时函数，所关键点就是实现微秒级别的延时函数。</strong></p><p><strong>微秒级别延时函数实现见我的另一篇博客：<a href="https://blog.csdn.net/qq153471503/article/details/102930097">https://blog.csdn.net/qq153471503/article/details/102930097</a></strong></p><p><strong>扫描以下二维码，关注公众号<code>雍正不秃头</code>获取更多STM32资源及干货！</strong><br><img src="https://img-blog.csdnimg.cn/20210126155428872.png" alt="https://img-blog.csdnimg.cn/20210126155428872.png"></p><h3 id="sys-h"><a href="#sys-h" class="headerlink" title="sys.h"></a>sys.h</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _SYS_H_</span><br><span class="line">#define _SYS_H_</span><br><span class="line"></span><br><span class="line">#include &quot;main.h&quot;</span><br><span class="line"></span><br><span class="line">#define BITBAND(addr, bitnum) ((addr &amp; 0xF0000000)+0x2000000+((addr &amp;0xFFFFF)&lt;&lt;5)+(bitnum&lt;&lt;2))</span><br><span class="line">#define MEM_ADDR(addr)  *((volatile unsigned long  *)(addr))</span><br><span class="line">#define BIT_ADDR(addr, bitnum)   MEM_ADDR(BITBAND(addr, bitnum))</span><br><span class="line"></span><br><span class="line">#define GPIOA_ODR_Addr    (GPIOA_BASE+12) //0x4001080C </span><br><span class="line">#define GPIOB_ODR_Addr    (GPIOB_BASE+12) //0x40010C0C </span><br><span class="line">#define GPIOC_ODR_Addr    (GPIOC_BASE+12) //0x4001100C </span><br><span class="line">#define GPIOD_ODR_Addr    (GPIOD_BASE+12) //0x4001140C </span><br><span class="line">#define GPIOE_ODR_Addr    (GPIOE_BASE+12) //0x4001180C </span><br><span class="line">#define GPIOF_ODR_Addr    (GPIOF_BASE+12) //0x40011A0C    </span><br><span class="line">#define GPIOG_ODR_Addr    (GPIOG_BASE+12) //0x40011E0C    </span><br><span class="line"></span><br><span class="line">#define GPIOA_IDR_Addr    (GPIOA_BASE+8) //0x40010808 </span><br><span class="line">#define GPIOB_IDR_Addr    (GPIOB_BASE+8) //0x40010C08 </span><br><span class="line">#define GPIOC_IDR_Addr    (GPIOC_BASE+8) //0x40011008 </span><br><span class="line">#define GPIOD_IDR_Addr    (GPIOD_BASE+8) //0x40011408 </span><br><span class="line">#define GPIOE_IDR_Addr    (GPIOE_BASE+8) //0x40011808 </span><br><span class="line">#define GPIOF_IDR_Addr    (GPIOF_BASE+8) //0x40011A08 </span><br><span class="line">#define GPIOG_IDR_Addr    (GPIOG_BASE+8) //0x40011E08 </span><br><span class="line"></span><br><span class="line">#define PAout(n)   BIT_ADDR(GPIOA_ODR_Addr,n)  //</span><br><span class="line">#define PAin(n)    BIT_ADDR(GPIOA_IDR_Addr,n)  //</span><br><span class="line"></span><br><span class="line">#define PBout(n)   BIT_ADDR(GPIOB_ODR_Addr,n)  //</span><br><span class="line">#define PBin(n)    BIT_ADDR(GPIOB_IDR_Addr,n)  //</span><br><span class="line"></span><br><span class="line">#define PCout(n)   BIT_ADDR(GPIOC_ODR_Addr,n)  //</span><br><span class="line">#define PCin(n)    BIT_ADDR(GPIOC_IDR_Addr,n)  //</span><br><span class="line"></span><br><span class="line">#define PDout(n)   BIT_ADDR(GPIOD_ODR_Addr,n)  //</span><br><span class="line">#define PDin(n)    BIT_ADDR(GPIOD_IDR_Addr,n)  //</span><br><span class="line"></span><br><span class="line">#define PEout(n)   BIT_ADDR(GPIOE_ODR_Addr,n)  //</span><br><span class="line">#define PEin(n)    BIT_ADDR(GPIOE_IDR_Addr,n)  //</span><br><span class="line"></span><br><span class="line">#define PFout(n)   BIT_ADDR(GPIOF_ODR_Addr,n)  //</span><br><span class="line">#define PFin(n)    BIT_ADDR(GPIOF_IDR_Addr,n)  //</span><br><span class="line"></span><br><span class="line">#define PGout(n)   BIT_ADDR(GPIOG_ODR_Addr,n)  //</span><br><span class="line">#define PGin(n)    BIT_ADDR(GPIOG_IDR_Addr,n)  //</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="dht11-h"><a href="#dht11-h" class="headerlink" title="dht11.h"></a>dht11.h</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __DHT11_H</span><br><span class="line">#define __DHT11_H</span><br><span class="line"></span><br><span class="line">#include &quot;main.h&quot;</span><br><span class="line">#include &quot;sys.h&quot;</span><br><span class="line"></span><br><span class="line">typedef uint8_t u8;</span><br><span class="line">typedef uint16_t u16;</span><br><span class="line">typedef uint32_t u32;</span><br><span class="line"></span><br><span class="line">//IO方向设置</span><br><span class="line">#define DHT11_IO_IN()  &#123;IODHT22_GPIO_Port-&gt;CRH &amp;= 0xFFFFF0FF;IODHT22_GPIO_Port-&gt;CRH |= 8 &lt;&lt; 8;&#125;// PC10 IN  MODE</span><br><span class="line">#define DHT11_IO_OUT() &#123;IODHT22_GPIO_Port-&gt;CRH &amp;= 0xFFFFF0FF;IODHT22_GPIO_Port-&gt;CRH |= 3 &lt;&lt; 8;&#125;// PC10 OUT MODE</span><br><span class="line"></span><br><span class="line">IO操作函数</span><br><span class="line">#defineDHT11_DQ_OUT PCout(10) //数据端口PC10</span><br><span class="line">#defineDHT11_DQ_IN  PCin(10)  //数据端口PC10</span><br><span class="line"></span><br><span class="line">u8 DHT11_Init(void);//初始化DHT11</span><br><span class="line">u8 DHT11_Read_Data(u8 *temp, u8 *humi); //读取温湿度</span><br><span class="line">u8 DHT11_Read_Byte(void);//读出一个字节</span><br><span class="line">u8 DHT11_Read_Bit(void);//读出一个位</span><br><span class="line">u8 DHT11_Check(void);//检测是否存在DHT11</span><br><span class="line">void DHT11_Rst(void);//复位DHT11</span><br><span class="line">u8 DHT11_Read_Data_Float(float *temp,float *humi);</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="dht11-c"><a href="#dht11-c" class="headerlink" title="dht11.c"></a>dht11.c</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;dht11.h&quot;</span><br><span class="line"></span><br><span class="line">//复位DHT11</span><br><span class="line">void DHT11_Rst(void)</span><br><span class="line">&#123;</span><br><span class="line">    DHT11_IO_OUT(); //SET OUTPUT</span><br><span class="line">    DHT11_DQ_OUT=0; //拉低DQ</span><br><span class="line">    delay_ms(20);    //拉低至少18ms,(DHT22 500us)</span><br><span class="line">    DHT11_DQ_OUT=1; //DQ=1</span><br><span class="line">    delay_us(30);     //主机拉高20~40us</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//等待DHT11的回应</span><br><span class="line">//返回1:未检测到DHT11的存在</span><br><span class="line">//返回0:存在</span><br><span class="line">u8 DHT11_Check(void)</span><br><span class="line">&#123;</span><br><span class="line">    u8 retry=0;</span><br><span class="line">    DHT11_IO_IN();//SET INPUT</span><br><span class="line">    while (DHT11_DQ_IN&amp;&amp;retry&lt;100)//DHT11会拉低40~80us</span><br><span class="line">    &#123;</span><br><span class="line">        retry++;</span><br><span class="line">        delay_us(1);</span><br><span class="line">    &#125;;</span><br><span class="line">    if(retry&gt;=100)return 1;</span><br><span class="line">    else retry=0;</span><br><span class="line">    while (!DHT11_DQ_IN&amp;&amp;retry&lt;100)//DHT11拉低后会再次拉高40~80us</span><br><span class="line">    &#123;</span><br><span class="line">        retry++;</span><br><span class="line">        delay_us(1);</span><br><span class="line">    &#125;;</span><br><span class="line">    if(retry&gt;=100)return 1;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//从DHT11读取一个位</span><br><span class="line">//返回值：1/0</span><br><span class="line">u8 DHT11_Read_Bit(void)</span><br><span class="line">&#123;</span><br><span class="line">    u8 retry=0;</span><br><span class="line">    while(DHT11_DQ_IN&amp;&amp;retry&lt;100)//等待变为低电平</span><br><span class="line">    &#123;</span><br><span class="line">        retry++;</span><br><span class="line">        delay_us(1);</span><br><span class="line">    &#125;</span><br><span class="line">    retry=0;</span><br><span class="line">    while(!DHT11_DQ_IN&amp;&amp;retry&lt;100)//等待变高电平</span><br><span class="line">    &#123;</span><br><span class="line">        retry++;</span><br><span class="line">        delay_us(1);</span><br><span class="line">    &#125;</span><br><span class="line">    delay_us(40);//等待40us</span><br><span class="line">    if(DHT11_DQ_IN)return 1;</span><br><span class="line">    else return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//从DHT11读取一个字节</span><br><span class="line">//返回值：读到的数据</span><br><span class="line">u8 DHT11_Read_Byte(void)</span><br><span class="line">&#123;</span><br><span class="line">    u8 i,dat;</span><br><span class="line">    dat=0;</span><br><span class="line">    for (i=0; i&lt;8; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dat&lt;&lt;=1;</span><br><span class="line">        dat|=DHT11_Read_Bit();</span><br><span class="line">    &#125;</span><br><span class="line">    return dat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//从DHT11读取一次数据</span><br><span class="line">//temp:温度值(范围:0~50°)</span><br><span class="line">//humi:湿度值(范围:20%~90%)</span><br><span class="line">//返回值：0,正常;1,读取失败</span><br><span class="line">u8 DHT11_Read_Data(u8 *temp,u8 *humi)</span><br><span class="line">&#123;</span><br><span class="line">    u8 buf[5];</span><br><span class="line">    u8 i;</span><br><span class="line">    DHT11_Rst();</span><br><span class="line">    if(DHT11_Check()==0)</span><br><span class="line">    &#123;</span><br><span class="line">        for(i=0; i&lt;5; i++) //读取40位数据</span><br><span class="line">        &#123;</span><br><span class="line">            buf[i]=DHT11_Read_Byte();</span><br><span class="line">        &#125;</span><br><span class="line">        if((buf[0]+buf[1]+buf[2]+buf[3])==buf[4])</span><br><span class="line">        &#123;</span><br><span class="line">            *humi=buf[0];</span><br><span class="line">            *temp=buf[2];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else return 1;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u8 DHT11_Read_Data_Float(float *temp,float *humi)</span><br><span class="line">&#123;</span><br><span class="line">    u8 buf[5];</span><br><span class="line">    u8 i;</span><br><span class="line">    DHT11_Rst();</span><br><span class="line">    if(DHT11_Check()==0)</span><br><span class="line">    &#123;</span><br><span class="line">        for(i=0; i&lt;5; i++) //读取40位数据</span><br><span class="line">        &#123;</span><br><span class="line">            buf[i]=DHT11_Read_Byte();</span><br><span class="line">        &#125;</span><br><span class="line">        if((buf[0]+buf[1]+buf[2]+buf[3])==buf[4])</span><br><span class="line">        &#123;</span><br><span class="line">*humi=((buf[0] &lt;&lt; 8) + buf[1]) / 10.0;</span><br><span class="line">*temp=((buf[2] &lt;&lt; 8) + buf[3]) / 10.0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else return 1;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//初始化DHT11的IO口 DQ 同时检测DHT11的存在</span><br><span class="line">//返回1:不存在</span><br><span class="line">//返回0:存在</span><br><span class="line">u8 DHT11_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">    u8 ret = 1;</span><br><span class="line">    DHT11_Rst();  //复位DHT11</span><br><span class="line">    ret = DHT11_Check();</span><br><span class="line">    printf(&quot;dht11 init %s. \r\n&quot;, ret == 0 ? &quot;ok&quot; : &quot;failed&quot;);</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于STM32HAL库，RC522（RFID）模块读写驱动，无线IC卡读写</title>
      <link href="/2024/03/stm32-%E5%9F%BA%E4%BA%8ESTM32HAL%E5%BA%93%EF%BC%8CRC522%EF%BC%88RFID%EF%BC%89%E6%A8%A1%E5%9D%97%E8%AF%BB%E5%86%99%E9%A9%B1%E5%8A%A8%EF%BC%8C%E6%97%A0%E7%BA%BFIC%E5%8D%A1%E8%AF%BB%E5%86%99/"/>
      <url>/2024/03/stm32-%E5%9F%BA%E4%BA%8ESTM32HAL%E5%BA%93%EF%BC%8CRC522%EF%BC%88RFID%EF%BC%89%E6%A8%A1%E5%9D%97%E8%AF%BB%E5%86%99%E9%A9%B1%E5%8A%A8%EF%BC%8C%E6%97%A0%E7%BA%BFIC%E5%8D%A1%E8%AF%BB%E5%86%99/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="一、模块简短介绍"><a href="#一、模块简短介绍" class="headerlink" title="一、模块简短介绍"></a>一、模块简短介绍</h2><p>        有关RC522模块的背景知识以及工作原理，本次实验暂时不做分享，这里贴上两位写得很好的博主，大家可自行查看。 </p><p><a href="https://blog.csdn.net/m0_51220742/article/details/123683745">(5条消息) RC522(RFID)读写驱动_桃成蹊2.0的博客-CSDN博客<br><img src="https://csdnimg.cn/release/blog_editor_html/release2.3.6/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=N7T8" alt="https://csdnimg.cn/release/blog_editor_html/release2.3.6/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=N7T8"><br>https://blog.csdn.net/m0_51220742&#x2F;article&#x2F;details&#x2F;123683745</a><a href="https://blog.csdn.net/weixin_45771489/article/details/124079134">(5条消息) STM32–RFID无线射频技术（RC522刷卡模块）_rc522射频模块详细资料_y黎好好的博客-CSDN博客<br><img src="https://csdnimg.cn/release/blog_editor_html/release2.3.6/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=N7T8" alt="https://csdnimg.cn/release/blog_editor_html/release2.3.6/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=N7T8"><br>https://blog.csdn.net/weixin_45771489&#x2F;article&#x2F;details&#x2F;124079134</a></p><p><img src="https://img-blog.csdnimg.cn/b829df1211c843b49139edf393f1aa42.jpeg" alt="https://img-blog.csdnimg.cn/b829df1211c843b49139edf393f1aa42.jpeg"></p><p>         该模块价格普遍实惠，所以我买了一个自己玩玩。经过一段时间的摸爬滚打目前能够正常读写，后续会继续完善该模块的使用，并加入到其他嵌入式设计中。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="二、开发资料的使用及经验分享"><a href="#二、开发资料的使用及经验分享" class="headerlink" title="二、开发资料的使用及经验分享"></a>二、开发资料的使用及经验分享</h2><p>        该模块的API函数淘宝有很多资源，数据手册也有，不过是英文版的。建议大家有时间还是要过一数据手册的重要部分，比如寄存器和指令集，通信协议等，可以使用知云文献查看，我习惯用它来看论文，适合翻译长段大段。也可以用WPS的翻译，小部分翻译，看个人使用习惯。要是有能力直接撸原文那就更好，节约时间。</p><p>                            <br><img src="https://img-blog.csdnimg.cn/2e92c08f81ca46af8c0d2361b9d2e130.png" alt="https://img-blog.csdnimg.cn/2e92c08f81ca46af8c0d2361b9d2e130.png"></p><p>        找过很多资料，提供的API无非就是一套没有章法，毫无可读性的杂乱代码，十分影响学习效果。这里建议大家不要去死磕，可以看本次实验的代码逻辑和上文提到的两位博主，每一个底层函数都有注释，在一些底层函数的逻辑上可以结合这些API函数进行反推或者校验，可以帮助读者理解实现原理。</p><p>       一开始是通过数据手册，硬着头皮啃无良店铺给的代码，没有注释，没有逻辑，没有章法。虽然没报错，但是能不能用完全不知道，就是这一步就花了好几天时间，所以建议大家不要像我一样埋头苦读，可以先看每一个函数的中文注释，整理出一个框架。</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="三、源码解析"><a href="#三、源码解析" class="headerlink" title="三、源码解析"></a>三、源码解析</h2><p>         代码总体逻辑没有变化，参考了两位博主的思路，我用官方的API函数进行修改。两位博主一位使用的软件实现SPI协议，一位使用板载SPI。两种方法我都试过，但是软件SPI协议总是通信失败，不知道是我协议写的不对还是通信速度和模块不匹配，暂时还未解决。  </p><h3 id="软件模拟SPI"><a href="#软件模拟SPI" class="headerlink" title="软件模拟SPI"></a><strong>软件模拟SPI</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 函数名：SOFT_SPI_RC522_SendByte</span><br><span class="line"> * 描述  ：向RC522发送1 Byte 数据</span><br><span class="line"> * 输入  ：write_dat，要发送的数据</span><br><span class="line"> * 返回  : RC522返回的数据</span><br><span class="line"> */</span><br><span class="line">void SOFT_SPI_RC522_SendByte(uint8_t write_dat)</span><br><span class="line">&#123;</span><br><span class="line">    uint8_t i;</span><br><span class="line"></span><br><span class="line">    for(i=0;i&lt;8;i++)</span><br><span class="line">    &#123;     </span><br><span class="line">RC522_SCK(0);</span><br><span class="line">RC522_DELAY();</span><br><span class="line">        if (write_dat &amp; 0x80)</span><br><span class="line">                RC522_MOSI(1);</span><br><span class="line">        else </span><br><span class="line">                RC522_MOSI(0);                    </span><br><span class="line">write_dat &lt;&lt;= 1;</span><br><span class="line">        RC522_DELAY();     //delay_ms(1)       </span><br><span class="line">        RC522_SCK(1);</span><br><span class="line">        RC522_DELAY();</span><br><span class="line">        </span><br><span class="line">    &#125; </span><br><span class="line">RC522_SCK(0);//释放时钟线</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 函数名：SOFT_SPI_RC522_ReadByte</span><br><span class="line"> * 描述  ：从RC522发送1 Byte 数据</span><br><span class="line"> * 输入  ：无</span><br><span class="line"> * 返回  : RC522返回的数据</span><br><span class="line"> */</span><br><span class="line">uint8_t SOFT_SPI_RC522_ReadByte(void)</span><br><span class="line">&#123;</span><br><span class="line">uint8_t i;</span><br><span class="line">uint8_t SPI_Data=0;</span><br><span class="line">for(i=0;i&lt;8;i++)</span><br><span class="line">&#123;</span><br><span class="line">        SPI_Data &lt;&lt;= 1;</span><br><span class="line">        RC522_SCK(0);        </span><br><span class="line">        RC522_DELAY();//SCK low pulse width 最小延时</span><br><span class="line">        RC522_SCK(1);</span><br><span class="line">        if (RC522_MISO_GET==1)</span><br><span class="line">                SPI_Data++;</span><br><span class="line">        RC522_DELAY();//SCK high pulse width 最小延时</span><br><span class="line">&#125;</span><br><span class="line">    RC522_SCK(0);</span><br><span class="line">return SPI_Data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 函数名：SOFT_SPI_RC522_Read_Write</span><br><span class="line"> * 描述  ：RC522同时读写,数据在上升沿读取</span><br><span class="line"> * 输入  ：byte，要发送的数据</span><br><span class="line"> * 返回  : RC522返回的数据</span><br><span class="line"> */</span><br><span class="line">uint8_t SOFT_SPI_RC522_Read_Write(uint8_t write_dat)</span><br><span class="line">&#123;</span><br><span class="line">    uint8_t i,read_dat;</span><br><span class="line">    for(i=0;i&lt;8;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        RC522_SCK(0);</span><br><span class="line">        if(write_dat&amp;0x80)</span><br><span class="line">            RC522_MOSI(1);</span><br><span class="line">        else                    </span><br><span class="line">            RC522_MOSI(0); </span><br><span class="line">        write_dat &lt;&lt;= 1;</span><br><span class="line">        RC522_DELAY(); //data changes to SCK high 最小延时</span><br><span class="line">        RC522_SCK(1); </span><br><span class="line">        read_dat &lt;&lt;= 1;  </span><br><span class="line">        if(RC522_MISO_GET==1) </span><br><span class="line">            read_dat++; </span><br><span class="line">RC522_DELAY();</span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">RC522_SCK(0);</span><br><span class="line">    return read_dat;</span><br><span class="line">&#125;```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         有大佬如果发现问题，还请给我留言，也不知道是什么原因导致通信失败。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### **板载SPI通信**</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;*</p><ul><li>函数名：SPI_WriteNBytes</li><li>描述  ：向RC522发送n Byte 数据</li><li>输入  ：SPIx : 要发送数据的SPI</li><li>输入  ：p_TxData : 要发送的数据</li><li>输入  ：sendDataNum : 要发送的数据量(Byte)</li><li>返回  : 0<br> <em>&#x2F;<br>int SPI_WriteNBytes(SPI_TypeDef</em> SPIx, uint8_t *p_TxData,uint32_t sendDataNum)<br>{<br> int retry&#x3D;0;<br> while(sendDataNum–){<br> while((SPIx-&gt;SR&amp;SPI_FLAG_TXE)&#x3D;&#x3D;0)&#x2F;&#x2F;等待发送区空<br> {<br>     retry++;<br>     if(retry&gt;20000)return -1;<br> }<br> SPIx-&gt;DR&#x3D;*p_TxData++;&#x2F;&#x2F;发送一个byte<br> retry&#x3D;0;<br> while((SPIx-&gt;SR&amp;SPI_FLAG_RXNE)&#x3D;&#x3D;0)&#x2F;&#x2F;等待接收完一个byte<br> {<br>     SPIx-&gt;SR &#x3D; SPIx-&gt;SR;<br>     retry++;<br>     if(retry&gt;20000)return -1;<br> }<br> SPIx-&gt;DR;<br> }<br> return 0;<br>}</li></ul><p>&#x2F;*</p><ul><li>函数名：SPI_ReadNBytes</li><li>描述  ：读取RC522 n Byte 数据</li><li>输入  ：SPIx : 要读取数据的SPI</li><li>输入  ：p_RxData : 要读取的数据</li><li>输入  ：readDataNum : 要读取的数据量(Byte)</li><li>返回  : 0<br> <em>&#x2F;<br>int SPI_ReadNBytes(SPI_TypeDef</em> SPIx, uint8_t *p_RxData,uint32_t readDataNum)<br>{<br> int retry&#x3D;0;<br> while(readDataNum–){<br> SPIx-&gt;DR &#x3D; 0xFF;<br> while(!(SPIx-&gt;SR&amp;SPI_FLAG_TXE)){<br>     retry++;<br>     if(retry&gt;20000)return -1;<br> }<br> retry &#x3D; 0;<br> while(!(SPIx-&gt;SR&amp;SPI_FLAG_RXNE)){<br>     retry++;<br>     if(retry&gt;20000)return -1;<br> }<br> *p_RxData++ &#x3D; SPIx-&gt;DR;<br> }<br> return 0;<br>}&#96;&#96;&#96;</li></ul><p>        本实验使用读取寄存器状态来完成SPI通信，未使用HAL_SPI_TransmitReceive库函数。</p><h3 id="源码部分"><a href="#源码部分" class="headerlink" title="源码部分"></a>源码部分</h3><p>        主函数比较简略，调用一个操作函数，用按键触发的方式启动该函数实现读写。main.c 中，加入以下代码：</p><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    RC522_Init();</span><br><span class="line">uint8_t key;</span><br><span class="line"></span><br><span class="line">    uint8_t Write_Card_Data[16]=&#123;0&#125;;//要写入的数据</span><br><span class="line"></span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">key = key_scan();//按键扫描函数，自己定义修改</span><br><span class="line">if(key==1)</span><br><span class="line">&#123;</span><br><span class="line">RC522_Start(5,readID,Write_Card_Data);//readID  读命令</span><br><span class="line">&#125;</span><br><span class="line">else if(key==2)</span><br><span class="line">&#123;</span><br><span class="line">RC522_Start(5,writeID,Write_Card_Data);//writeID  写命令</span><br><span class="line">&#125;</span><br><span class="line">delay_ms(100);</span><br><span class="line">LED0=!LED0;</span><br><span class="line">&#125;```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### RC522部分</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**RC522.c**</span><br><span class="line"></span><br><span class="line">        其中RC522_Start是自定义函数，只要操作流程正确，可自行编写想要的操作方式，本实验只完成简单的单块读写操作。蓝卡和白卡的卡号根据自己的修改，可以通过手机NFC功能查看卡号，同时也能查看扇区数据，APP可以使用上文提到的博主推荐的NFC Writer。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#include “RC522.h”<br>#include “stdio.h”<br>#include “delay.h”<br>#include “spi.h”<br>#include “oled.h”<br>#include “string.h”</p><p>&#x2F;&#x2F; M1卡分为16个扇区，每个扇区由四个块（块0、块1、块2、块3）组成<br>&#x2F;&#x2F; 将16个扇区的64个块按绝对地址编号为：0~63,每块16个字节<br>&#x2F;&#x2F; 第0个扇区的块0（即绝对地址0块），用于存放厂商代码，已经固化不可更改<br>&#x2F;&#x2F; 每个扇区的块0、块1、块2为数据块，可用于存放数据<br>&#x2F;&#x2F; 每个扇区的块3为控制块（绝对地址为:块3、块7、块11…..）包括密码A，存取控制、密码B等<br>void RC522_Init(void)<br>{</p><pre><code>RC522_SPI_GPIO_Init();//初始化RC522的复位引脚和片选引脚SPI1_Init();//初始化SPIdelay_ms(50);PcdReset();//复位RC522读卡器delay_ms(10);PcdAntennaOff();//关闭天线发射delay_ms(10);PcdAntennaOn();//开启天线发射printf(&quot;RFID-MFRC522 初始化完成\nPress KEY0 Or KEY1 To Start...\r\n&quot;);  //初始化完成</code></pre><p>}</p><p>uint8_t IC_UID[4]; &#x2F;&#x2F;UID卡片序列号,4字节<br>uint8_t IC_Type[2];&#x2F;&#x2F;卡类型代码，2字节,0x0400，Mifare_One(S50)<br>uint8_t card_1[4]&#x3D;{0xC3,0xB2,0x37,0xC5};&#x2F;&#x2F;蓝卡1卡号<br>uint8_t card_2[4]&#x3D;{0xA3,0x09,0x3C,0xFB};&#x2F;&#x2F;白卡2卡号<br>uint8_t ID_num&#x3D;0;&#x2F;&#x2F;当前操作的序号<br>uint8_t Card_KEY[6]&#x3D;{0xff,0xff,0xff,0xff,0xff,0xff};&#x2F;&#x2F;验证密码<br>uint8_t Card_Data[16];&#x2F;&#x2F;读取出的块数据<br>&#x2F;*</p><ul><li>函数名：RC522_Start</li><li>输入  block：要操作的块地址</li><li>输入  option：读操作或写操作</li><li><pre><code>         readID  1//读</code></pre></li><li><pre><code>        writeID 2//写</code></pre></li><li>输入  block：要操作的块地址</li><li>描述  ：RC522操作主函数，可完成对卡的读写操作</li><li><ul><li>返回  : 状态值</li></ul></li><li><pre><code>    = 1，成功</code></pre></li></ul><p> *&#x2F;<br>void RC522_Start(uint8_t block,uint8_t option,uint8_t *Write_Card_Data)<br>{</p><pre><code>if(PcdRequest(PICC_REQALL,IC_Type) == MI_OK)//寻卡&#123;    uint16_t cardType = (IC_Type[0] &lt;&lt; 8) | IC_Type[1];    switch (cardType)    &#123;        case 0x4400:            printf(&quot;\r\nMifare UltraLight\r\n&quot;);            break;        case 0x0400:            printf(&quot;\r\nMifare One(S50)\r\n&quot;);            break;        case 0x0200:            printf(&quot;\r\nMifare One(S70)\r\n&quot;);            break;        case 0x0800:            printf(&quot;\r\nMifare Pro(X)\r\n&quot;);            break;        case 0x4403:            printf(&quot;\r\nMifare DESFire\r\n&quot;);            break;        default:            printf(&quot;\r\nUnknown Card\r\n&quot;);            break;    &#125;    if(PcdAnticoll(IC_UID)==MI_OK)//防冲撞    &#123;                if((IC_UID[0]==card_1[0])&amp;&amp;(IC_UID[1]==card_1[1])&amp;&amp;(IC_UID[2]==card_1[2])&amp;&amp;(IC_UID[3]==card_1[3]))        &#123;            ID_num=1;             printf(&quot;The User is: %d, Blue card&quot;,ID_num);                              &#125;        else if((IC_UID[0]==card_2[0])&amp;&amp;(IC_UID[1]==card_2[1])&amp;&amp;(IC_UID[2]==card_2[2])&amp;&amp;(IC_UID[3]==card_2[3]))        &#123;            ID_num=2;            printf(&quot;The User is: %d, White card&quot;,ID_num);                                   &#125;        printf(&quot;\r\ncard_ID: %02X:%02X:%02X:%02X\r\n&quot;,IC_UID[0],IC_UID[1],IC_UID[2],IC_UID[3]); //打印卡的UID号                if(PcdSelect(IC_UID)==MI_OK)//选卡        &#123;            if(PcdAuthState(PICC_AUTHENT1A,block,Card_KEY,IC_UID)==MI_OK)//验证A密钥,对应块            &#123;</code></pre><p>&#x2F;&#x2F;memset(Card_Data,1,16);<br>                    if(option&#x3D;&#x3D;readID)&#x2F;&#x2F;读操作<br>                    {<br>                        if(PcdRead(block,Card_Data)&#x3D;&#x3D;MI_OK)<br>                        {<br>                            printf(“\n读取结果: \n”);<br>                            printf(“block %d date:\r\n”,block);<br>                            for(int i&#x3D;0;i&lt;16;i++)<br>                            {<br>                                printf(“%02X “,Card_Data[i]);<br>                            }<br>                            printf(“\r\n”);                     </p><pre><code>                    &#125;                &#125;                else if(option==writeID)//写操作                &#123;                    if(PcdWrite(block,Write_Card_Data)==MI_OK)                    &#123;                        delay_ms(8);                        if(PcdRead(block,Card_Data)==MI_OK)                        &#123;                            printf(&quot;\n写入完成\n&quot;);                            printf(&quot;block %d date:\r\n&quot;,block);                            for(int i=0;i&lt;16;i++)                            &#123;                                printf(&quot;%02X &quot;,Card_Data[i]);                            &#125;                             printf(&quot;\r\n&quot;);                                             &#125;                    &#125;                &#125;            &#125;            else            &#123;                printf(&quot;\r\n验证失败\r\n&quot;);            &#125;        &#125;        else        &#123;            printf(&quot;\r\n选卡失败\r\n&quot;);        &#125;    &#125;    else    &#123;        printf(&quot;\r\n防冲撞失败\r\n&quot;);    &#125;&#125;else&#123;    printf(&quot;\r\n寻卡失败\r\n&quot;);&#125;</code></pre><p>&#x2F;&#x2F;PcdHalt();<br>    PcdAntennaOff();&#x2F;&#x2F;关闭天线发射</p><pre><code>delay_ms(10);PcdAntennaOn();//开启天线发射</code></pre><p>}</p><p>&#x2F;*</p><ul><li>函数名：RC522_SPI_GPIO_Init</li><li>描述  ：初始化RC522的复位引脚和片选引脚</li><li><pre><code>    片选引脚采用软件管理模式，自定义片选引脚</code></pre></li></ul><p> *&#x2F;<br>void RC522_SPI_GPIO_Init(void)<br>{<br>    GPIO_InitTypeDef GPIO_Initure;</p><pre><code>RC522_GPIO_Reset_CLK_ENABLE();RC522_GPIO_CS_CLK_ENABLE();   GPIO_Initure.Pin=RC522_RST_Pin;GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;             GPIO_Initure.Pull=GPIO_PULLUP;     //复位和片选引脚低电平有效,默认上拉             GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;                    HAL_GPIO_Init(RC522_RST_GPIO_Port,&amp;GPIO_Initure);GPIO_Initure.Pin=RC522_GPIO_CS_PIN;HAL_GPIO_Init(RC522_GPIO_CS_PORT,&amp;GPIO_Initure);</code></pre><p>}</p><p>&#x2F;*</p><ul><li>函数名：SPI_WriteNBytes</li><li>描述  ：向RC522发送n Byte 数据</li><li>输入  ：SPIx : 要发送数据的SPI</li><li>输入  ：p_TxData : 要发送的数据</li><li>输入  ：sendDataNum : 要发送的数据量(Byte)</li><li>返回  : 0<br> <em>&#x2F;<br>int SPI_WriteNBytes(SPI_TypeDef</em> SPIx, uint8_t *p_TxData,uint32_t sendDataNum)<br>{<br> int retry&#x3D;0;<br> while(sendDataNum–){<br> while((SPIx-&gt;SR&amp;SPI_FLAG_TXE)&#x3D;&#x3D;0)&#x2F;&#x2F;等待发送区空<br> {<br>     retry++;<br>     if(retry&gt;20000)return -1;<br> }<br> SPIx-&gt;DR&#x3D;*p_TxData++;&#x2F;&#x2F;发送一个byte<br> retry&#x3D;0;<br> while((SPIx-&gt;SR&amp;SPI_FLAG_RXNE)&#x3D;&#x3D;0)&#x2F;&#x2F;等待接收完一个byte<br> {<br>     SPIx-&gt;SR &#x3D; SPIx-&gt;SR;<br>     retry++;<br>     if(retry&gt;20000)return -1;<br> }<br> SPIx-&gt;DR;<br> }<br> return 0;<br>}</li></ul><p>&#x2F;*</p><ul><li>函数名：SPI_ReadNBytes</li><li>描述  ：读取RC522 n Byte 数据</li><li>输入  ：SPIx : 要读取数据的SPI</li><li>输入  ：p_RxData : 要读取的数据</li><li>输入  ：readDataNum : 要读取的数据量(Byte)</li><li>返回  : 0<br> <em>&#x2F;<br>int SPI_ReadNBytes(SPI_TypeDef</em> SPIx, uint8_t *p_RxData,uint32_t readDataNum)<br>{<br> int retry&#x3D;0;<br> while(readDataNum–){<br> SPIx-&gt;DR &#x3D; 0xFF;<br> while(!(SPIx-&gt;SR&amp;SPI_FLAG_TXE)){<br>     retry++;<br>     if(retry&gt;20000)return -1;<br> }<br> retry &#x3D; 0;<br> while(!(SPIx-&gt;SR&amp;SPI_FLAG_RXNE)){<br>     retry++;<br>     if(retry&gt;20000)return -1;<br> }<br> *p_RxData++ &#x3D; SPIx-&gt;DR;<br> }<br> return 0;<br>}</li></ul><p>&#x2F;*</p><ul><li>函数名：PcdComMF522</li><li>描述  ：通过RC522和ISO14443卡通讯</li><li>输入  ：ucCommand，RC522命令字</li><li><pre><code>    pInData，通过RC522发送到卡片的数据</code></pre></li><li><pre><code>    ucInLenByte，发送数据的字节长度</code></pre></li><li><pre><code>    pOutData，接收到的卡片返回数据</code></pre></li><li><pre><code>    pOutLenBit，返回数据的位长度</code></pre></li><li>返回  : 状态值</li><li><pre><code>    = MI_OK，成功</code></pre></li><li>调用  ：内部调用<br> *&#x2F;<br>char PcdComMF522(uint8_t Command,uint8_t *pInData,uint8_t InLenByte,uint8_t *pOutData,uint32_t *pOutLenBit)<br>{<br> char status &#x3D; MI_ERR;<br> uint8_t irqEn &#x3D; 0x00;<br> uint8_t waitFor &#x3D; 0x00;<br> uint8_t lastBits;<br> uint8_t n;<br> uint32_t i;<br> switch (Command)<br> {<br> case PCD_AUTHENT:   &#x2F;&#x2F;Mifare认证<br> irqEn &#x3D; 0x12;   &#x2F;&#x2F;允许错误中断请求ErrIEn  允许空闲中断IdleIEn<br> waitFor &#x3D; 0x10; &#x2F;&#x2F;认证寻卡等待时候 查询空闲中断标志位<br> break;<br> case PCD_TRANSCEIVE:&#x2F;&#x2F;接收发送 发送接收<br> irqEn &#x3D; 0x77;   &#x2F;&#x2F;允许TxIEn RxIEn IdleIEn LoAlertIEn ErrIEn TimerIEn<br> waitFor &#x3D; 0x30; &#x2F;&#x2F;寻卡等待时候 查询接收中断标志位与 空闲中断标志位<br> break;<br> default:<br> break;<br> }<br> WriteRawRC(ComIEnReg, irqEn | 0x80); &#x2F;&#x2F;IRqInv置位管脚IRQ与Status1Reg的IRq位的值相反<br> ClearBitMask(ComIrqReg, 0x80);       &#x2F;&#x2F;Set1该位清零时，CommIRqReg的屏蔽位清零<br> WriteRawRC(CommandReg, PCD_IDLE);    &#x2F;&#x2F;写空闲命令<br> SetBitMask(FIFOLevelReg, 0x80);      &#x2F;&#x2F;置位FlushBuffer清除内部FIFO的读和写指针以及ErrReg的BufferOvfl标志位被清除<br> for (i &#x3D; 0; i &lt; InLenByte; i++)<br> {<br> WriteRawRC(FIFODataReg, pInData[i]);&#x2F;&#x2F;写数据进FIFOdata<br> }<br> WriteRawRC(CommandReg, Command);&#x2F;&#x2F;写命令<br> if (Command &#x3D;&#x3D; PCD_TRANSCEIVE)<br> {<br> SetBitMask(BitFramingReg, 0x80);&#x2F;&#x2F;StartSend置位启动数据发送 该位与收发命令使用时才有效<br> }<br> i &#x3D; 800;&#x2F;&#x2F;根据时钟频率调整，操作M1卡最大等待时间25ms<br> do<br> {<br> n &#x3D; ReadRawRC(ComIrqReg);&#x2F;&#x2F;查询事件中断<br> i–;<br> } while ((i !&#x3D; 0) &amp;&amp; !(n &amp; 0x01) &amp;&amp; !(n &amp; waitFor));&#x2F;&#x2F;退出条件i&#x3D;0,定时器中断，与写空闲命令<br> ClearBitMask(BitFramingReg, 0x80);&#x2F;&#x2F;清理允许StartSend位<br> if (i !&#x3D; 0)<br> {<br> if (!(ReadRawRC(ErrorReg) &amp; 0x1B))&#x2F;&#x2F;读错误标志寄存器BufferOfI CollErr ParityErr ProtocolErr<br> {<br>     status &#x3D; MI_OK;<br>     if (n &amp; irqEn &amp; 0x01)&#x2F;&#x2F;是否发生定时器中断<br>     {<br>         status &#x3D; MI_NOTAGERR;<br>     }<br>     if (Command &#x3D;&#x3D; PCD_TRANSCEIVE)<br>     {<br>         n &#x3D; ReadRawRC(FIFOLevelReg);&#x2F;&#x2F;读FIFO中保存的字节数<br>         lastBits &#x3D; ReadRawRC(ControlReg) &amp; 0x07;&#x2F;&#x2F;最后接收到得字节的有效位数<br>         if (lastBits)<br>         {<br>             *pOutLenBit &#x3D; (n - 1) * 8 + lastBits;&#x2F;&#x2F;N个字节数减去1（最后一个字节）+最后一位的位数 读取到的数据总位数<br>         }<br>         else<br>         {<br>             *pOutLenBit &#x3D; n * 8;&#x2F;&#x2F;最后接收到的字节整个字节有效<br>         }<br>         if (n &#x3D;&#x3D; 0)<br>         {<br>             n &#x3D; 1;<br>         }<br>         if (n &gt; MAXRLEN)<br>         {<br>             n &#x3D; MAXRLEN;<br>         }<br>         for (i &#x3D; 0; i &lt; n; i++)<br>         {<br>             pOutData[i] &#x3D; ReadRawRC(FIFODataReg);<br>         }<br>     }<br> }<br> else<br> {<br>     status &#x3D; MI_ERR;<br> }<br> }<br> SetBitMask(ControlReg, 0x80); &#x2F;&#x2F; stop timer now<br> WriteRawRC(CommandReg, PCD_IDLE);<br> return status;<br>}</li></ul><p>&#x2F;*</p><ul><li>函数名：PcdRequest</li><li>描述  ：寻卡</li><li>输入  ：ucReq_code，寻卡方式</li><li><pre><code>                = 0x52，寻感应区内所有符合14443A标准的卡</code></pre></li><li><pre><code>                = 0x26，寻未进入休眠状态的卡</code></pre></li><li><pre><code>    pTagType，卡片类型代码</code></pre></li><li><pre><code>              = 0x4400，Mifare_UltraLight</code></pre></li><li><pre><code>              = 0x0400，Mifare_One(S50)</code></pre></li><li><pre><code>              = 0x0200，Mifare_One(S70)</code></pre></li><li><pre><code>              = 0x0800，Mifare_Pro(X))</code></pre></li><li><pre><code>              = 0x4403，Mifare_DESFire</code></pre></li><li>返回  : 状态值</li><li><pre><code>    = MI_OK，成功</code></pre></li></ul><p> *&#x2F;<br>char PcdRequest(uint8_t req_code, uint8_t *pTagType)<br>{<br>    char status;<br>    uint32_t unLen;<br>    uint8_t ucComMF522Buf[MAXRLEN];</p><pre><code>ClearBitMask(Status2Reg, 0x08);  //清除RC522寄存位,清理指示MIFARECyptol单元接通以及所有卡的数据通信被加密的情况WriteRawRC(BitFramingReg, 0x07); //写RC522寄存器，发送的最后一个字节的七位SetBitMask(TxControlReg, 0x03);  写RC522寄存位，TX1,TX2管脚的输出信号传递经发送调制的13.56的能量载波信号ucComMF522Buf[0] = req_code;//存入寻卡方式status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, 1, ucComMF522Buf, &amp;unLen);if ((status == MI_OK) &amp;&amp; (unLen == 0x10))//寻卡成功返回卡类型&#123;    *pTagType = ucComMF522Buf[0];    *(pTagType + 1) = ucComMF522Buf[1];&#125;else&#123;    status = MI_ERR;&#125;return status;</code></pre><p>}</p><p>&#x2F;*</p><ul><li>函数名：PcdAnticoll</li><li>描述  ：防冲撞</li><li>输入  ：pSnr，卡片序列号，4字节</li><li>返回  : 状态值</li><li><pre><code>    = MI_OK，成功</code></pre></li></ul><p> *&#x2F;<br>char PcdAnticoll(uint8_t *pSnr)<br>{<br>    char status;<br>    uint8_t i, snr_check &#x3D; 0;<br>    uint32_t unLen;<br>    uint8_t ucComMF522Buf[MAXRLEN];<br>    ClearBitMask(Status2Reg, 0x08);&#x2F;&#x2F;清MFCryptol On位,只有成功执行MFAuthent命令后，该位才能置位<br>    WriteRawRC(BitFramingReg, 0x00);&#x2F;&#x2F;清理寄存器,停止收发<br>    ClearBitMask(CollReg, 0x80);&#x2F;&#x2F;清ValuesAfterColl所有接收的位在冲突后被清除<br>    ucComMF522Buf[0] &#x3D; PICC_ANTICOLL1;&#x2F;&#x2F;卡片防冲突命令<br>    ucComMF522Buf[1] &#x3D; 0x20;</p><pre><code>status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, 2, ucComMF522Buf, &amp;unLen);if (status == MI_OK)&#123;    for (i = 0; i &lt; 4; i++)    &#123;        *(pSnr + i) = ucComMF522Buf[i];        snr_check ^= ucComMF522Buf[i];    &#125;    if (snr_check != ucComMF522Buf[i])    &#123;        status = MI_ERR;    &#125;&#125;SetBitMask(CollReg, 0x80);return status;</code></pre><p>}</p><p>&#x2F;*</p><ul><li>函数名：PcdSelect</li><li>描述  ：选定卡片</li><li>输入  ：pSnr，卡片序列号，4字节</li><li>返回  : 状态值</li><li><pre><code>    = MI_OK，成功</code></pre></li></ul><p> *&#x2F;<br>char PcdSelect(uint8_t *pSnr)<br>{<br>    char status;<br>    uint8_t i;<br>    uint32_t unLen;<br>    uint8_t ucComMF522Buf[MAXRLEN];<br>    ucComMF522Buf[0] &#x3D; PICC_ANTICOLL1;&#x2F;&#x2F;防冲撞<br>    ucComMF522Buf[1] &#x3D; 0x70;<br>    ucComMF522Buf[6] &#x3D; 0;<br>    for (i &#x3D; 0; i &lt; 4; i++)<br>    {<br>        ucComMF522Buf[i + 2] &#x3D; *(pSnr + i);<br>        ucComMF522Buf[6] ^&#x3D; *(pSnr + i);<br>    }<br>    CalulateCRC(ucComMF522Buf, 7, &amp;ucComMF522Buf[7]);<br>    ClearBitMask(Status2Reg, 0x08);<br>    status &#x3D; PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, 9, ucComMF522Buf, &amp;unLen);<br>    if ((status &#x3D;&#x3D; MI_OK) &amp;&amp; (unLen &#x3D;&#x3D; 0x18))<br>    {<br>        status &#x3D; MI_OK;<br>    }<br>    else<br>    {<br>        status &#x3D; MI_ERR;<br>    }<br>    return status;<br>}</p><p>&#x2F;*</p><ul><li>函数名：PcdAuthState</li><li>描述  ：验证卡片密码</li><li>输入  ：ucAuth_mode，密码验证模式</li><li><pre><code>                = 0x60，验证A密钥</code></pre></li><li><pre><code>                = 0x61，验证B密钥</code></pre></li><li><pre><code>    uint8_t ucAddr，块地址</code></pre></li><li><pre><code>    pKey，密码</code></pre></li><li><pre><code>    pSnr，卡片序列号，4字节</code></pre></li><li>返回  : 状态值</li><li><pre><code>    = MI_OK，成功</code></pre></li></ul><p> *&#x2F;<br>char PcdAuthState(uint8_t auth_mode, uint8_t addr, uint8_t *pKey, uint8_t *pSnr)<br>{<br>    char status;<br>    uint32_t unLen;<br>    uint8_t i, ucComMF522Buf[MAXRLEN];<br>    ucComMF522Buf[0] &#x3D; auth_mode;<br>    ucComMF522Buf[1] &#x3D; addr;<br>    for (i &#x3D; 0; i &lt; 6; i++)<br>    {<br>        ucComMF522Buf[i + 2] &#x3D; *(pKey + i);<br>    }<br>    for (i &#x3D; 0; i &lt; 6; i++)<br>    {<br>        ucComMF522Buf[i + 8] &#x3D; *(pSnr + i);<br>    }<br>    status &#x3D; PcdComMF522(PCD_AUTHENT, ucComMF522Buf, 12, ucComMF522Buf, &amp;unLen);<br>    if ((status !&#x3D; MI_OK) || (!(ReadRawRC(Status2Reg) &amp; 0x08)))<br>    {<br>        status &#x3D; MI_ERR;<br>    }<br>    return status;<br>}</p><p>&#x2F;*</p><ul><li><p>函数名：PcdRead</p></li><li><p>描述  ：读取M1卡一块数据</p></li><li><p>输入  ：uint8_t ucAddr，块地址</p></li><li><pre><code>    pData，读出的数据，16字节</code></pre></li><li><p>返回  : 状态值</p></li><li><pre><code>    = MI_OK，成功</code></pre></li><li><p>调用  ：外部调用<br> *&#x2F;<br>char PcdRead(uint8_t addr, uint8_t *pData)<br>{<br> char status;<br> uint32_t unLen;<br> uint8_t i, ucComMF522Buf[MAXRLEN];<br> ucComMF522Buf[0] &#x3D; PICC_READ;<br> ucComMF522Buf[1] &#x3D; addr;<br> CalulateCRC(ucComMF522Buf, 2, &amp;ucComMF522Buf[2]);</p><p> status &#x3D; PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, 4, ucComMF522Buf, &amp;unLen);<br> if ((status &#x3D;&#x3D; MI_OK) &amp;&amp; (unLen &#x3D;&#x3D; 0x90))<br> {<br> for (i &#x3D; 0; i &lt; 16; i++)<br> {<br>     *(pData + i) &#x3D; ucComMF522Buf[i];<br> }<br> }<br> else<br> {<br> status &#x3D; MI_ERR;<br> }<br> return status;</p></li></ul><p>}</p><p>&#x2F;*</p><ul><li>函数名：PcdWrite</li><li>描述  ：写数据到M1卡一块</li><li>输入  ：uint8_t ucAddr，块地址</li><li><pre><code>    pData，写入的数据，16字节</code></pre></li><li>返回  : 状态值</li><li><pre><code>    = MI_OK，成功</code></pre></li><li>调用  ：外部调用<br> *&#x2F;<br>char PcdWrite(uint8_t addr, uint8_t *pData)<br>{<br> char status;<br> uint32_t unLen;<br> uint8_t i, ucComMF522Buf[MAXRLEN];<br> ucComMF522Buf[0] &#x3D; PICC_WRITE;<br> ucComMF522Buf[1] &#x3D; addr;<br> CalulateCRC(ucComMF522Buf, 2, &amp;ucComMF522Buf[2]);<br> status &#x3D; PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, 4, ucComMF522Buf, &amp;unLen);<br> if ((status !&#x3D; MI_OK) || (unLen !&#x3D; 4) || ((ucComMF522Buf[0] &amp; 0x0F) !&#x3D; 0x0A))<br> {<br> status &#x3D; MI_ERR;<br> }<br> if (status &#x3D;&#x3D; MI_OK)<br> {<br> for (i &#x3D; 0; i &lt; 16; i++)<br> {<br>     ucComMF522Buf[i] &#x3D; *(pData + i);<br> }<br> CalulateCRC(ucComMF522Buf, 16, &amp;ucComMF522Buf[16]);<br><br> status &#x3D; PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, 18, ucComMF522Buf, &amp;unLen);<br> if ((status !&#x3D; MI_OK) || (unLen !&#x3D; 4) || ((ucComMF522Buf[0] &amp; 0x0F) !&#x3D; 0x0A))<br> {<br>     status &#x3D; MI_ERR;<br> }<br> }<br> return status;</li></ul><p>}</p><p>&#x2F;*</p><ul><li>函数名：PcdValue</li><li>描述  ：扣款和充值</li><li>输入  ：dd_mode[IN]：命令字</li><li><pre><code>         0xC0 = 扣款</code></pre></li><li><pre><code>         0xC1 = 充值</code></pre></li><li><pre><code>    addr[IN]：钱包地址</code></pre></li><li><pre><code>    pValue[IN]：4字节增(减)值，低位在前</code></pre></li><li>返回  : 状态值</li><li><pre><code>    = MI_OK，成功</code></pre></li></ul><p> *&#x2F;<br>char PcdValue(uint8_t dd_mode, uint8_t addr, uint8_t *pValue)<br>{<br>    char status;<br>    uint32_t unLen;<br>    uint8_t i, ucComMF522Buf[MAXRLEN];<br>    ucComMF522Buf[0] &#x3D; dd_mode;<br>    ucComMF522Buf[1] &#x3D; addr;<br>    CalulateCRC(ucComMF522Buf, 2, &amp;ucComMF522Buf[2]);<br>    status &#x3D; PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, 4, ucComMF522Buf, &amp;unLen);</p><pre><code>if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] &amp; 0x0F) != 0x0A))&#123;    status = MI_ERR;&#125;if (status == MI_OK)&#123;    for (i = 0; i &lt; 16; i++)    &#123;        ucComMF522Buf[i] = *(pValue + i);    &#125;    CalulateCRC(ucComMF522Buf, 4, &amp;ucComMF522Buf[4]);    unLen = 0;    status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, 6, ucComMF522Buf, &amp;unLen);    if (status != MI_ERR)    &#123;        status = MI_OK;    &#125;&#125;if (status == MI_OK)&#123;    ucComMF522Buf[0] = PICC_TRANSFER;    ucComMF522Buf[1] = addr;    CalulateCRC(ucComMF522Buf, 2, &amp;ucComMF522Buf[2]);    status = PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, 4, ucComMF522Buf, &amp;unLen);    if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] &amp; 0x0F) != 0x0A))    &#123;        status = MI_ERR;    &#125;&#125;return status;</code></pre><p>}</p><p>&#x2F;*</p><ul><li>函数名：PcdBakValue</li><li>描述  ：备份钱包</li><li>输入  ：sourceaddr[IN]：源地址</li><li><pre><code>    goaladdr[IN]：目标地址</code></pre></li><li>返回  : 状态值</li><li><pre><code>    = MI_OK，成功</code></pre></li></ul><p> *&#x2F;<br>char PcdBakValue(uint8_t sourceaddr, uint8_t goaladdr)<br>{<br>    char status;<br>    uint32_t unLen;<br>    uint8_t ucComMF522Buf[MAXRLEN];<br>    ucComMF522Buf[0] &#x3D; PICC_RESTORE;<br>    ucComMF522Buf[1] &#x3D; sourceaddr;<br>    CalulateCRC(ucComMF522Buf, 2, &amp;ucComMF522Buf[2]);<br>    status &#x3D; PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, 4, ucComMF522Buf, &amp;unLen);<br>    if ((status !&#x3D; MI_OK) || (unLen !&#x3D; 4) || ((ucComMF522Buf[0] &amp; 0x0F) !&#x3D; 0x0A))<br>    {<br>        status &#x3D; MI_ERR;<br>    }<br>    if (status &#x3D;&#x3D; MI_OK)<br>    {<br>        ucComMF522Buf[0] &#x3D; 0;<br>        ucComMF522Buf[1] &#x3D; 0;<br>        ucComMF522Buf[2] &#x3D; 0;<br>        ucComMF522Buf[3] &#x3D; 0;<br>        CalulateCRC(ucComMF522Buf, 4, &amp;ucComMF522Buf[4]);<br>        status &#x3D; PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, 6, ucComMF522Buf, &amp;unLen);<br>        if (status !&#x3D; MI_ERR)<br>        {<br>            status &#x3D; MI_OK;<br>        }<br>    }<br>    if (status !&#x3D; MI_OK)<br>    {<br>        return MI_ERR;<br>    }<br>    ucComMF522Buf[0] &#x3D; PICC_TRANSFER;<br>    ucComMF522Buf[1] &#x3D; goaladdr;<br>    CalulateCRC(ucComMF522Buf, 2, &amp;ucComMF522Buf[2]);<br>    status &#x3D; PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, 4, ucComMF522Buf, &amp;unLen);<br>    if ((status !&#x3D; MI_OK) || (unLen !&#x3D; 4) || ((ucComMF522Buf[0] &amp; 0x0F) !&#x3D; 0x0A))<br>    {<br>        status &#x3D; MI_ERR;<br>    }<br>    return status;<br>}</p><p>&#x2F;*</p><ul><li>函数名：PcdHalt</li><li>描述  ：命令卡片进入休眠状态</li><li>返回  : 状态值</li><li><pre><code>    = MI_OK，成功</code></pre></li></ul><p> *&#x2F;<br>char PcdHalt(void)<br>{<br>    uint32_t unLen;<br>    uint8_t ucComMF522Buf[MAXRLEN];</p><pre><code>ucComMF522Buf[0] = PICC_HALT;ucComMF522Buf[1] = 0;CalulateCRC(ucComMF522Buf, 2, &amp;ucComMF522Buf[2]);PcdComMF522(PCD_TRANSCEIVE, ucComMF522Buf, 4, ucComMF522Buf, &amp;unLen);return MI_OK;</code></pre><p>}</p><p>&#x2F;*</p><ul><li>函数名：CalulateCRC</li><li>描述  ：用RC522计算CRC16</li><li>输入  ：pIndata，计算CRC16的数组</li><li><pre><code>    ucLen，计算CRC16的数组字节长度</code></pre></li><li><pre><code>    pOutData，存放计算结果存放的首地址</code></pre></li><li>返回  : 无</li><li>调用  ：内部调用<br> *&#x2F;<br>void CalulateCRC(uint8_t *pIndata, uint8_t len, uint8_t *pOutData)<br>{<br> uint8_t i, n;<br> ClearBitMask(DivIrqReg, 0x04);<br> WriteRawRC(CommandReg, PCD_IDLE);<br> SetBitMask(FIFOLevelReg, 0x80);<br> for (i &#x3D; 0; i &lt; len; i++)<br> {<br> WriteRawRC(FIFODataReg, *(pIndata + i));<br> }<br> WriteRawRC(CommandReg, PCD_CALCCRC);<br> i &#x3D; 0xFF;<br> do<br> {<br> n &#x3D; ReadRawRC(DivIrqReg);<br> i–;<br> } while ((i !&#x3D; 0) &amp;&amp; !(n &amp; 0x04));<br> pOutData[0] &#x3D; ReadRawRC(CRCResultRegL);<br> pOutData[1] &#x3D; ReadRawRC(CRCResultRegM);<br>}</li></ul><p>&#x2F;*</p><ul><li>函数名：PcdRese</li><li>描述  ：复位RC522 </li><li>返回  : 状态值</li><li><pre><code>    = MI_OK，成功</code></pre></li></ul><p> *&#x2F;<br>char PcdReset(void)<br>{<br>    RC522_Reset_Disable();<br>    delay_ms(10);<br>    RC522_Reset_Enable();<br>    delay_ms(60);<br>    RC522_Reset_Disable();<br>    delay_ms(500);<br>    WriteRawRC(CommandReg, PCD_RESETPHASE);&#x2F;&#x2F;复位指令<br>    delay_ms(2);</p><pre><code>WriteRawRC(ModeReg, 0x3D);//定义发送和接收常用模式,和Mifare卡通讯，CRC初始值0x6363WriteRawRC(TReloadRegL, 30);//16位定时器低位WriteRawRC(TReloadRegH, 0);//16位定时器高位WriteRawRC(TModeReg, 0x8D);//定义内部定时器的设置WriteRawRC(TPrescalerReg, 0x3E);//设置定时器分频系数WriteRawRC(TxAutoReg, 0x40);//调制发送信号为100%ASKClearBitMask(TestPinEnReg, 0x80);WriteRawRC(TxAutoReg, 0x40);return MI_OK;</code></pre><p>}</p><p>&#x2F;*</p><ul><li>函数名：ReadRawRC</li><li>描述  ：读RC522寄存器</li><li>输入  ：ucAddress，寄存器地址</li><li>返回  : 寄存器的当前值<br> *&#x2F;<br>uint8_t ReadRawRC(uint8_t Address)<br>{<br> uint8_t ucAddr;<br> uint8_t ucResult &#x3D; 0;<br> ucAddr &#x3D; ((Address &lt;&lt; 1) &amp; 0x7E) | 0x80;&#x2F;&#x2F;最高位置1，读操作;最低为默认0<br> delay_ms(1);<br> RC522_CS_Enable();<br> SPI_WriteNBytes(SPI1_SPI, &amp;ucAddr, 1);  &#x2F;&#x2F;向总线写多个数据<br> SPI_ReadNBytes(SPI1_SPI, &amp;ucResult, 1); &#x2F;&#x2F;向总线读多个数据<br> RC522_CS_Disable();<br> return ucResult;<br>}</li></ul><p>&#x2F;*</p><ul><li>函数名：WriteRawRC</li><li>描述  ：写RC522寄存器</li><li>输入  ：ucAddress，寄存器地址</li><li><pre><code>    ucValue，写入寄存器的值</code></pre></li></ul><p> *&#x2F;<br>void WriteRawRC(uint8_t Address, uint8_t value)<br>{<br>    uint8_t ucAddr;<br>    uint8_t write_buffer[2] &#x3D; {0};<br>    ucAddr &#x3D; ((Address &lt;&lt; 1) &amp; 0x7E);&#x2F;&#x2F;最高位置0，写操作;最低为默认0<br>    write_buffer[0] &#x3D; ucAddr;<br>    write_buffer[1] &#x3D; value;<br>    delay_ms(1);<br>    RC522_CS_Enable();<br>    SPI_WriteNBytes(SPI1_SPI, write_buffer, 2);<br>    RC522_CS_Disable();<br>}</p><p>&#x2F;*</p><ul><li>函数名：SetBitMask</li><li>描述  ：对RC522寄存器置位，可对多个位同时操作</li><li>输入  ：ucReg，寄存器地址</li><li><pre><code>    ucMask，置位值,例0x13，0001 0011</code></pre></li></ul><p> *&#x2F;<br>void SetBitMask(uint8_t reg, uint8_t mask)<br>{<br>    uint8_t temp &#x3D; 0x00;</p><pre><code>temp = ReadRawRC(reg);        //读寄存器WriteRawRC(reg, temp | mask); //将目标位置1 </code></pre><p>}</p><p>&#x2F;*</p><ul><li>函数名：ClearBitMask</li><li>描述  ：对RC522寄存器清位</li><li>输入  ：ucReg，寄存器地址</li><li><pre><code>    ucMask，清位值</code></pre></li></ul><p> *&#x2F;<br>void ClearBitMask(uint8_t reg, uint8_t mask)<br>{<br>    uint8_t temp &#x3D; 0x00;</p><pre><code>temp = ReadRawRC(reg);WriteRawRC(reg, temp &amp; ~mask);</code></pre><p>}</p><p>&#x2F;*</p><ul><li>函数名：PcdAntennaOn</li><li>描述  ：开启天线 </li><li>TxControlReg寄存器位0置1，引脚TX1上的输出信号将传输由传输数据调制的13.56 MHz能量载波。</li><li>TxControlReg寄存器位1置1，引脚TX2上的输出信号将发送由传输数据调制的13.56 MHz能量载波。<br> *&#x2F;<br>void PcdAntennaOn(void)<br>{<br> uint8_t i;<br> i &#x3D; ReadRawRC(TxControlReg);<br> if (!(i &amp; 0x03))<br> {<br> SetBitMask(TxControlReg, 0x03);<br> }<br>}</li></ul><p>&#x2F;*</p><ul><li>函数名：PcdAntennaOff</li><li>描述  ：关闭天线<br> *&#x2F;<br>void PcdAntennaOff(void)<br>{<br> ClearBitMask(TxControlReg, 0x03);<br>}</li></ul><p>&#x2F;*</p><ul><li>函数名：RC522_PcdConfig_Type</li><li>描述  ：设置RC522的工作方式</li><li>工作方式ISO14443_A</li><li>复位中已经设置过，该函数暂时未调用<br> *&#x2F;<br>void RC522_Config(uint8_t Card_Type)<br>{<br> ClearBitMask(Status2Reg, 0x08);<br> WriteRawRC(ModeReg, 0x3D);<br> WriteRawRC(RxSelReg, 0x86);<br> WriteRawRC(RFCfgReg, 0x7F);<br> WriteRawRC(TReloadRegL, 30);<br> WriteRawRC(TReloadRegH, 0);<br> WriteRawRC(TModeReg, 0x8D);<br> WriteRawRC(TPrescalerReg, 0x3E);<br> delay_ms(5);<br> PcdAntennaOn();<br>}</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RC522.h</span><br><span class="line"></span><br><span class="line">        头文件内容与API大致相同，定义了指令集和寄存器。</span><br><span class="line"></span><br><span class="line">        这里的sys.h是正点原子的F1系列头文件。</span><br><span class="line"></span><br><span class="line">        加入了引脚定义和自定义函数。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#ifndef __RC522_H<br>#define __RC522_H  <br>#include “sys.h”</p><p>&#x2F;<em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>引脚定义</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></em><em>&#x2F;<br>&#x2F;</em><br>RC522SPI引脚,RST和CS可随意更改<br>RST-PC5<br>CS-PA4<br>SCK-PA5<br>MISO-PA6<br>MOSI-PA7<br>*&#x2F;</p><p>&#x2F;&#x2F;Reset<br>#define RC522_RST_Pin      GPIO_PIN_5<br>#define RC522_RST_GPIO_Port     GPIOC<br>#define RC522_GPIO_Reset_CLK_ENABLE() <br>    do { __HAL_RCC_GPIOA_CLK_ENABLE(); } while(0)</p><p>&#x2F;&#x2F;CS片选，模块SDA引脚，SPI通信时用作NSS<br>#define RC522_GPIO_CS_PIN      GPIO_PIN_4<br>#define RC522_GPIO_CS_PORT     GPIOA<br>#define RC522_GPIO_CS_CLK_ENABLE() <br>    do { __HAL_RCC_GPIOA_CLK_ENABLE(); } while(0)</p><p>&#x2F;*<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>RC522 函数宏定义</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>&#x2F;</p><p>#define RC522_Reset_Disable() HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_SET);<br>#define RC522_Reset_Enable() HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_RESET);</p><p>#define RC522_CS_Enable() HAL_GPIO_WritePin(RC522_GPIO_CS_PORT, RC522_GPIO_CS_PIN, GPIO_PIN_RESET);<br>#define RC522_CS_Disable() HAL_GPIO_WritePin(RC522_GPIO_CS_PORT, RC522_GPIO_CS_PIN, GPIO_PIN_SET);</p><p>#define readID  1&#x2F;&#x2F;读<br>#define writeID 2&#x2F;&#x2F;写</p><p>&#x2F;<em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>自定义函数</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></em>*&#x2F;<br>void RC522_Init(void);<br>void RC522_Start(uint8_t block,uint8_t option,uint8_t *Write_Card_Data);<br>void RC522_SPI_GPIO_Init(void);</p><p>&#x2F;<em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>RC522指令集</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></em>*&#x2F;<br>&#x2F;&#x2F;MF522命令字<br>#define PCD_IDLE              0x00               &#x2F;&#x2F;取消当前命令<br>#define PCD_AUTHENT           0x0E               &#x2F;&#x2F;验证密钥<br>#define PCD_RECEIVE           0x08               &#x2F;&#x2F;接收数据<br>#define PCD_TRANSMIT          0x04               &#x2F;&#x2F;发送数据<br>#define PCD_TRANSCEIVE        0x0C               &#x2F;&#x2F;发送并接收数据<br>#define PCD_RESETPHASE        0x0F               &#x2F;&#x2F;复位<br>#define PCD_CALCCRC           0x03               &#x2F;&#x2F;CRC计算</p><p>&#x2F;&#x2F;Mifare_One卡片命令字<br>#define PICC_REQIDL           0x26               &#x2F;&#x2F;寻天线区内未进入休眠状态<br>#define PICC_REQALL           0x52               &#x2F;&#x2F;寻天线区内全部卡<br>#define PICC_ANTICOLL1        0x93               &#x2F;&#x2F;防冲撞<br>#define PICC_ANTICOLL2        0x95               &#x2F;&#x2F;防冲撞<br>#define PICC_AUTHENT1A        0x60               &#x2F;&#x2F;验证A密钥<br>#define PICC_AUTHENT1B        0x61               &#x2F;&#x2F;验证B密钥<br>#define PICC_READ             0x30               &#x2F;&#x2F;读块<br>#define PICC_WRITE            0xA0               &#x2F;&#x2F;写块<br>#define PICC_DECREMENT        0xC0               &#x2F;&#x2F;扣款<br>#define PICC_INCREMENT        0xC1               &#x2F;&#x2F;充值<br>#define PICC_RESTORE          0xC2               &#x2F;&#x2F;调块数据到缓冲区<br>#define PICC_TRANSFER         0xB0               &#x2F;&#x2F;保存缓冲区中数据<br>#define PICC_HALT             0x50               &#x2F;&#x2F;休眠</p><p>&#x2F;&#x2F;MF522 FIFO长度定义<br>#define DEF_FIFO_LENGTH       64                 &#x2F;&#x2F;FIFO size&#x3D;64byte</p><p>&#x2F;&#x2F;MF522寄存器定义<br>&#x2F;&#x2F; PAGE 0<br>#define     RFU00                 0x00<br>#define     CommandReg            0x01<br>#define     ComIEnReg             0x02<br>#define     DivlEnReg             0x03<br>#define     ComIrqReg             0x04<br>#define     DivIrqReg             0x05<br>#define     ErrorReg              0x06<br>#define     Status1Reg            0x07<br>#define     Status2Reg            0x08<br>#define     FIFODataReg           0x09<br>#define     FIFOLevelReg          0x0A<br>#define     WaterLevelReg         0x0B<br>#define     ControlReg            0x0C<br>#define     BitFramingReg         0x0D<br>#define     CollReg               0x0E<br>#define     RFU0F                 0x0F<br>&#x2F;&#x2F; PAGE 1<br>#define     RFU10                 0x10<br>#define     ModeReg               0x11<br>#define     TxModeReg             0x12<br>#define     RxModeReg             0x13<br>#define     TxControlReg          0x14<br>#define     TxAutoReg             0x15<br>#define     TxSelReg              0x16<br>#define     RxSelReg              0x17<br>#define     RxThresholdReg        0x18<br>#define     DemodReg              0x19<br>#define     RFU1A                 0x1A<br>#define     RFU1B                 0x1B<br>#define     MifareReg             0x1C<br>#define     RFU1D                 0x1D<br>#define     RFU1E                 0x1E<br>#define     SerialSpeedReg        0x1F<br>&#x2F;&#x2F; PAGE 2<br>#define     RFU20                 0x20<br>#define     CRCResultRegM         0x21<br>#define     CRCResultRegL         0x22<br>#define     RFU23                 0x23<br>#define     ModWidthReg           0x24<br>#define     RFU25                 0x25<br>#define     RFCfgReg              0x26<br>#define     GsNReg                0x27<br>#define     CWGsCfgReg            0x28<br>#define     ModGsCfgReg           0x29<br>#define     TModeReg              0x2A<br>#define     TPrescalerReg         0x2B<br>#define     TReloadRegH           0x2C<br>#define     TReloadRegL           0x2D<br>#define     TCounterValueRegH     0x2E<br>#define     TCounterValueRegL     0x2F<br>&#x2F;&#x2F; PAGE 3<br>#define     RFU30                 0x30<br>#define     TestSel1Reg           0x31<br>#define     TestSel2Reg           0x32<br>#define     TestPinEnReg          0x33<br>#define     TestPinValueReg       0x34<br>#define     TestBusReg            0x35<br>#define     AutoTestReg           0x36<br>#define     VersionReg            0x37<br>#define     AnalogTestReg         0x38<br>#define     TestDAC1Reg           0x39<br>#define     TestDAC2Reg           0x3A<br>#define     TestADCReg            0x3B<br>#define     RFU3C                 0x3C<br>#define     RFU3D                 0x3D<br>#define     RFU3E                 0x3E<br>#define     RFU3F  0x3F</p><p>&#x2F;&#x2F;和MF522通讯时返回的错误代码<br>#define MI_OK                          0<br>#define MI_NOTAGERR                    1<br>#define MI_ERR                         2 </p><p>&#x2F;&#x2F;缓冲数组大小<br>#define MAXRLEN                       18</p><p>&#x2F;<em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>内部调用函数</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></em>*******&#x2F;<br>char PcdRequest(uint8_t req_code,uint8_t *pTagType);<br>char PcdAnticoll(uint8_t *pSnr);<br>char PcdSelect(uint8_t *pSnr);<br>char PcdAuthState(uint8_t auth_mode,uint8_t addr,uint8_t *pKey,uint8_t *pSnr);<br>char PcdRead(uint8_t addr,uint8_t *pData);<br>char PcdWrite(uint8_t addr,uint8_t *pData);<br>char PcdValue(uint8_t dd_mode,uint8_t addr,uint8_t *pValue);<br>char PcdBakValue(uint8_t sourceaddr, uint8_t goaladdr);<br>char PcdHalt(void);<br>void CalulateCRC(uint8_t *pIndata,uint8_t len,uint8_t *pOutData);<br>char PcdReset(void);<br>uint8_t ReadRawRC(uint8_t Address);<br>void WriteRawRC(uint8_t Address, uint8_t value);<br>void SetBitMask(uint8_t reg,uint8_t mask);<br>void ClearBitMask(uint8_t reg,uint8_t mask);<br>char PcdComMF522(uint8_t Command,uint8_t *pInData,uint8_t InLenByte,uint8_t *pOutData,unsigned int *pOutLenBit);<br>void PcdAntennaOn(void);<br>void PcdAntennaOff(void);<br>void RC522_Config(uint8_t Card_Type);</p><p>#endif </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### SPI定义</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spi的初始化默认即可，注意以下两项的设置，才能保持和模块的正常通信：</span><br><span class="line"></span><br><span class="line">**CLKPolarity**=SPI_POLARITY_LOW;    //串行同步时钟的空闲状态为低电平</span><br><span class="line"></span><br><span class="line">**CLKPhase**=SPI_PHASE_1EDGE;         //串行同步时钟的第1个跳变沿（上升或下降）数据被采样</span><br><span class="line"></span><br><span class="line">片选引脚改为软件管理，这样方便更改引脚，</span><br><span class="line"></span><br><span class="line">**NSS**=SPI_NSS_SOFT;                 //NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理</span><br><span class="line"></span><br><span class="line">SPI.c</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#include “spi.h”</p><p>SPI_HandleTypeDef SPI1_Handler;  &#x2F;&#x2F;SPI句柄</p><p>&#x2F;&#x2F;以下是SPI模块的初始化代码，配置成主机模式 <br>&#x2F;&#x2F;SPI口初始化<br>&#x2F;&#x2F;这里针是对SPI1的初始化<br>void SPI1_Init(void)<br>{<br>    SPI1_Handler.Instance&#x3D;SPI1_SPI;                         &#x2F;&#x2F;SPI1<br>    SPI1_Handler.Init.Mode&#x3D;SPI_MODE_MASTER;             &#x2F;&#x2F;设置SPI工作模式，设置为主模式<br>    SPI1_Handler.Init.Direction&#x3D;SPI_DIRECTION_2LINES;   &#x2F;&#x2F;设置SPI单向或者双向的数据模式:SPI设置为双线模式<br>    SPI1_Handler.Init.DataSize&#x3D;SPI_DATASIZE_8BIT;       &#x2F;&#x2F;设置SPI的数据大小:SPI发送接收8位帧结构<br>    SPI1_Handler.Init.CLKPolarity&#x3D;SPI_POLARITY_LOW;    &#x2F;&#x2F;串行同步时钟的空闲状态为低电平<br>    SPI1_Handler.Init.CLKPhase&#x3D;SPI_PHASE_1EDGE;         &#x2F;&#x2F;串行同步时钟的第1个跳变沿（上升或下降）数据被采样<br>    SPI1_Handler.Init.NSS&#x3D;SPI_NSS_SOFT;                 &#x2F;&#x2F;NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制<br>    SPI1_Handler.Init.BaudRatePrescaler&#x3D;SPI_BAUDRATEPRESCALER_256;&#x2F;&#x2F;定义波特率预分频的值:波特率预分频值为256<br>    SPI1_Handler.Init.FirstBit&#x3D;SPI_FIRSTBIT_MSB;        &#x2F;&#x2F;指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始<br>    SPI1_Handler.Init.TIMode&#x3D;SPI_TIMODE_DISABLE;        &#x2F;&#x2F;关闭TI模式<br>    SPI1_Handler.Init.CRCCalculation&#x3D;SPI_CRCCALCULATION_DISABLE;&#x2F;&#x2F;关闭硬件CRC校验<br>    SPI1_Handler.Init.CRCPolynomial&#x3D;7;                  &#x2F;&#x2F;CRC值计算的多项式,默认值为7<br>    HAL_SPI_Init(&amp;SPI1_Handler);&#x2F;&#x2F;初始化</p><pre><code>__HAL_SPI_ENABLE(&amp;SPI1_Handler);                    //使能SPI1SPI1_ReadWriteByte(0Xff);                           //启动传输,产生8个时钟脉冲, 达到清空DR的作用, 非必需</code></pre><p>}</p><p>&#x2F;&#x2F;SPI底层驱动，时钟使能，引脚配置<br>&#x2F;&#x2F;此函数会被HAL_SPI_Init()调用<br>&#x2F;&#x2F;hspi:SPI句柄<br>void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)<br>{<br>    GPIO_InitTypeDef GPIO_Initure;</p><pre><code>SPI1_SPI_CLK_ENABLE();SPI1_SCK_GPIO_CLK_ENABLE();SPI1_MISO_GPIO_CLK_ENABLE();SPI1_MOSI_GPIO_CLK_ENABLE();    GPIO_Initure.Pin=SPI1_SCK_GPIO_PIN;GPIO_Initure.Mode=GPIO_MODE_AF_PP;             GPIO_Initure.Pull=GPIO_PULLDOWN;                  GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;                    HAL_GPIO_Init(SPI1_SCK_GPIO_PORT,&amp;GPIO_Initure);GPIO_Initure.Pin=SPI1_MISO_GPIO_PIN;HAL_GPIO_Init(SPI1_MISO_GPIO_PORT,&amp;GPIO_Initure);GPIO_Initure.Pin=SPI1_MOSI_GPIO_PIN;HAL_GPIO_Init(SPI1_MOSI_GPIO_PORT,&amp;GPIO_Initure);</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">SPI.h</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#ifndef __SPI_H<br>#define __SPI_H<br>#include “sys.h”</p><p>extern SPI_HandleTypeDef SPI1_Handler;  &#x2F;&#x2F;SPI句柄</p><p>&#x2F;* SPI1 引脚 定义 *&#x2F;</p><p>#define SPI1_SCK_GPIO_PORT              GPIOA<br>#define SPI1_SCK_GPIO_PIN               GPIO_PIN_5<br>#define SPI1_SCK_GPIO_CLK_ENABLE()      do{ __HAL_RCC_GPIOA_CLK_ENABLE(); }while(0)   </p><p>#define SPI1_MISO_GPIO_PORT             GPIOA<br>#define SPI1_MISO_GPIO_PIN              GPIO_PIN_6<br>#define SPI1_MISO_GPIO_CLK_ENABLE()     do{ __HAL_RCC_GPIOA_CLK_ENABLE(); }while(0)   </p><p>#define SPI1_MOSI_GPIO_PORT             GPIOA<br>#define SPI1_MOSI_GPIO_PIN              GPIO_PIN_7<br>#define SPI1_MOSI_GPIO_CLK_ENABLE()     do{ __HAL_RCC_GPIOA_CLK_ENABLE(); }while(0)   </p><p>&#x2F;* SPI1相关定义 *&#x2F;<br>#define SPI1_SPI                        SPI1<br>#define SPI1_SPI_CLK_ENABLE()           do{ __HAL_RCC_SPI1_CLK_ENABLE(); }while(0)    </p><p>void SPI1_Init(void);</p><p>#endif</p><pre><code>## 四、实验结果![https://img-blog.csdnimg.cn/53941b94abc34bf5a897740cede1942a.png](https://img-blog.csdnimg.cn/53941b94abc34bf5a897740cede1942a.png)本实验在于经验分享和学习记录，有不正确的地方请读者指正。## 五、更新源码：源码已上传至gitee：[stm32: 一些stm32模块使用经验记录 - Gitee.com![https://csdnimg.cn/release/blog_editor_html/release2.3.6/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=N7T8](https://csdnimg.cn/release/blog_editor_html/release2.3.6/ckeditor/plugins/CsdnLink/icons/icon-default.png?t=N7T8)https://gitee.com/lrf1125962926/stm32/tree/RC522_SPI/](https://gitee.com/lrf1125962926/stm32/tree/RC522_SPI/)</code></pre>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32CubeMX_|_HAL库的ADC多通道数据采集（轮训、DMA、DMA+TIM)、读取内部传感器温度</title>
      <link href="/2024/03/stm32-STM32CubeMX-HAL%E5%BA%93%E7%9A%84ADC%E5%A4%9A%E9%80%9A%E9%81%93%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%EF%BC%88%E8%BD%AE%E8%AE%AD%E3%80%81DMA%E3%80%81DMA-TIM-%E3%80%81%E8%AF%BB%E5%8F%96%E5%86%85%E9%83%A8%E4%BC%A0%E6%84%9F%E5%99%A8%E6%B8%A9%E5%BA%A6/"/>
      <url>/2024/03/stm32-STM32CubeMX-HAL%E5%BA%93%E7%9A%84ADC%E5%A4%9A%E9%80%9A%E9%81%93%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%EF%BC%88%E8%BD%AE%E8%AE%AD%E3%80%81DMA%E3%80%81DMA-TIM-%E3%80%81%E8%AF%BB%E5%8F%96%E5%86%85%E9%83%A8%E4%BC%A0%E6%84%9F%E5%99%A8%E6%B8%A9%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="STM32CubeMX-HAL库的ADC多通道数据采集（轮训、DMA、DMA-TIM-、读取内部传感器温度"><a href="#STM32CubeMX-HAL库的ADC多通道数据采集（轮训、DMA、DMA-TIM-、读取内部传感器温度" class="headerlink" title="STM32CubeMX | HAL库的ADC多通道数据采集（轮训、DMA、DMA+TIM)、读取内部传感器温度"></a>STM32CubeMX | HAL库的ADC多通道数据采集（轮训、DMA、DMA+TIM)、读取内部传感器温度</h2><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li><p><a href="#STM32CubeMX__HALADCDMADMATIM_0">STM32CubeMX | HAL库的ADC多通道数据采集（轮训、DMA、DMA+TIM)、读取内部传感器温度</a>+ </p></li><li></li><li><p><a href="#1ADC_11">1、ADC简介</a>+ </p></li><li><p><a href="#11__13">1.1 采样定理</a>+ <a href="#12__15">1.2 模式介绍</a>+ <a href="#13__24">1.3 采样时间和采样频率的计算</a></p></li><li><p><a href="#2_56">2、轮训方式的多通道采集</a>+ </p></li><li><p><a href="#21__57">2.1 方式一：间断模式+扫描模式</a>+ <a href="#22__72">2.2 方式二：完全轮训</a></p></li><li><p><a href="#3DMA_108">3、DMA实现多通道采集</a>+ <a href="#4TIMDMA_136">4、TIM+DMA实现多通道采集</a>+ <a href="#5ADC_179">5、补充：内部温度传感器ADC通道</a></p></li></ul><p><em>注：本片文章以STM32F103系列为例，其他系列可能稍有不同。</em></p><h4 id="1、ADC简介"><a href="#1、ADC简介" class="headerlink" title="1、ADC简介"></a>1、ADC简介</h4><h5 id="1-1-采样定理"><a href="#1-1-采样定理" class="headerlink" title="1.1 采样定理"></a>1.1 采样定理</h5><h5 id="1-2-模式介绍"><a href="#1-2-模式介绍" class="headerlink" title="1.2 模式介绍"></a>1.2 模式介绍</h5><ul><li><strong>扫描模式：</strong> 使用STM32CUBEMX配置了多通道后，这一项默认开启且无法设置成关闭。这个模式就是自动扫描你开启的所有通道进行转换，直至转换完。例如你开启了CH0、CH1、CH2、CH3这四个通道，启动转换后ADC会自动将这4个通道全部转换完，但是这种连续性是可以被打断的，所以就引出了间断模式。 +  <strong>连续模式：</strong> 在CUBE中选中ENABLE就是连续模式，DISABLE就是单次模式。开启连续模式后，ADC的转换不由其他控制。例如将ADC设置为了定时器的TGRO触发采样，如果开启连续模式，ADC将忽略定时器的触发采样。（连续转换模式开启后其实就是满频率的采样）。 +  <strong>间断模式：</strong> 可以将多个通道进行<strong>分组采集</strong>，例如你开启了CH0~3这4个通道，假如你设置了间断次数为4，就相当于将4个通道分成了4组，每组1个通道，那么要想采集完这4个通道就需要手动触发4次ADC采集；如果设置了间断次数为2，那么采集完4个通道就需要手动触发2次ADC采集。</li></ul><h5 id="1-3-采样时间和采样频率的计算"><a href="#1-3-采样时间和采样频率的计算" class="headerlink" title="1.3 采样时间和采样频率的计算"></a>1.3 采样时间和采样频率的计算</h5><p><strong>ADC采样两点间隔的时间一定要大于ADC的采样时间！</strong> 采样时间怎么算，下面就细说一下。</p><p>STM32F103一般将时钟配置主频为72M、APB2为72M。ADC挂在APB2时钟总线上，且ADC的时钟不能超过14M。所以一般将ADC的分频设置为6，ADC的时钟主频就为72&#x2F;6&#x3D;12MHz。那么一个周期就是：1&#x2F;12MHz&#x3D;0.0833us。</p><p>以下截图为STM32F1参考手册（手册编号RM0008，可在ST官网直接搜索下载）：</p><p><img src="https://img-blog.csdnimg.cn/84ca12cd9d40459eb3e03c54889e9df3.png" alt="https://img-blog.csdnimg.cn/84ca12cd9d40459eb3e03c54889e9df3.png"></p><p>上图的意思是：ADC对输入电压采样若干个ADC_CLK周期，这些周期可通过ADC_SMPR1和ADC_SMPR2寄存器中的SMP[2:0]位进行修改。每个通道都可以用不同的采样时间进行采样。</p><p><strong>ADC转换时间 &#x3D; 采样时间 + 12.5个周期</strong></p><p>示例： $~~~~~~~~$当ADC时钟主频为14MHz并且采样时间为1.5个周期时：采样时间 &#x3D; 1.5 + 12.5 &#x3D; 14个周期；一个周期的时间为1&#x2F;14MHz，一共14个周期，<strong>1 &#x2F; 14MHz * 14个周期 &#x3D; 1us</strong>，那么此时ADC的采样频率就是1&#x2F;1us&#x3D;1000KHz&#x3D;1MHz，这也是理论上ADC的最大采样频率。</p><p>STM32F1系列的时钟主频一般设置为了12M，采样时间的设置所对应采样频率如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/de1135452e21490a94b671995f48824f.png" alt="https://img-blog.csdnimg.cn/de1135452e21490a94b671995f48824f.png"></p><p>知道了最短时间后，当ADC时钟主频为12M并且采样时间为1.5个周期时，ADC采样两点的时间必须大于1.17us。</p><p>而STM32F031系列的ADC时钟主频为14MHz，采样时间的设置所对应采样频率如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/4616052a159b4c6da44230ee81f9a4a0.png" alt="https://img-blog.csdnimg.cn/4616052a159b4c6da44230ee81f9a4a0.png"></p><p>当ADC时钟主频为14M并且采样时间为1.5个周期时，ADC采样两点的时间必须大于1us。</p><h4 id="2、轮训方式的多通道采集"><a href="#2、轮训方式的多通道采集" class="headerlink" title="2、轮训方式的多通道采集"></a>2、轮训方式的多通道采集</h4><h5 id="2-1-方式一：间断模式-扫描模式"><a href="#2-1-方式一：间断模式-扫描模式" class="headerlink" title="2.1 方式一：间断模式+扫描模式"></a>2.1 方式一：间断模式+扫描模式</h5><p>我开启了通道0、1、2以及内部温度读取通道一共四个通道：</p><p><img src="https://img-blog.csdnimg.cn/20200820144708671.png#pic_center" alt="https://img-blog.csdnimg.cn/20200820144708671.png#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/20200820144717271.png#pic_center" alt="https://img-blog.csdnimg.cn/20200820144717271.png#pic_center"><br> 如果想使用轮训方式并且不使用DMA的多通道采集，那么就要配置为 <strong>【单次模式+间断模式】</strong>，并且将Number Of Discontinuous Conversions为1，也就是每个通道分成了一个组，配置如下图：<br><img src="https://img-blog.csdnimg.cn/20200820145205371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center" alt="https://img-blog.csdnimg.cn/20200820145205371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center"></p><p>由于我这里设置间断数为1，也就是将4个通道分成了4组，那么我每次采集的时候都需要手动去触发ADC采集，也就是调用一次HAL_ADC_Start函数，完整代码如下：</p><p><img src="https://img-blog.csdnimg.cn/2020082014582133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center" alt="https://img-blog.csdnimg.cn/2020082014582133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center"><br> 我将通道0分别接到3.3V和GND上，4通道采集运行效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200820150008132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center" alt="https://img-blog.csdnimg.cn/20200820150008132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center"></p><h5 id="2-2-方式二：完全轮训"><a href="#2-2-方式二：完全轮训" class="headerlink" title="2.2 方式二：完全轮训"></a>2.2 方式二：完全轮训</h5><p>完全使用轮训的方式不能使用<strong>扫描模式</strong>（理论上来说多通道需要使用扫描模式，而不是完全轮训），但是使用STM32CUBEMX配置多通道扫描模式不无法被关闭的，所以我们先用STM32CUBEMX配置成一个通道：<br><img src="https://img-blog.csdnimg.cn/0b4c62f299d54bcf89ba61ea0aee0eca.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeS16aGVuZw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/0b4c62f299d54bcf89ba61ea0aee0eca.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAeS16aGVuZw==,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>然后读取ADC采集数值的函数是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">uint16_t ADC_Read(uint32_t Channel)</span><br><span class="line">&#123;</span><br><span class="line">ADC_ChannelConfTypeDef sConfig = &#123;0&#125;;</span><br><span class="line">sConfig.Channel = Channel;                                         /* 通道 */</span><br><span class="line">sConfig.Rank = ADC_REGULAR_RANK_1;                              </span><br><span class="line">sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;                  /* 采样时间 */</span><br><span class="line">if (HAL_ADC_ConfigChannel(&amp;hadc1, &amp;sConfig) != HAL_OK)             </span><br><span class="line">&#123;</span><br><span class="line">Error_Handler();</span><br><span class="line">&#125;</span><br><span class="line">HAL_ADC_Start(&amp;hadc1);</span><br><span class="line">HAL_ADC_PollForConversion(&amp;hadc1, HAL_MAX_DELAY);</span><br><span class="line">return (uint16_t)HAL_ADC_GetValue(&amp;hadc1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">uint16_t ADC_Value[5];</span><br><span class="line"></span><br><span class="line">ADC_Value[0] = ADC_Read(ADC_CHANNEL_1);  // 采集并读取通道1</span><br><span class="line">ADC_Value[1] = ADC_Read(ADC_CHANNEL_4);</span><br><span class="line">ADC_Value[2] = ADC_Read(ADC_CHANNEL_5);</span><br><span class="line">ADC_Value[3] = ADC_Read(ADC_CHANNEL_6);</span><br><span class="line">ADC_Value[4] = ADC_Read(ADC_CHANNEL_7);</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h4 id="3、DMA实现多通道采集"><a href="#3、DMA实现多通道采集" class="headerlink" title="3、DMA实现多通道采集"></a>3、DMA实现多通道采集</h4><p>通过DMA实现多通道数据采集，<strong>要将连续模式和间断模式关闭！</strong></p><p>如果连续模式开启，那么通过DMA传输到的数组中，每个通道所采集到的值对应数组中的一个位置就是不固定的。</p><p>例如你开启了IN0~IN3这四个通道，并通过DMA将这四个通道的数据放到ADC_Value这个大小为4的u16类型数组，</p><p>你在第一次采集的时候IN0通道的数值通过DMA被放在ADC_Value[0]，</p><p>第二次采集的时候IN0采集到的数值就可能被放到了ADC_Value[1]，</p><p>这样的话就极不方便我们对每个通道的数据进行分析和提取。</p><p>配置如下，将连续转换模式和间断转换模式关闭，并开启ADC的DMA通道，将DMA的模式配置为周期模式：</p><p><img src="https://img-blog.csdnimg.cn/20200820152200735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center" alt="https://img-blog.csdnimg.cn/20200820152200735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/ddd590ed84b44942863728c7b84ff639.png" alt="https://img-blog.csdnimg.cn/ddd590ed84b44942863728c7b84ff639.png"></p><p>代码如下：</p><p><img src="https://img-blog.csdnimg.cn/c457e847f73847ceb3a35f112f66667e.png" alt="https://img-blog.csdnimg.cn/c457e847f73847ceb3a35f112f66667e.png"><br> 4个通道采集运行效果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200820152427227.png#pic_center" alt="https://img-blog.csdnimg.cn/20200820152427227.png#pic_center"></p><h4 id="4、TIM-DMA实现多通道采集"><a href="#4、TIM-DMA实现多通道采集" class="headerlink" title="4、TIM+DMA实现多通道采集"></a>4、TIM+DMA实现多通道采集</h4><p>在不使用DMA的情况下，定时器控制ADC进行数据采集只能是单通道！如果开启了多通道，读取到的ADC采集值只会是最后一个通道的值！</p><p>所以，要想使用定时器控制ADC采集<strong>多通道</strong>，必须使用DMA！</p><p>CubeMX配置如下，使能ADC的DMA：</p><p><img src="https://img-blog.csdnimg.cn/42aa3e7658df4d89ac32b7f2a1ebc643.png" alt="https://img-blog.csdnimg.cn/42aa3e7658df4d89ac32b7f2a1ebc643.png"></p><p>ADC的触发方式设置为定时器3的触发事件：</p><p><img src="https://img-blog.csdnimg.cn/c4ff90b3330b44fda0a609316e2370db.png" alt="https://img-blog.csdnimg.cn/c4ff90b3330b44fda0a609316e2370db.png"></p><p>采样时间设置为了55.5个周期，对应采样频率为176.47KHz，所以定时器3的频率设置要低于176.47KHz。</p><p>设置定时器3分频系数为72，重载值为10，得到<code>72MHz / 72分频 / 10 = 100KHz</code>的定时器3：</p><p><img src="https://img-blog.csdnimg.cn/a50e71979339457e90f451449ec69d86.png" alt="https://img-blog.csdnimg.cn/a50e71979339457e90f451449ec69d86.png"></p><p>代码如下：</p><p><img src="https://img-blog.csdnimg.cn/c418cbe4d5b340a2ae94438927728da5.png" alt="https://img-blog.csdnimg.cn/c418cbe4d5b340a2ae94438927728da5.png"></p><p>运行结果如下：</p><p><img src="https://img-blog.csdnimg.cn/534899ff62e24bcb9909ffaff4b29065.png" alt="https://img-blog.csdnimg.cn/534899ff62e24bcb9909ffaff4b29065.png"></p><p>当然也可以选择进行一组数据，例如将32个点为一组数据进行采集，设置如下：</p><p><img src="https://img-blog.csdnimg.cn/a08aa8f0ae7c4cd8bfd70d40a980b3e1.png" alt="https://img-blog.csdnimg.cn/a08aa8f0ae7c4cd8bfd70d40a980b3e1.png"></p><p>运行结果如下：</p><p><img src="https://img-blog.csdnimg.cn/eb3feca6e37140eeb65f794634e86da3.png" alt="https://img-blog.csdnimg.cn/eb3feca6e37140eeb65f794634e86da3.png"></p><h4 id="5、补充：内部温度传感器ADC通道"><a href="#5、补充：内部温度传感器ADC通道" class="headerlink" title="5、补充：内部温度传感器ADC通道"></a>5、补充：内部温度传感器ADC通道</h4><p><img src="https://img-blog.csdnimg.cn/87fe51b0eb7b447798ade02be31b4329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/87fe51b0eb7b447798ade02be31b4329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70"><br> 上面图片是截取在STM32F103RC的datasheet中的，中文意思就是：温度传感器必须产生随温度线性变化的电压。转换范围在2v &lt; VDDA &lt; 3.6 V之间。温度传感器内部连接ADC1_IN16输入通道，用于将传感器输出电压转换为数字值。</p><p>内部温度计算公式：</p><p>【Temperature &#x3D; {(V25 - VSENSE) &#x2F; Avg_Slope} + 25】</p><p>字段说明：</p><ul><li><strong>V25：</strong> 最小1.34V，最大1.52V，典型值1.43V+ <strong>Avg_Slope：</strong> 最小4.0，最大4.6，典型值4.3mv&#x2F;℃+ <strong>VSENSE：</strong> ADC采集到的电压<br><img src="https://img-blog.csdnimg.cn/da0745b68e874c41b42573887a74e20e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/da0745b68e874c41b42573887a74e20e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxMTUzNDcxNTAz,size_16,color_FFFFFF,t_70"></li></ul><p>ADC值转电压值计算公式：【电压 &#x3D; ADC采集到的值 * 3.3 &#x2F; 4096】</p><p>看上图我采集到的值为1703，先转换为电压值：1703*3.3&#x2F;4096≈1.37</p><p><strong>（1.43 - 1.37）&#x2F; 0.0043 + 25 ≈ 38.95℃</strong></p><p>ends…</p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于STM32的HC-SR501红外感应模块驱动与应用</title>
      <link href="/2024/03/stm32-%E5%9F%BA%E4%BA%8ESTM32%E7%9A%84HC-SR501%E7%BA%A2%E5%A4%96%E6%84%9F%E5%BA%94%E6%A8%A1%E5%9D%97%E9%A9%B1%E5%8A%A8%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
      <url>/2024/03/stm32-%E5%9F%BA%E4%BA%8ESTM32%E7%9A%84HC-SR501%E7%BA%A2%E5%A4%96%E6%84%9F%E5%BA%94%E6%A8%A1%E5%9D%97%E9%A9%B1%E5%8A%A8%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><strong>一、 简介 HC-SR501红外感应模块是一种常用的人体红外感应模块，常用于安防监控、智能家居等领域。本文将介绍如何在STM32单片机上驱动和应用HC-SR501红外感应模块，实现基本的人体检测功能。</strong></p><p><strong>二、 模块原理</strong> HC-SR501红外感应模块基于红外热释电传感器（PIR sensor）原理，当检测到人体或其他热源时，输出高电平信号。该模块有延迟时间和重复触发时间两个可调节的螺旋调节器，可根据需求调节模块的灵敏度和触发后的输出信号时长。</p><p><strong>三、 连接与驱动 1. 连接</strong> 连接HC-SR501模块至STM32单片机，将模块的OUT引脚连接至STM32的GPIO引脚，以接收感应模块的输出信号。同时，通过电源模块连接模块至单片机的供电引脚。</p><p><img src="https://img-blog.csdnimg.cn/direct/12a9a768aaa04891b1c9bfc0d758aae5.png" alt="https://img-blog.csdnimg.cn/direct/12a9a768aaa04891b1c9bfc0d758aae5.png"></p><p><strong>2. 驱动</strong> 在STM32的开发环境中，编写对HC-SR501模块的驱动程序。以下是一个简单的示例代码：</p><pre><code>```c#include &quot;stm32f4xx.h&quot;#define HC_SR501_PIN GPIO_PIN_0#define HC_SR501_PORT GPIOAvoid HC_SR501_Init(void) &#123;  GPIO_InitTypeDef GPIO_InitStruct;  __HAL_RCC_GPIOA_CLK_ENABLE();  GPIO_InitStruct.Pin = HC_SR501_PIN;  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;  GPIO_InitStruct.Pull = GPIO_NOPULL;  HAL_GPIO_Init(HC_SR501_PORT, &amp;GPIO_InitStruct);&#125;int HC_SR501_Read(void) &#123;  return HAL_GPIO_ReadPin(HC_SR501_PORT, HC_SR501_PIN);&#125;void HC_SR501_Application(void) &#123;  while (1) &#123;    if (HC_SR501_Read()) &#123;      // 检测到人体，执行相应操作    &#125; else &#123;      // 未检测到人体，执行相应操作    &#125;  &#125;&#125;int main(void) &#123;  HC_SR501_Init();  HC_SR501_Application();&#125;</code></pre><p>以上代码中，首先初始化了GPIO引脚，然后在应用函数中不断读取感应模块的输出信号，根据输出信号执行不同的操作。</p><p><strong>四、 应用示例 1. 基于HC-SR501红外感应模块的人体检测报警系统</strong> 通过连接HC-SR501模块至STM32单片机，并配合蜂鸣器或其他报警装置，可以实现一个简单的人体检测报警系统。当检测到人体时，系统触发报警装置，实现安防监控。</p><p><strong>2. 基于HC-SR501红外感应模块的智能照明控制系统</strong> 将HC-SR501模块连接至STM32单片机，再连接至LED灯或其他照明设备，可以实现智能照明控制系统。当检测到人体时，系统自动开启照明设备，当未检测到人体时则关闭照明设备，实现智能节能控制。</p><p><strong>以上是基于STM32的HC-SR501红外感应模块的驱动与应用的基本介绍，通过上述方法，可以实现针对不同场景的人体感应控制系统。</strong></p><p>✅作者简介：热爱科研的嵌入式开发者，修心和技术同步精进</p><p>代码获取、问题探讨及文章转载可私信。</p><p> ☁ 愿你的生命中有够多的云翳,来造就一个美丽的黄昏。</p><p>🍎获取更多嵌入式资料可点击链接进群领取，谢谢支持！👇</p><p><a href="https://fss.mpay8.cn/article/dmrjinh2C6fjejm">点击领取更多详细资料</a></p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你，通过HAL库实现STM32的超声波测距--以SR-04为例</title>
      <link href="/2024/03/stm32-%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%EF%BC%8C%E9%80%9A%E8%BF%87HAL%E5%BA%93%E5%AE%9E%E7%8E%B0STM32%E7%9A%84%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%B5%8B%E8%B7%9D-%E4%BB%A5SR-04%E4%B8%BA%E4%BE%8B/"/>
      <url>/2024/03/stm32-%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%EF%BC%8C%E9%80%9A%E8%BF%87HAL%E5%BA%93%E5%AE%9E%E7%8E%B0STM32%E7%9A%84%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%B5%8B%E8%B7%9D-%E4%BB%A5SR-04%E4%B8%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><strong>目录</strong></p><p><a href="#0%E3%80%81SR-04%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86">0、SR-04基本原理</a></p><p><a href="#1%E3%80%81%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">1、准备工作</a></p><p><a href="#2%E3%80%81%E8%BF%9E%E7%BA%BF">2、连线</a></p><p><a href="#%C2%A03%E3%80%81STM32CUBEMX%E8%AE%BE%E7%BD%AE"> 3、STM32CUBEMX设置</a></p><p><a href="#3.1%E6%96%B0%E5%BB%BA%E5%B7%A5%E7%A8%8B">3.1新建工程</a></p><p><a href="#3.2%E8%8A%AF%E7%89%87%E9%80%9A%E7%94%A8%E8%AE%BE%E7%BD%AE">3.2芯片通用设置</a></p><p><a href="#3.3%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8D%95%E8%8E%B7%E8%AE%BE%E7%BD%AE">3.3定时器捕获设置</a></p><p><a href="#%E2%80%8B3.4%E5%85%B6%E4%BB%96%E8%AE%BE%E7%BD%AE">​3.4其他设置</a></p><p><a href="#3.5%E7%94%9F%E6%88%90%E5%B7%A5%E7%A8%8B">3.5生成工程</a></p><p><a href="#%C2%A04%E3%80%81%E7%A8%8B%E5%BA%8F%E5%AE%8C%E5%96%84"> 4、程序完善</a></p><p><a href="#4.1%E5%AE%8C%E5%96%84%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0">4.1完善打印输出函数</a></p><p><a href="#%C2%A04.2%E5%AE%8C%E5%96%84tim.c"> 4.2完善tim.c</a></p><p><a href="#4.3%E5%AE%8C%E5%96%84gpio.c%C2%A0">4.3完善gpio.c </a></p><p><a href="#4.4%E5%AE%8C%E5%96%84main%E5%87%BD%E6%95%B0%C2%A0">4.4完善main函数 </a></p><p><a href="#%C2%A05%E3%80%81%E6%80%BB%E7%BB%93"> 5、总结</a></p><h2 id="0、SR-04基本原理"><a href="#0、SR-04基本原理" class="headerlink" title="0、SR-04基本原理"></a>0、SR-04基本原理</h2><p>声波遇到障碍物会反射，而声波的速度已知，所以只需要知道发射到接收的时间差，就能轻松计算出测量距离，再结合发射器和接收器的距离，就能算出障碍物的实际距离。</p><p><img src="https://img-blog.csdnimg.cn/2020032802343260.png" alt="https://img-blog.csdnimg.cn/2020032802343260.png"></p><p> </p><p><img src="https://img-blog.csdnimg.cn/20200328023701292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjU4OTgx,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200328023701292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjU4OTgx,size_16,color_FFFFFF,t_70"></p><p> </p><p>以HC-SR04硬件为例，端口为VCC、Trig、Echo、GND。</p><p>VCC–接STM32板子+5V； GND–接STM32板子GND； Trig–为触发控制信号输入，触发测距，给至少10us的高电平信号，模块自动发射8个40KHz的方波，自动检测是否有信号返回； Echo–回响信号输出，有信号返回，通过IO口ECHO输出一个高电平，高电平持续时间就是超声波从发射到返回的时间。 那用STM32怎么给端口信号呢？又是怎么获取信号呢？ Trig端口为超声波模块的输入信号，也就是通过STM23一个端口推挽输出一个至少10us的高电平信号即可，利用delay_ms(20)实现； Echo端口为超声波模块的输出信号，也就是利用STM32端口捕获高电平时间，那么这个端口肯定是可以用做定时器的端口。 通过以上分析，这里采用以下STM32端口</p><p><img src="https://img-blog.csdnimg.cn/c10df4b58e2d49cb8b3b363c0e22019c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/c10df4b58e2d49cb8b3b363c0e22019c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/3b14aae863264dd4afbc8445ad66a7d9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/3b14aae863264dd4afbc8445ad66a7d9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"> </p><h2 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h2><p>开发板：STM32F1精英版</p><p>软件：STM32CubeMx软件</p><p>IDE： MDK-Keil软件</p><p>传感器：HC-SR04</p><h2 id="2、连线"><a href="#2、连线" class="headerlink" title="2、连线"></a>2、连线</h2><p>选择TIM5的CH1即PA0作为输入捕获引脚（Echo），选择PA5作为触发脚Trig。具体连接线如下：</p><p>红线连接精英版的5V与SR04的VCC脚</p><p>白线连接精英板的GND与SR04的GND脚</p><p>橙色线连接精英板的PA5与Trig脚</p><p>黑色线连接精英板的PA0与Echo脚</p><p><img src="https://img-blog.csdnimg.cn/2e1fa4f5325345729a0a44473dfd2526.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/2e1fa4f5325345729a0a44473dfd2526.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="3、STM32CUBEMX设置"><a href="#3、STM32CUBEMX设置" class="headerlink" title="3、STM32CUBEMX设置"></a>3、STM32CUBEMX设置</h2><h3 id="3-1新建工程"><a href="#3-1新建工程" class="headerlink" title="3.1新建工程"></a>3.1新建工程</h3><p>1）新建工程</p><p><img src="https://img-blog.csdnimg.cn/7115721af4f7487fae5b0ff66f45667d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/7115721af4f7487fae5b0ff66f45667d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>2）选择芯片</p><p><img src="https://img-blog.csdnimg.cn/9cecc36eced643b185e29591bbe60cf0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/9cecc36eced643b185e29591bbe60cf0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="3-2芯片通用设置"><a href="#3-2芯片通用设置" class="headerlink" title="3.2芯片通用设置"></a>3.2芯片通用设置</h3><p>1）时钟芯片设置</p><p><img src="https://img-blog.csdnimg.cn/e262e3fba4f8447ab4c8c567225173a5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/e262e3fba4f8447ab4c8c567225173a5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>2）时钟设置</p><p><img src="https://img-blog.csdnimg.cn/abb1957bcbce4521af21421c25464c77.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/abb1957bcbce4521af21421c25464c77.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>3）系统调试设置</p><p><img src="https://img-blog.csdnimg.cn/ed518ef9e29c4359bd52a2ca81e8823e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/ed518ef9e29c4359bd52a2ca81e8823e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="3-3定时器捕获设置"><a href="#3-3定时器捕获设置" class="headerlink" title="3.3定时器捕获设置"></a>3.3定时器捕获设置</h3><p>由于前文连线中，我们将TIMER5CH1作为输入捕获引脚，所以对TIMER5进行设置：</p><p>Channel 1选择：Input Capture direct mode</p><p>与分频系数填写：72-1（则每次计数为1us）</p><p>Polarity Selection选择：Rising Edge（上升沿）</p><p>其他保持不变。</p><p><img src="https://img-blog.csdnimg.cn/c4191f72c63049fdbfb8f8b96f672f66.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/c4191f72c63049fdbfb8f8b96f672f66.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>NVIC settings选择TIM5 global interrupt</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><img src="https://img-blog.csdnimg.cn/d1d24efee88d46178d8001eb1f8eaf61.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/d1d24efee88d46178d8001eb1f8eaf61.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"><br> 3.4其他设置</p><p>1）USART1设置</p><p>为了方便调试，将测量所得数据通过串口传递到电脑上进行显示，此处使用串口1通过printf将输出发送至电脑。</p><p><img src="https://img-blog.csdnimg.cn/82ca9b0ff3e94cfa8286e7d5573fac1a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/82ca9b0ff3e94cfa8286e7d5573fac1a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p> 2）GPIO配置</p><p> 此处选择PA5作为Trig脚，具体配置如下：</p><p><img src="https://img-blog.csdnimg.cn/47ed779ee47641cfb88d1b94d4804ce0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/47ed779ee47641cfb88d1b94d4804ce0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="3-5生成工程"><a href="#3-5生成工程" class="headerlink" title="3.5生成工程"></a>3.5生成工程</h3><p><img src="https://img-blog.csdnimg.cn/a6e90e647fe24e5087daa4b099e7da40.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/a6e90e647fe24e5087daa4b099e7da40.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/46dfa628b984462d95dc70b4a37152c0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/46dfa628b984462d95dc70b4a37152c0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="4、程序完善"><a href="#4、程序完善" class="headerlink" title="4、程序完善"></a>4、程序完善</h2><h3 id="4-1完善打印输出函数"><a href="#4-1完善打印输出函数" class="headerlink" title="4.1完善打印输出函数"></a>4.1完善打印输出函数</h3><p>在main函数中加入下面语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line">/* Private includes ----------------------------------------------------------*/</span><br><span class="line">/* USER CODE BEGIN Includes */</span><br><span class="line"><span class="comment">#include &quot;stdio.h&quot;</span></span><br><span class="line"><span class="comment">#include &quot;string.h&quot;</span></span><br><span class="line">/* USER CODE END Includes */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* Private user code ---------------------------------------------------------*/</span><br><span class="line">/* USER CODE BEGIN 0 */</span><br><span class="line"><span class="comment">#ifdef __GNUC__</span></span><br><span class="line"><span class="comment">#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)</span></span><br><span class="line"><span class="comment">#else</span></span><br><span class="line"><span class="comment">#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"></span><br><span class="line">PUTCHAR_PROTOTYPE</span><br><span class="line">&#123;</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, (uint8_t *)&amp;ch, 1, 0xFFFF);</span><br><span class="line"><span class="built_in">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line">/* USER CODE END 0 */```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">加入此语句之后可以在main函数中加入<span class="built_in">printf</span>语句测试是否成功。</span><br><span class="line"></span><br><span class="line">将精英板USB232口通过USB数据线与电脑连接，并在电脑上打开串口调试软件： </span><br><span class="line">![https://img-blog.csdnimg.cn/a79a767a9dfa4baeb621c05235cbc92b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16](https://img-blog.csdnimg.cn/a79a767a9dfa4baeb621c05235cbc92b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">![https://img-blog.csdnimg.cn/d27a80b3c0fa4d30999384ca8c8a46d7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16](https://img-blog.csdnimg.cn/d27a80b3c0fa4d30999384ca8c8a46d7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###  4.2完善tim.c</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在tim.c中加入以下程序：</span><br><span class="line"></span><br><span class="line">定义变量：</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">/* USER CODE BEGIN 0 */</span><br><span class="line">//捕获状态</span><br><span class="line">//[7]:0,没有成功的捕获;1,成功捕获到一次.</span><br><span class="line">//[6]:0,还没捕获到低电平;1,已经捕获到低电平了.</span><br><span class="line">//[5:0]:捕获低电平后溢出的次数</span><br><span class="line">uint8_t  TIM5CH2_CAPTURE_STA=0;//输入捕获状态    </span><br><span class="line">uint16_t TIM5CH2_CAPTURE_VAL;//输入捕获值(TIM2是16位)</span><br><span class="line">/* USER CODE END 0 */```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 在底部加入溢出回调函数和输入捕获回调函数。其中参考了正点原子官方的的输入 捕获回调函数。</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">/* USER CODE BEGIN 1 */</span><br><span class="line">void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//更新中断（溢出）发生时执行</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((TIM5CH2_CAPTURE_STA&amp;<span class="number">0</span>X80) ==<span class="number">0</span>)//还未捕获成功</span><br><span class="line">&#123;</span><br><span class="line">if(TIM5CH2_CAPTURE_STA&amp;<span class="number">0</span>X40)//捕获到一个下降沿</span><br><span class="line">&#123;</span><br><span class="line">if((TIM5CH2_CAPTURE_STA&amp;<span class="number">0</span>X3F)==<span class="number">0</span>X3F)//高电平时间太长了</span><br><span class="line">&#123;</span><br><span class="line">TIM5CH2_CAPTURE_STA |= <span class="number">0</span>X80;//标记成功捕获一次</span><br><span class="line">TIM5CH2_CAPTURE_VAL = <span class="number">0</span>XFFFF;//</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line">TIM5CH2_CAPTURE_STA++;//否则标记溢出数加一</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)//捕获中断发生时执行</span><br><span class="line">&#123;</span><br><span class="line">if((TIM5CH2_CAPTURE_STA&amp;<span class="number">0</span>x80)==<span class="number">0</span>)//还未捕获成功</span><br><span class="line">&#123;</span><br><span class="line">if(TIM5CH2_CAPTURE_STA&amp;<span class="number">0</span>x40)//成功捕获到一个下降沿</span><br><span class="line">&#123;</span><br><span class="line">TIM5CH2_CAPTURE_STA |= <span class="number">0</span>X80;//标记成功，捕获到一次高电平完成</span><br><span class="line">TIM5CH2_CAPTURE_VAL  = HAL_TIM_ReadCapturedValue(&amp;htim5, TIM_CHANNEL_1);//获取当前捕获值</span><br><span class="line">TIM_RESET_CAPTUREPOLARITY(&amp;htim5, TIM_CHANNEL_1);//清除原来设置</span><br><span class="line">TIM_SET_CAPTUREPOLARITY(&amp;htim5, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);//捕获到下降沿后，将捕获复位到捕获上升沿</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else//捕获到一个上升沿</span><br><span class="line">&#123;</span><br><span class="line">TIM5CH2_CAPTURE_STA = <span class="number">0</span>;</span><br><span class="line">TIM5CH2_CAPTURE_VAL = <span class="number">0</span>;</span><br><span class="line">TIM5CH2_CAPTURE_STA |= <span class="number">0</span>x40;//第六位标记为捕获到上升沿</span><br><span class="line">__HAL_TIM_DISABLE(&amp;htim5);//关闭定时器</span><br><span class="line">__HAL_TIM_SET_COUNTER(&amp;htim5, <span class="number">0</span>);//定时器初始值设置为<span class="number">0</span></span><br><span class="line">TIM_RESET_CAPTUREPOLARITY(&amp;htim5, TIM_CHANNEL_1);</span><br><span class="line">TIM_SET_CAPTUREPOLARITY(&amp;htim5, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);//捕获到上升沿之后，将捕获设置为下降沿</span><br><span class="line">__HAL_TIM_ENABLE(&amp;htim5);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/* USER CODE END <span class="number">1</span> */```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### <span class="number">4.3</span>完善gpio.c </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">模拟Trig脚，先置位，过<span class="number">40</span>us后，复位。</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">/* USER CODE BEGIN <span class="number">2</span> */</span><br><span class="line">void CHL_capture(void)</span><br><span class="line">&#123;</span><br><span class="line">uint32_t i;</span><br><span class="line"></span><br><span class="line">HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);</span><br><span class="line">for(i=<span class="number">0</span>;i&lt;<span class="number">72</span>*<span class="number">40</span>;i++)</span><br><span class="line">__NOP();</span><br><span class="line">HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/* USER CODE END <span class="number">2</span> */```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### <span class="number">4.4</span>完善main函数 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">  /* USER CODE BEGIN <span class="number">1</span> */</span><br><span class="line">float len = <span class="number">0</span>;</span><br><span class="line">uint32_t time= <span class="number">0</span>;</span><br><span class="line">uint8_t count = <span class="number">0</span>;</span><br><span class="line">  /* USER CODE END <span class="number">1</span> */</span><br><span class="line"></span><br><span class="line">  /* MCU Configuration--------------------------------------------------------*/</span><br><span class="line"></span><br><span class="line">  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span><br><span class="line">  HAL_Init();</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN Init */</span><br><span class="line"></span><br><span class="line">  /* USER CODE END Init */</span><br><span class="line"></span><br><span class="line">  /* Configure the system clock */</span><br><span class="line">  SystemClock_Config();</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN SysInit */</span><br><span class="line"></span><br><span class="line">  /* USER CODE END SysInit */</span><br><span class="line"></span><br><span class="line">  /* Initialize all configured peripherals */</span><br><span class="line">  MX_GPIO_Init();</span><br><span class="line">  MX_TIM5_Init();</span><br><span class="line">  MX_USART1_UART_Init();</span><br><span class="line">  /* USER CODE BEGIN <span class="number">2</span> */</span><br><span class="line">printf(&quot;Hello World!\r\n&quot;);</span><br><span class="line">HAL_TIM_IC_Start_IT(&amp;htim5,TIM_CHANNEL_1);   //开启TIM2的捕获通道<span class="number">2</span>，并且开启捕获中断</span><br><span class="line">    __HAL_TIM_ENABLE_IT(&amp;htim5,TIM_IT_UPDATE);   //使能更新中断</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /* USER CODE END <span class="number">2</span> */</span><br><span class="line"></span><br><span class="line">  /* Infinite loop */</span><br><span class="line">  /* USER CODE BEGIN WHILE */</span><br><span class="line">  while (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    /* USER CODE END WHILE */</span><br><span class="line"></span><br><span class="line">    /* USER CODE BEGIN <span class="number">3</span> */</span><br><span class="line">  HAL_Delay(<span class="number">100</span>);</span><br><span class="line">  CHL_capture();</span><br><span class="line">  if(TIM5CH2_CAPTURE_STA &amp; <span class="number">0</span>x80)//成功捕获一个脉宽</span><br><span class="line">  &#123;</span><br><span class="line">time = TIM5CH2_CAPTURE_STA &amp; <span class="number">0</span>x3F;//获取溢出次数</span><br><span class="line">time *= <span class="number">65536</span>;//获得溢出的时间值</span><br><span class="line">time += TIM5CH2_CAPTURE_VAL;//加上最后一次取得的值</span><br><span class="line">len = time * <span class="number">342.62</span>*<span class="number">100</span>/<span class="number">2000000</span>;</span><br><span class="line">  </span><br><span class="line">TIM5CH2_CAPTURE_STA = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  printf(&quot;LENGTH: %f CM\r\n&quot;, len);</span><br><span class="line">  &#125;</span><br><span class="line">  /* USER CODE END <span class="number">3</span> */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>本文介绍了通过HAL库完成SR-04超声波传感器距离的测量。包括了，超声波传感器的原理、STM32CUBEMX的配置，以及程序的完善。最终的结果如下：</p><p><img src="https://img-blog.csdnimg.cn/bdd5e4a431694f4897745b2ebb55fbdd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/bdd5e4a431694f4897745b2ebb55fbdd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rGk5a6q5a6H,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p> </p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于STM32F103C8T6（HAL库）的HC-SR501红外人体传感及HC-SR04超声波测距</title>
      <link href="/2024/03/stm32-%E5%9F%BA%E4%BA%8ESTM32F103C8T6%EF%BC%88HAL%E5%BA%93%EF%BC%89%E7%9A%84HC-SR501%E7%BA%A2%E5%A4%96%E4%BA%BA%E4%BD%93%E4%BC%A0%E6%84%9F%E5%8F%8AHC-SR04%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%B5%8B%E8%B7%9D/"/>
      <url>/2024/03/stm32-%E5%9F%BA%E4%BA%8ESTM32F103C8T6%EF%BC%88HAL%E5%BA%93%EF%BC%89%E7%9A%84HC-SR501%E7%BA%A2%E5%A4%96%E4%BA%BA%E4%BD%93%E4%BC%A0%E6%84%9F%E5%8F%8AHC-SR04%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%B5%8B%E8%B7%9D/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="系列文章目录"><a href="#系列文章目录" class="headerlink" title="系列文章目录"></a>系列文章目录</h2><p><a href="https://blog.csdn.net/h568630659/article/details/121404155">一、基于STM32F103C8T6最小系统板和STM32CubeMX实现LED灯循环闪烁</a> <a href="https://blog.csdn.net/h568630659/article/details/121427218">二、基于STM32F103C8T6和STM32CubeMX实现UART串口通信数据收发</a> <a href="https://blog.csdn.net/h568630659/article/details/121465665">三、实战小例程 基于STM32F103C8T6最小系统板和STM32CubeMX驱动WS2812B光立方</a> <a href="https://blog.csdn.net/h568630659/article/details/121764481">四、基于STM32F103C8T6最小系统板HAL库CubeMX驱动HC-SR501红外人体传感模块</a> <a href="https://blog.csdn.net/h568630659/article/details/122058600">五、基于STM32F103C8T6（HAL库）的HC-SR501红外人体传感及HC-SR04超声波测距</a></p><h4 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h4><ul><li><a href="#_0">系列文章目录</a>+ <a href="#_16">前言</a>+ <a href="#_22">一、模块简介</a>+ <a href="#CubeMX_45">二、配置CubeMX</a>+ <a href="#_67">三、硬件连线部分</a>+ <a href="#_94">四、逻辑代码部分</a>+ </li><li><a href="#HC_SR04c_97">HC_SR04.c</a>+ <a href="#HC_SR04h_181">HC_SR04.h</a>+ <a href="#mainc_193">main.c</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 我在上一篇文章中驱动了HC-SR501红外人体传感模块，但在测试过程中发现，这个模块的热释电探头过于灵敏了，甚至有的时候往上哈气，会因为检测到类似于人体的温度而误判为感应到人体，所以为了减少误判概率，我打算再添加一个测距模块，在红外感应到人体时，再次判断人体与传感器的距离，在满足预设的距离范围时，才确定有人体接近，进行后续操作。 </p><h2 id="一、模块简介"><a href="#一、模块简介" class="headerlink" title="一、模块简介"></a>一、模块简介</h2><p><strong>HC-SR501红外人体感应模块资料介绍：</strong> <a href="https://www.arduino.cn/thread-2851-1-1.html">探究人体红外传感器HC-SR501</a></p><p><strong>HC-SR04超声波测距模块资料介绍：</strong></p><p><img src="https://img-blog.csdnimg.cn/92ad9fec95424c4daee75611f36e9b7b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/92ad9fec95424c4daee75611f36e9b7b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>引脚名称引脚作用VCC<strong>3-5.5V</strong>供电（实测发现可以3.3V供电，但没有5V供电测得准）GND接地Trig外部触发信号输入，输入一个高于10μs的高电平即可触发模块测距Echo回响信号输出，测距结束时此管脚输出一个高电平，电平宽度反映超声波往返时间之和</p><p><strong>工作原理：</strong></p><p><img src="https://img-blog.csdnimg.cn/2440fa92274644939b0de5e59ef1852b.png" alt="https://img-blog.csdnimg.cn/2440fa92274644939b0de5e59ef1852b.png"></p><p><img src="https://img-blog.csdnimg.cn/0fa754c51ca94c2188fbdfa59f3604ea.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/0fa754c51ca94c2188fbdfa59f3604ea.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16"><br>  <strong>简而言之： 给Trig一个10μS以上的高电平,模块开始工作，模块内自动发送八个40khz方波，并自主检测是否有电波返回。此时需要检测Echo处的电平，当为高电平的时候记一个时间；当Echo出为低电平的时候再记一个时间，这两个时间的差就是高电平持续的时间，最后用测距公式进行计算</strong>。</p><h2 id="二、配置CubeMX"><a href="#二、配置CubeMX" class="headerlink" title="二、配置CubeMX"></a>二、配置CubeMX</h2><p><strong>1、新建工程; 2、配置时钟源，在RCC里面的HSE配置的是晶振时钟; 3、配置程序烧录引脚SYS为SWD模式; 4、配置GPIO输出口，配置一个LED灯（我的板子是PC13），起到检测到人体时的指示作用; 5、配置GPIO输入口，用来读取HC-SR501模块的输出电平，我选的是PA1口;</strong> <strong>6、配置GPIO输入口，用来检测HC-SR04超声波测距模块的回响信号输出，我选择PB5口，命名为HC_SR04_Echo_Pin; 7、配置GPIO输出口，用来触发HC-SR04超声波测距模块，我选择PB4口，命名为HC_SR04_Trig_Pin; 8、使能定时器，用来实现微秒延时，和测量HC-SR04模块高电平时间，我选择TIM2，并使能TIM2中断;</strong><br><img src="https://img-blog.csdnimg.cn/f5c269ef459b4f58a202b49397c11036.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_17,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/f5c269ef459b4f58a202b49397c11036.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_17,color_FFFFFF,t_70,g_se,x_16"><br> TIM2挂载在APB1，时钟来源频率为36MHz，故取预分频系数<code>PSC=36-1</code>，计数周期<code>Counter</code>设为<code>60000-1</code>。即此时定时器频率为36M&#x2F;36&#x3D;1MHz，每60ms进一次中断，60000μs对应实际测距范围大概为10m，远远超过我的需求。</p><p><img src="https://img-blog.csdnimg.cn/96058ff9807d44dea3a1b773f47f9330.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/96058ff9807d44dea3a1b773f47f9330.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/14c2aefe04d5410b89a5300226b73aa6.png" alt="https://img-blog.csdnimg.cn/14c2aefe04d5410b89a5300226b73aa6.png"></p><p><strong>9、配置串口收发引脚; 10、配置时钟树，我还是开到最高的72MHz; 11、进行项目设置，最后生成代码，CubeMX部分就大功告成了</strong></p><p><img src="https://img-blog.csdnimg.cn/1b053bd5569c41b7b11caeba75037c7d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/1b053bd5569c41b7b11caeba75037c7d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="三、硬件连线部分"><a href="#三、硬件连线部分" class="headerlink" title="三、硬件连线部分"></a>三、硬件连线部分</h2><p>CH340 ↔ STM32F103C8T6最小系统板：  TX    ↔        RX  RX    ↔        TX</p><p>DAP-LINK ↔ STM32F103C8T6最小系统板   3.3V    ↔         VCC   GND    ↔         GND   SWIO   ↔         SWIO  SWCLK  ↔        SWCLK</p><p>HC-SR501模块 ↔ STM32F103C8T6最小系统板     OUT      ↔           PA1     GND      ↔           GND</p><p>HC-SR501模块 ↔ DAP-LINK <strong>（这里注意模块供电范围为4.5V-20V，用3.3V无法驱动）</strong>      VCC     ↔    5V</p><p>HC-SR04模块   ↔  CH340      VCC      ↔    5V</p><p>HC-SR04模块   ↔ STM32F103C8T6最小系统板      Trig       ↔          PB4      Echo      ↔          PB5      GND      ↔          GND</p><h2 id="四、逻辑代码部分"><a href="#四、逻辑代码部分" class="headerlink" title="四、逻辑代码部分"></a>四、逻辑代码部分</h2><p>代码框架是基于上一篇HC-SR501红外人体感应模块修改而成的，想要完整代码的话可以和上篇文章一起看。</p><h3 id="HC-SR04-c"><a href="#HC-SR04-c" class="headerlink" title="HC_SR04.c"></a>HC_SR04.c</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;main.h&quot;</span><br><span class="line">#include &quot;HC_SR04.h&quot;</span><br><span class="line">#include &quot;stm32f1xx_hal.h&quot;</span><br><span class="line">#include &quot;stm32f1xx_it.h&quot;</span><br><span class="line"> </span><br><span class="line">static float distance_result;</span><br><span class="line">/*</span><br><span class="line">*********************************************************</span><br><span class="line">函数原型：void Delay_us(uint16_t time)</span><br><span class="line">函数输入：无符号整形</span><br><span class="line">函数输出：无</span><br><span class="line">函数功能：利用定时器实现微秒级延时</span><br><span class="line">*********************************************************</span><br><span class="line">*/</span><br><span class="line">void Delay_us(uint16_t time)</span><br><span class="line">&#123;</span><br><span class="line">uint16_t a1=TIM2-&gt;CNT;</span><br><span class="line">while(TIM2-&gt;CNT-a1&lt;time);</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">*********************************************************</span><br><span class="line">函数原型：void HC_SR04_startrange(void)</span><br><span class="line">函数输入：无</span><br><span class="line">函数输出：无</span><br><span class="line">函数功能：从trig引脚生成一个不小于10us的高电平触发测距，触发后模块自动产生8个40kHz方波，自动检测是否有信号返回</span><br><span class="line">*********************************************************</span><br><span class="line">*/</span><br><span class="line">void HC_SR04_startrange(void)</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(HC_SR04_Trig_GPIO_Port,HC_SR04_Trig_Pin,GPIO_PIN_SET);</span><br><span class="line">//HAL_Delay(5);</span><br><span class="line">Delay_us(10);</span><br><span class="line">HAL_GPIO_WritePin(HC_SR04_Trig_GPIO_Port,HC_SR04_Trig_Pin,GPIO_PIN_RESET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">*********************************************************</span><br><span class="line">函数原型：uint16_t HC_SR04_gettime(void)</span><br><span class="line">函数输入：无</span><br><span class="line">函数输出：无符号整型</span><br><span class="line">函数功能：通过定时器获取当前时间</span><br><span class="line">*********************************************************</span><br><span class="line">*/</span><br><span class="line">uint16_t HC_SR04_gettime(void)</span><br><span class="line">&#123;</span><br><span class="line">uint32_t a;</span><br><span class="line">a=TIM2-&gt;CNT;</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">*********************************************************</span><br><span class="line">函数原型：float HC_SR04_getdistance(void)</span><br><span class="line">函数输入：无</span><br><span class="line">函数输出：浮点型</span><br><span class="line">函数功能：获取与目标之间的距离</span><br><span class="line">*********************************************************</span><br><span class="line">*/</span><br><span class="line">float HC_SR04_getdistance(void)</span><br><span class="line">&#123;   </span><br><span class="line">uint16_t time_node1;</span><br><span class="line"> uint16_t time_node2;</span><br><span class="line">  uint16_t measure;</span><br><span class="line"></span><br><span class="line">  HC_SR04_startrange();</span><br><span class="line"></span><br><span class="line">TIM2-&gt;CNT = 0;</span><br><span class="line"></span><br><span class="line">//有信号返回则通过IO口Echo输出高电平，高电平持续时间即为超声波从发射到返回的时间，测试距离=（ 高电平时间*声速(340m/s) ）/ 2 </span><br><span class="line">  while(HAL_GPIO_ReadPin(HC_SR04_Echo_GPIO_Port,HC_SR04_Echo_Pin)==RESET);</span><br><span class="line">time_node1=HC_SR04_gettime();</span><br><span class="line"></span><br><span class="line">while(HAL_GPIO_ReadPin(HC_SR04_Echo_GPIO_Port,HC_SR04_Echo_Pin)==SET);</span><br><span class="line">time_node2=HC_SR04_gettime();</span><br><span class="line"></span><br><span class="line">measure=time_node2-time_node1;</span><br><span class="line"></span><br><span class="line">distance_result = measure * 17.0/1000;//距离=计数差值(us) / 1000000 * 340(m/s) * 100 / 2 = measure * 17/1000</span><br><span class="line"></span><br><span class="line">  return distance_result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HC-SR04-h"><a href="#HC-SR04-h" class="headerlink" title="HC_SR04.h"></a>HC_SR04.h</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _HC_SR04_H_</span><br><span class="line">#define _HC_SR04_H_</span><br><span class="line">void Delay_us(uint16_t time);</span><br><span class="line">void HC_SR04_startrange(void);</span><br><span class="line">float HC_SR04_getdistance(void);</span><br><span class="line">uint16_t HC_SR04_gettime(void);</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> /* USER CODE BEGIN 2 */</span><br><span class="line">HAL_TIM_Base_Start_IT(&amp;htim2);</span><br><span class="line"> /* USER CODE END 2 */</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">while (1)</span><br><span class="line">  &#123;</span><br><span class="line">    /* USER CODE END WHILE */</span><br><span class="line"></span><br><span class="line">    /* USER CODE BEGIN 3 */</span><br><span class="line">if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == 1)</span><br><span class="line">&#123;</span><br><span class="line">//HAL_Delay(50);</span><br><span class="line">HC_SR04_distance=HC_SR04_getdistance();</span><br><span class="line">HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);//灭灯</span><br><span class="line">printf(&quot;有人,目前距离为：%.2f cm\r\n&quot;,HC_SR04_distance);</span><br><span class="line">HAL_Delay(100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else  </span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);//亮灯</span><br><span class="line">printf(&quot;没人\r\n&quot;);</span><br><span class="line">HAL_Delay(1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  printf(&quot;hellp\r\n&quot;);</span><br><span class="line">//HAL_Delay(1000);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* USER CODE END 3 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>现象：</strong></p><p>感应到人体，板载LED绿灯亮，同时串口打印测距结果。<br><img src="https://img-blog.csdnimg.cn/fdf542a1e5f54fb497c66664fcf7880e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/fdf542a1e5f54fb497c66664fcf7880e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><strong>注意：</strong> <strong>重定义printf后，必须在target里面勾选上MicroLIB，调用一下这个微型库，不然一直卡在里面。</strong></p><p><img src="https://img-blog.csdnimg.cn/bba9468e9009467abfafc8111b94ac0d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="https://img-blog.csdnimg.cn/bba9468e9009467abfafc8111b94ac0d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6YGX5b-Y5Li2,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>参考博客： <a href="https://blog.csdn.net/sasasatori/article/details/81199455">stm32f1驱动HC-SR04超声波测距模块</a></p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>daily</title>
      <link href="/2024/03/daily/"/>
      <url>/2024/03/daily/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【STM32】HAL库_STM32CubeMX教程十三---RTC时钟</title>
      <link href="/2024/03/%E3%80%90STM32%E3%80%91HAL%E5%BA%93_STM32CubeMX%E6%95%99%E7%A8%8B%E5%8D%81%E4%B8%89---RTC%E6%97%B6%E9%92%9F/"/>
      <url>/2024/03/%E3%80%90STM32%E3%80%91HAL%E5%BA%93_STM32CubeMX%E6%95%99%E7%A8%8B%E5%8D%81%E4%B8%89---RTC%E6%97%B6%E9%92%9F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>前言：</p><p>本系列教程将 对应外设原理，HAL库与STM32CubeMX结合在一起讲解，使您可以更快速的学会各个模块的使用</p><p>所用工具：</p><p>1、芯片： STM32F407ZET6&#x2F; STM32F103ZET6</p><p>2、STM32CubeMx软件</p><p>3、IDE： MDK-Keil软件</p><p>4、STM32F1xx&#x2F;STM32F4xxHAL库</p><p>知识概括：</p><p>通过本篇博客您将学到：</p><p>RTC时钟原理</p><p>STM32CubeMX创建RTC例程</p><p>HAL库定时器RTC函数库</p><p><strong>PS: 这里的RTC讲解，我们只将原理，不讲寄存器，如果要看RTC的寄存器，请看这篇文章</strong> <a href="https://blog.csdn.net/as480133937/article/details/105026033">【STM32】RTC实时时钟，步骤超细详解，一文看懂RTC</a></p><h3 id="什么是RTC"><a href="#什么是RTC" class="headerlink" title="什么是RTC"></a>什么是RTC</h3><p>**RTC (Real Time Clock)**：实时时钟</p><p><strong>RTC是个独立的定时器</strong>。RTC模块拥有一个连续计数的计数器，在相应的软件配置下，可以提供时钟日历的功能。修改计数器的值可以重新设置当前时间和日期 RTC还包含用于管理低功耗模式的自动唤醒单元。</p><p><img src="https://img-blog.csdnimg.cn/20200423215123488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200423215123488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p><strong>在断电情况下 RTC仍可以独立运行 只要芯片的备用电源一直供电,RTC上的时间会一直走。</strong></p><p>RTC实质是一个掉电后还继续运行的定时器,从定时器的角度来看,相对于通用定时器TIM外设,它的功能十分简单,只有计时功能(也可以触发中断)。但其高级指出也就在于掉电之后还可以正常运行。</p><p>两个 32 位寄存器包含二进码十进数格式 (BCD) 的秒、分钟、小时（ 12 或 24 小时制）、星期几、日期、月份和年份。此外，还可提供二进制格式的亚秒值。系统可以自动将月份的天数补偿为 28、29（闰年）、30 和 31 天。</p><p>上电复位后，所有RTC寄存器都会受到保护，以防止可能的非正常写访问。</p><p>无论器件状态如何（运行模式、低功耗模式或处于复位状态），只要电源电压保持在工作范围内，RTC使不会停止工作。</p><h4 id="RCT特征："><a href="#RCT特征：" class="headerlink" title="RCT特征："></a><strong>RCT特征：</strong></h4><p>● <strong>可编程的预分频系数：分频系数高为220。</strong> ● <strong>32位的可编程计数器，可用于较长时间段的测量。</strong> ● <strong>2个分离的时钟：用于APB1接口的PCLK1和RTC时钟(RTC时钟的频率必须小于PCLK1时钟 频率的四分之一以上)。</strong> ● 可以选择以下<strong>三种RTC的时钟源</strong>：      ● HSE时钟除以128；      ● LSE振荡器时钟；      ● LSI振荡器时钟</p><p>● <strong>2个独立的复位类型：</strong>      ● APB1接口由系统复位；      ● RTC核心(预分频器、闹钟、计数器和分频器)只能由后备域复位</p><p>● <strong>3个专门的可屏蔽中断：</strong>      ● 1.<strong>闹钟中断</strong>，用来产生一个软件可编程的闹钟中断。</p><p>     ● 2.<strong>秒中断</strong>，用来产生一个可编程的周期性中断信号(长可达1秒)。</p><p>     ● 3.<strong>溢出中断</strong>，指示内部可编程计数器溢出并回转为0的状态。</p><p><strong>RTC时钟源：</strong> 三种不同的时钟源可被用来驱动系统时钟(SYSCLK)：</p><p>● <strong>HSI振荡器时钟</strong> ● <strong>HSE振荡器时钟</strong> ● <strong>PLL时钟</strong></p><p>这些设备有以下2种二级时钟源：</p><p>● 40kHz低速内部RC，可以用于驱动独立看门狗和通过程序选择驱动RTC。 RTC用于从停机&#x2F;待机模式下自动唤醒系统。 ● 32.768kHz低速外部晶体也可用来通过程序选择驱动RTC(RTCCLK)。</p><h4 id="RTC原理框图"><a href="#RTC原理框图" class="headerlink" title="RTC原理框图"></a>RTC原理框图</h4><p><img src="https://img-blog.csdnimg.cn/20200322144525734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200322144525734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"><br> RTC时钟的框图还是比较简单的，这里我们把他分成 <strong><code>两个部分</code></strong>:</p><p><strong>APB1 接口</strong>：用来和 APB1 总线相连。 此单元还包含一组 16 位寄存器，可通过 APB1 总线对其进行读写操作。APB1 接口由 APB1 总 线时钟驱动，用来与 APB1 总线连接。</p><p>通过APB1接口可以访问RTC的相关寄存器（预分频值，计数器值，闹钟值）。</p><p><strong>RTC 核心接口</strong>：由一组可编程计数器组成，分成 <strong><code>两个主要模块</code></strong> 。<br><img src="https://img-blog.csdnimg.cn/20200322223612113.png" alt="https://img-blog.csdnimg.cn/20200322223612113.png"><br>g) <strong>第一个模块是 RTC 的 预分频模块</strong>，它可编程产生 1 秒的 RTC 时间基准 TR_CLK。RTC 的预分频模块包含了一个 20 位的可编程分频器(RTC 预分频器)。如果在 RTC_CR 寄存器中设置了相应的允许位，则在每个 TR_CLK 周期中 RTC 产生一个中断(秒中断)。<br><img src="https://img-blog.csdnimg.cn/2020032222362770.png" alt="https://img-blog.csdnimg.cn/2020032222362770.png"><br> <strong>第二个模块是一个 32 位的可编程计数器 （RTC_CNT）</strong>，可被初始化为当前的系统时间，一个 32 位的时钟计数器，按秒钟计算，可以记 录 4294967296 秒，约合 136 年左右，作为一般应用，这已经是足够了的。</p><h4 id="RTC具体流程："><a href="#RTC具体流程：" class="headerlink" title="RTC具体流程："></a><strong>RTC具体流程：</strong></h4><p><strong>RTCCLK经过RTC_DIV预分频，RTC_PRL设置预分频系数，然后得到TR_CLK时钟信号，我们一般设置其周期为1s，RTC_CNT计数器计数，假如1970设置为时间起点为0s，通过当前时间的秒数计算得到当前的时间。RTC_ALR是设置闹钟时间，RTC_CNT计数到RTC_ALR就会产生计数中断，</strong></p><ul><li><strong>RTC_Second</strong>为秒中断，用于刷新时间，+ <strong>RTC_Overflow</strong>是溢出中断。+ <strong>RTC Alarm</strong> 控制开关机</li></ul><h4 id="RTC时钟选择"><a href="#RTC时钟选择" class="headerlink" title="RTC时钟选择"></a>RTC时钟选择</h4><p><strong>使用HSE分频时钟或者LSI的时候,在主电源VDD掉电的情况下,这两个时钟来源都会受到影响,因此没法保证RTC正常工作.所以RTC一般都时钟低速外部时钟LSE,频率为实时时钟模块中常用的32.768KHz,因为32768 &#x3D; 2^15,分频容易实现,所以被广泛应用到RTC模块.(在主电源VDD有效的情况下(待机),RTC还可以配置闹钟事件使STM32退出待机模式).</strong></p><h4 id="RTC复位过程"><a href="#RTC复位过程" class="headerlink" title="RTC复位过程"></a>RTC复位过程</h4><p>除了RTC_PRL、RTC_ALR、RTC_CNT和RTC_DIV寄存器外，所有的系统寄存器都由系统复位或电源复位进行异步复位。 RTC_PRL、RTC_ALR、RTC_CNT和RTC_DIV寄存器仅能通过备份域复位信号复位。</p><p><strong>系统复位后,禁止访问后备寄存器和RCT,防止对后卫区域(BKP)的意外写操作</strong></p><h4 id="RTC中断"><a href="#RTC中断" class="headerlink" title="RTC中断"></a>RTC中断</h4><p><strong>秒中断：</strong> 这里时钟自带一个秒中断，每当计数加一的时候就会触发一次秒中断，。注意，这里所说的秒中断并非一定是一秒的时间，它是由RTC时钟源和分频值决定的“秒”的时间，当然也是可以做到1秒钟中断一次。我们通过往秒中断里写更新时间的函数来达到时间同步的效果</p><p><strong>闹钟中断：</strong> 闹钟中断就是设置一个预设定的值，计数每自加多少次触发一次闹钟中断</p><h3 id="CubeMX配置RTC"><a href="#CubeMX配置RTC" class="headerlink" title="CubeMX配置RTC"></a>CubeMX配置RTC</h3><h4 id="工程创建"><a href="#工程创建" class="headerlink" title="工程创建"></a>工程创建</h4><p><strong>1设置RCC</strong><br><img src="https://img-blog.csdnimg.cn/20200425101549368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425101549368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li><strong>设置高速外部时钟HSE 选择外部时钟源</strong>+ <strong>使能外部晶振LSE</strong></li></ul><p><strong>RTC设备因为其独特的运行方式（即掉电依旧运行）使用HSE分频时钟或者LSI的时候,在主电源VDD掉电的情况下,这两个时钟来源都会受到影响，资源消耗太大，小小的纽扣电池根本吃不消。没法保证RTC正常工作.所以RTC一般都时钟低速外部时钟LSE</strong></p><p>2.<strong>配置RTC</strong><br><img src="https://img-blog.csdnimg.cn/20200425110730403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425110730403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li><strong>Activate Clock Source 激活时钟源</strong>+ <strong>Activate calendar激活日历</strong></li></ul><p><strong>这两个都要点，作用也很明显，先是使能时钟源，再使能RTC日历</strong></p><ul><li><strong>RTC_OUT： Not RTC_OUT</strong>+ <strong>Tamper：</strong> <strong>×</strong></li></ul><p>第一个是是否使能 <strong>tamper（PC13）引脚上输出校正的秒脉冲时钟，</strong></p><p>第二个： <strong>RTC入侵检测校验功能</strong></p><p><strong>RTC校验功能，使能侵入检测功能。RTC时钟经64分频输出到侵入检测引脚TAMPER上 当 TAMPER引脚上的信号从 0变成1或者从 1变成 0(取决于备份控制寄存器BKP_CR的 TPAL位)，会产生一个侵入检测事件。侵入检测事件将所有数据备份寄存器内容清除。</strong></p><ul><li>也就是第一个是使能tamper（PC13）引脚作为时钟脉冲输出+ 第二个是使能tamper（PC13）引脚作为入侵检测功能</li></ul><p>下面是两个RTC的中断：</p><ul><li><strong>RTC全局中断RTC_IRQHandler()</strong>+ <strong>闹钟中断函数RTCAlarm_IRQHandler()</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/2020042514381771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/2020042514381771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p><strong>此处设置时间为2020&#x2F;04&#x2F;25 13:30:00</strong></p><ul><li>Data Format: 日期格式</li></ul><p><strong>Binary data format 十六进制 BCD data format BCD码进制</strong></p><p>使用自动配置，初始化时间必须使用BCD data format，原因是库函数存在bug，如果使用Binary data format，月份配置会出错，比如说11月，配置时会赋值为RTC_MONTH_NOVEMBER，而此宏定义值为0x11，也就是说其十进制值为17</p><ul><li><strong>Hours： 小时</strong> +  <strong>Minutes： 分钟</strong> +  <strong>Seconds： 秒</strong> +  <strong>Week Day： 星期</strong> +  <strong>Month 月份</strong> +  <strong>Date： 日期</strong> +  <strong>Year： 年份</strong></li></ul><p><strong>3 使能串口</strong><br><img src="https://img-blog.csdnimg.cn/20200425143944495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425143944495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"><br> <strong>使能一下串口，因为发送日期到上位机</strong></p><p><strong>4时钟源设置</strong><br><img src="https://img-blog.csdnimg.cn/20200425144337169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425144337169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p>我的是 外部晶振为8MHz</p><ul><li>1选择外部时钟HSE 8MHz+ 2PLL锁相环倍频9倍+ 3系统时钟来源选择为PLL+ 4设置APB1分频器为 &#x2F;2+ 5 使能CSS监视时钟+ <strong>6 设置RTC时钟为LSE</strong></li></ul><p>32的时钟树框图 如果不懂的话请看<a href="https://blog.csdn.net/as480133937/article/details/98845509">《【STM32】系统时钟RCC详解(超详细，超全面)》</a></p><p><strong>5项目文件设置</strong><br><img src="https://img-blog.csdnimg.cn/20200425144600886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425144600886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li>1 设置项目名称+ 2 设置存储路径+ 3 选择所用IDE<br><img src="https://img-blog.csdnimg.cn/2020042514462236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/2020042514462236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></li></ul><p><strong>6创建工程文件</strong></p><p><strong>然后点击GENERATE CODE 创建工程</strong></p><p><strong>配置下载工具</strong> 新建的工程所有配置都是默认的 我们需要自行选择下载模式，勾选上下载后复位运行</p><p><img src="https://img-blog.csdnimg.cn/202004251446415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/202004251446415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><h4 id="RTC-HAL库函数"><a href="#RTC-HAL库函数" class="headerlink" title="RTC_HAL库函数"></a>RTC_HAL库函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*设置系统时间*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span> </span><br><span class="line"><span class="comment">/*读取系统时间*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*设置系统日期*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*读取系统日期*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*启动报警功能*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetAlarm</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*设置报警中断*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetAlarm_IT</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*报警时间回调函数*/</span></span><br><span class="line">__weak <span class="keyword">void</span> <span class="title function_">HAL_RTC_AlarmAEventCallback</span><span class="params">(RTC_HandleTypeDef *hrtc)</span></span><br><span class="line"><span class="comment">/*写入后备储存器*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">HAL_RTCEx_BKUPWrite</span><span class="params">(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)</span></span><br><span class="line"><span class="comment">/*读取后备储存器*/</span></span><br><span class="line">uint32_t <span class="title function_">HAL_RTCEx_BKUPRead</span><span class="params">(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister  </span></span><br></pre></td></tr></table></figure><p>我们可以看到前面的四个函数，分别是</p><ul><li><strong>设置系统时间：HAL_RTC_SetTime();</strong>+ <strong>读取系统时间: HAL_RTC_GetTime();</strong>+ <strong>设置系统日期: HAL_RTC_SetDate();</strong>+ <strong>读取系统日期: HAL_RTC_GetDate();</strong></li></ul><p>因为系统的时间和日期开始的时候已经设置过了，所以我们这里只用两个读取函数</p><p> <strong>读取系统时间函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*读取系统时间*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span></span><br></pre></td></tr></table></figure><p>功能： 获取RTC时钟的时间</p><p>参数：</p><ul><li>*hrtc RTC结构体参数 例：&amp;hi2c2 +  <strong>RTC_TimeTypeDef</strong> *sTime： 获取RTC时间的结构体， +  Format： <strong>获取时间的格式</strong> <strong>RTC_FORMAT_BIN 使用16进制 RTC_FORMAT_BCD 使用BCD进制</strong></li></ul><p> <strong>读取系统日期函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*读取系统日期*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br></pre></td></tr></table></figure><p>功能： 获取RTC时钟的日期</p><p>参数：</p><ul><li>*hrtc RTC结构体参数 例：&amp;hi2c2 +  <strong>RTC_DateTypeDef</strong> *sTime： 获取RTC日期的结构体， +  Format： <strong>获取日期的格式</strong> <strong>RTC_FORMAT_BIN 使用16进制 RTC_FORMAT_BCD 使用BCD进制</strong></li></ul><p>在stm32f1xx_hal_rtc.h头文件中，可以找到<code>RTC_TimeTypeDef</code>，<code>RTC_DateTypeDef</code>这两个结构体的成员变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * @brief  RTC Time structure definition</span><br><span class="line">  */</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  uint8_t Hours;            /*!&lt; Specifies the RTC Time Hour.</span><br><span class="line">                                 This parameter must be a number between Min_Data = 0 and Max_Data = 23 */</span><br><span class="line"></span><br><span class="line">  uint8_t Minutes;          /*!&lt; Specifies the RTC Time Minutes.</span><br><span class="line">                                 This parameter must be a number between Min_Data = 0 and Max_Data = 59 */</span><br><span class="line"></span><br><span class="line">  uint8_t Seconds;          /*!&lt; Specifies the RTC Time Seconds.</span><br><span class="line">                                 This parameter must be a number between Min_Data = 0 and Max_Data = 59 */</span><br><span class="line"></span><br><span class="line">&#125; RTC_TimeTypeDef;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * @brief  RTC Date structure definition</span><br><span class="line">  */</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  uint8_t WeekDay;  /*!&lt; Specifies the RTC Date WeekDay (not necessary for HAL_RTC_SetDate).</span><br><span class="line">                         This parameter can be a value of @ref RTC_WeekDay_Definitions */</span><br><span class="line"></span><br><span class="line">  uint8_t Month;    /*!&lt; Specifies the RTC Date Month (in BCD format).</span><br><span class="line">                         This parameter can be a value of @ref RTC_Month_Date_Definitions */</span><br><span class="line"></span><br><span class="line">  uint8_t Date;     /*!&lt; Specifies the RTC Date.</span><br><span class="line">                         This parameter must be a number between Min_Data = 1 and Max_Data = 31 */</span><br><span class="line"></span><br><span class="line">  uint8_t Year;     /*!&lt; Specifies the RTC Date Year.</span><br><span class="line">                         This parameter must be a number between Min_Data = 0 and Max_Data = 99 */</span><br><span class="line"></span><br><span class="line">&#125; RTC_DateTypeDef;</span><br></pre></td></tr></table></figure><p><strong>程序代码：</strong></p><p>main.c</p><p><strong>在main.c中重写fputc函数，使得能够使用printf函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdio.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int fputc(int ch,FILE *f)&#123;</span><br><span class="line"> uint8_t temp[1]=&#123;ch&#125;;</span><br><span class="line"> HAL_UART_Transmit(&amp;huart1,temp,1,2);</span><br><span class="line"> return ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义两个结构体来获取日期和时间：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RTC_DateTypeDef GetData;  //获取日期结构体</span><br><span class="line"></span><br><span class="line">RTC_TimeTypeDef GetTime;   //获取时间结构体</span><br></pre></td></tr></table></figure><p>在while循环中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* Get the RTC current Time */</span><br><span class="line">HAL_RTC_GetTime(&amp;hrtc, &amp;GetTime, RTC_FORMAT_BIN);</span><br><span class="line">   /* Get the RTC current Date */</span><br><span class="line">   HAL_RTC_GetDate(&amp;hrtc, &amp;GetData, RTC_FORMAT_BIN);</span><br><span class="line"></span><br><span class="line">   /* Display date Format : yy/mm/dd */</span><br><span class="line">   printf(&quot;%02d/%02d/%02d\r\n&quot;,2000 + GetData.Year, GetData.Month, GetData.Date);</span><br><span class="line">   /* Display time Format : hh:mm:ss */</span><br><span class="line">   printf(&quot;%02d:%02d:%02d\r\n&quot;,GetTime.Hours, GetTime.Minutes, GetTime.Seconds);</span><br><span class="line"></span><br><span class="line">   printf(&quot;\r\n&quot;);</span><br><span class="line"></span><br><span class="line">   HAL_Delay(1000);</span><br></pre></td></tr></table></figure><p><strong>程序中使用HAL_RTC_GetTime（）,HAL_RTC_GetDate()读取时间和日期，并保存到结构体变量中，然后通过串口输出读取的时间和日期。</strong></p><p><strong>例程测试正常：</strong><br><img src="https://img-blog.csdnimg.cn/20200425153330941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425153330941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><h4 id="RTC掉电重置"><a href="#RTC掉电重置" class="headerlink" title="RTC掉电重置"></a>RTC掉电重置</h4><p>但是呢，在hal库中生成的代码，<strong>每次断电就RTC时间会重置</strong>，每次上电都会重新初始化时间</p><p>因为HAL库设置了一个BKP寄存器保存一个标志。每次单片机启动时都读取这个标志并判断是不是预先设定的值：如度果不是就初始化RTC并设置时间，再设置标志为预期值；如果是预期值就跳过初始化和时间设置，继续执行后面的程序</p><p><strong>所以这里我们只需要每次上电执行RTC初始化之前，将标志设置为预期值即可</strong></p><p><strong>在rtc.c中的RTC_Init修改为以下内容即可</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"> void MX_RTC_Init(void)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN RTC_Init 0 */</span><br><span class="line">RTC_TimeTypeDef time;   //时间结构体参数</span><br><span class="line">RTC_DateTypeDef datebuff;   //日期结构体参数</span><br><span class="line">  /* USER CODE END RTC_Init 0 */</span><br><span class="line"></span><br><span class="line">  RTC_TimeTypeDef sTime = &#123;0&#125;;</span><br><span class="line">  RTC_DateTypeDef DateToUpdate = &#123;0&#125;;</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN RTC_Init 1 */</span><br><span class="line">__HAL_RCC_BKP_CLK_ENABLE();       //开启后备区域时钟</span><br><span class="line">__HAL_RCC_PWR_CLK_ENABLE();  //开启电源时钟</span><br><span class="line">  /* USER CODE END RTC_Init 1 */</span><br><span class="line">  /**Initialize RTC Only </span><br><span class="line">  */</span><br><span class="line">  hrtc.Instance = RTC;</span><br><span class="line">  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;</span><br><span class="line">  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;</span><br><span class="line">  if (HAL_RTC_Init(&amp;hrtc) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN Check_RTC_BKUP */</span><br><span class="line">if(HAL_RTCEx_BKUPRead(&amp;hrtc,RTC_BKP_DR1)!= 0x5051)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  /* USER CODE END Check_RTC_BKUP */</span><br><span class="line"></span><br><span class="line">  /**Initialize RTC and set the Time and Date </span><br><span class="line">  */</span><br><span class="line">  sTime.Hours = 0x14;</span><br><span class="line">  sTime.Minutes = 0x30;</span><br><span class="line">  sTime.Seconds = 0x0;</span><br><span class="line"></span><br><span class="line">  if (HAL_RTC_SetTime(&amp;hrtc, &amp;sTime, RTC_FORMAT_BCD) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;</span><br><span class="line">  DateToUpdate.Month = RTC_MONTH_APRIL;</span><br><span class="line">  DateToUpdate.Date = 0x25;</span><br><span class="line">  DateToUpdate.Year = 0x20;</span><br><span class="line"></span><br><span class="line">  if (HAL_RTC_SetDate(&amp;hrtc, &amp;DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  /* USER CODE BEGIN RTC_Init 2 */</span><br><span class="line"></span><br><span class="line">__HAL_RTC_SECOND_ENABLE_IT(&amp;hrtc,RTC_IT_SEC); //开启RTC时钟秒中断</span><br><span class="line">datebuff = DateToUpdate;  //把日期数据拷贝到自己定义的data中</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR1, 0x5051);//向指定的后备区域寄存器写入数据</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR2, (uint16_t)datebuff.Year);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR3, (uint16_t)datebuff.Month);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR4, (uint16_t)datebuff.Date);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR5, (uint16_t)datebuff.WeekDay);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">datebuff.Year    = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR2);</span><br><span class="line">datebuff.Month   = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR3);</span><br><span class="line">datebuff.Date    = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR4);</span><br><span class="line">datebuff.WeekDay = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR5);</span><br><span class="line">DateToUpdate = datebuff;</span><br><span class="line">if (HAL_RTC_SetDate(&amp;hrtc, &amp;DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line">Error_Handler();</span><br><span class="line">&#125;</span><br><span class="line">__HAL_RTC_SECOND_ENABLE_IT(&amp;hrtc,RTC_IT_SEC); //开启RTC时钟秒中断</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425165901167.gif" alt="https://img-blog.csdnimg.cn/20200425165901167.gif"></p><p><img src="https://img-blog.csdnimg.cn/20200425165904365.gif" alt="https://img-blog.csdnimg.cn/20200425165904365.gif"></p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32 HAL GPIO详细篇</title>
      <link href="/2024/03/STM32HAL%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94GPIO/"/>
      <url>/2024/03/STM32HAL%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94GPIO/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><p>GPIO全名为General Purpose Input Output，即通用输入输出。有时候简称为“IO口”。通用，说明它是常见的。输入输出，就是说既能当输入口使用，又能当输出口使用。端口，就是元器件上的一个引脚。</p><p>输入模式和输出模式是GPIO的基本特性，当然GPIO还有其它模式可选。</p><p><img src="https://img-blog.csdnimg.cn/4b4a4a4a754c42a686395c54851dac7f.png" alt="./figures/4b4a4a4a754c42a686395c54851dac7f.png"></p><h3 id="IO耐压问题"><a href="#IO耐压问题" class="headerlink" title="IO耐压问题"></a>IO耐压问题</h3><p>STM32是一款3.3V电压的芯片，IO输出是3.3V,但IO大部分都是可以容忍5V电压输入。一般在芯片手册的“引脚定义”章节可以查看到有FT标识表示该IO可以容忍5V电压输入。</p><p><img src="https://img-blog.csdnimg.cn/417fa39b882b42de99526837d5af45b2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP56W655qE5a6d5a6d,size_20,color_FFFFFF,t_70,g_se,x_16" alt="./figures/417fa39b882b42de99526837d5af45b2.png"></p><h2 id="二、在HAL库中的GPIO的模式"><a href="#二、在HAL库中的GPIO的模式" class="headerlink" title="二、在HAL库中的GPIO的模式"></a>二、在HAL库中的GPIO的模式</h2><h2 id="１、输入模式GPIO＿Input"><a href="#１、输入模式GPIO＿Input" class="headerlink" title="１、输入模式GPIO＿Input"></a>１、输入模式GPIO＿Input</h2><h4 id="上拉或下拉输入（GPIO-Pull-up／Pull-down）："><a href="#上拉或下拉输入（GPIO-Pull-up／Pull-down）：" class="headerlink" title="上拉或下拉输入（GPIO　Pull-up／Pull-down）："></a>上拉或下拉输入（GPIO　Pull-up／Pull-down）：</h4><p>        ｜浮空输入（No　pull－up　and　no　pull－down）：引脚电平是真实的外部连接器件电压，电平有不确定性</p><p>        ｜上拉输入（Pull－up）：默认通过电阻上拉到VCC,不接外部器件时可以读出高电平</p><p>        ｜下拉输入（Pull-down）：默认通过电阻下拉到GND,不接外部器件时可以读出低电平</p><h3 id="２、输出模式GPIO-Out"><a href="#２、输出模式GPIO-Out" class="headerlink" title="２、输出模式GPIO_Out"></a>２、输出模式GPIO_Out</h3><h4 id="默认输出电平（GPIO-output-level）："><a href="#默认输出电平（GPIO-output-level）：" class="headerlink" title="默认输出电平（GPIO　output　level）："></a>默认输出电平（GPIO　output　level）：</h4><p>        ｜低电平（Low）：默认输出低电平</p><p>        ｜高电平（High）：默认输出高电平</p><h4 id="输出类型（GPIO-Mode）："><a href="#输出类型（GPIO-Mode）：" class="headerlink" title="输出类型（GPIO　Mode）："></a>输出类型（GPIO　Mode）：</h4><p>        ｜推挽输出（Output　Push　Pull）：一种使用一对选择性地从相连负载灌电流或者拉电流的器件的电路。</p><p>        ｜开漏输出（Output　Open　Drain）：高电平时没有驱动能力，需要借助外部上拉电阻完成对外驱动。</p><h4 id="上拉或下拉输出（GPIO-Pull-up／Pull-down）："><a href="#上拉或下拉输出（GPIO-Pull-up／Pull-down）：" class="headerlink" title="上拉或下拉输出（GPIO　Pull-up／Pull-down）："></a>上拉或下拉输出（GPIO　Pull-up／Pull-down）：</h4><p>        ｜浮空输出（No　pull－up　and　no　pull－down）：引脚电平是真实的外部连接器件电压，电平有不确定性</p><p>        ｜上拉输出（Pull－up）：默认通过电阻上拉到VCC,不接外部器件时可以输出高电平</p><p>        ｜下拉输出（Pull-down）：默认通过电阻下拉到GND,不接外部器件时可以输出低电平 </p><h4 id="输出频率（Maximum-output-speed）："><a href="#输出频率（Maximum-output-speed）：" class="headerlink" title="输出频率（Maximum　output　speed）："></a>输出频率（Maximum　output　speed）：</h4><p>        ｜低频率输出（LOW）</p><p>        ｜中频率输出（Medium）</p><p>        ｜高频率输出（High）</p><p>        ｜极高频率输出（Very　High）</p><h2 id="三、在CubeMX中修改引脚名称"><a href="#三、在CubeMX中修改引脚名称" class="headerlink" title="三、在CubeMX中修改引脚名称"></a>三、在CubeMX中修改引脚名称</h2><p>        1.在左侧找到System Core-&gt;GPIO；</p><p>        2.找到应对的GPIO，例如PH10；</p><p>        3.在下方的配置单中User Label 填写命名，填好后会在芯片缩略图中更新</p><p>        4.点击 GENERATE CODE 生成代码</p><h2 id="四、常用引脚输入函数"><a href="#四、常用引脚输入函数" class="headerlink" title="四、常用引脚输入函数"></a>四、常用引脚输入函数</h2><p>        函数名：HAL_GPIO_ReadPin(参数1,参数2)</p><p>        函数作用：读取对应的引脚电平</p><p>        返回值：若读取到高电平，则返回GPIO_PIN_SET；反之，读取到低电平，则返回GPIO_PIN_RESET      </p><p>        参数1：GPIOx      对应GPIO总线，其中x可以是A…I，例如PH10，则输入GPIOH</p><p>        参数2：GPIO_Pin   对应引脚数，可以是1…15，例如PH10，则输入GPIO_PIN_10</p><h2 id="五、常用引脚输出函数"><a href="#五、常用引脚输出函数" class="headerlink" title="五、常用引脚输出函数"></a>五、常用引脚输出函数</h2><p>        函数名：HAL_GPIO_WritePin(参数1,参数2,参数3)</p><p>        函数作用：使对应的引脚输出高电平或者低电平</p><p>        返回值：viod</p><p>        参数1：GPIOx      对应GPIO总线，其中x可以是A…I，例如PH10，则输入GPIOH</p><p>        参数2：GPIO_Pin   对应引脚数，可以是1…15，例如PH10，则输入GPIO_PIN_10</p><p>        参数3：PinState    GPIO_PIN_RESET，输出低电平；GPIO_PIN_SET，输出高电平</p><p>（若修改对应引脚的名字，例如PH10修改为LED，则输入 HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,参数3)）</p><h2 id="六、其他常用函数"><a href="#六、其他常用函数" class="headerlink" title="六、其他常用函数"></a>六、其他常用函数</h2><p>        函数名：HAL_GPIO_ToglePin(参数1,参数2)</p><p>        函数作用：翻转对应引脚的电平</p><p>        返回值：viod</p><p>        参数1：GPIOx      对应GPIO总线，其中x可以是A…I，例如PH10，则输入GPIOH</p><p>        参数2：GPIO_Pin   对应引脚数，可以是1…15，例如PH10，则输入GPIO_PIN_10</p><p>        </p><p>        函数名：HAL_Delay(参数1)</p><p>        函数作用：延时</p><p>        返回值：void</p><p>        参数1：常数，单位ms</p><p>参考文章：<a href="https://www.cnblogs.com/dongxiaodong/p/14128088.html">STM32 GPIO详细篇（基于HAL库）</a></p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用教程</title>
      <link href="/2024/03/usageOfHexo/"/>
      <url>/2024/03/usageOfHexo/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo使用教程"><a href="#hexo使用教程" class="headerlink" title="hexo使用教程"></a>hexo使用教程</h1><h2 id="1-发布文章"><a href="#1-发布文章" class="headerlink" title="1. 发布文章"></a>1. 发布文章</h2><p>1.新建文章<br>&emsp;&emsp;使用如下命令来新建文章：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] \&lt;title\&gt; </span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;其中layout是文章的布局，默认为post，可以先不写。title 是文章的标题，也是文件的名字，存储在source&#x2F;_posts下。在编写文章的shi’hshih ，有时候会遇见无法缩进的问题，可以使用如下字符进行缩进：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不换行空格: \&amp;nbsp;或\&amp;#160;</span><br><span class="line">半角空格: \&amp;ensp;或\&amp;#8194;</span><br><span class="line">全角空格: \&amp;emsp;或\&amp;#8195;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;写好文章后，输入如下命令进行发布：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2024/03/linux-common-cmd/"/>
      <url>/2024/03/linux-common-cmd/</url>
      
        <content type="html"><![CDATA[<h1 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h1><h2 id="1-tmux"><a href="#1-tmux" class="headerlink" title="1. tmux"></a>1. tmux</h2><p>1.暂时退出窗口</p><blockquote><p>ctrl + b , d</p></blockquote><p>2.查看tmux历史log</p><blockquote><p>ctrl + b , [<br>此命令会进入到复制模式，可以查看tmux当前窗口的历史log，使用q键可以退出此模式</p></blockquote><p>3.查看当前开了哪些tmux窗口</p><blockquote><p>tmux list-windows</p></blockquote><p>4.重命名当前窗口的名字：</p><blockquote><p>Ctrl + b, ,<br>确保当前处于要重命名的窗口中。按下快捷键 Ctrl + b, , (逗号键)。这会使当前窗口的名称进入编辑状态。</p></blockquote><p>5.切换到别的窗口：</p><blockquote><p>tmux switch-client -t 2:0<br>其中2为作业号，0为窗口号<br>tmux attach-session -t 10<br>此处10为作业号</p></blockquote><h2 id="2-ip命令"><a href="#2-ip命令" class="headerlink" title="2. ip命令"></a>2. ip命令</h2><h2 id="2-1-网络接口管理"><a href="#2-1-网络接口管理" class="headerlink" title="2.1 网络接口管理"></a>2.1 网络接口管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ip <span class="built_in">link</span> show <span class="comment">#显示所有网络接口信息</span></span><br><span class="line">ip <span class="built_in">link</span> show dev eth0 <span class="comment">#显示指定网络接口信息</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 up <span class="comment"># 启用指定网络接口</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 down <span class="comment"># 禁用指定网络接口</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 address 00:11:22:33:44:55 <span class="comment">#设置指定网络接口的mac地址</span></span><br><span class="line">ip addr add 192.168.1.2/24 dev eth0 <span class="comment">#配置ip地址</span></span><br><span class="line">ip addr del 192.168.1.2/24 dev eth0 <span class="comment">#删除ip地址</span></span><br></pre></td></tr></table></figure><h2 id="2-2-路由管理"><a href="#2-2-路由管理" class="headerlink" title="2.2 路由管理"></a>2.2 路由管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip route show <span class="comment">#显示路由表</span></span><br><span class="line">ip route add 192.168.2.0/24 via 192.168.1.1 dev eth0 <span class="comment">#添加静态路由</span></span><br><span class="line">ip route del 192.168.2.0/24 <span class="comment">#删除路由</span></span><br></pre></td></tr></table></figure><h2 id="2-3-arp管理"><a href="#2-3-arp管理" class="headerlink" title="2.3 arp管理"></a>2.3 arp管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip neigh show<span class="comment">#显示arp缓存</span></span><br><span class="line">ip neigh add 192.168.1.1 lladdr 00:11:22:33:44:55 dev eth0 <span class="comment">#添加静态arp</span></span><br><span class="line">ip neigh del 192.168.1.1 dev eth0<span class="comment">#删除arp条目</span></span><br></pre></td></tr></table></figure><h2 id="2-4-其他"><a href="#2-4-其他" class="headerlink" title="2.4 其他"></a>2.4 其他</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w net.ipv4.ip_forward=1 <span class="comment">#启用ip转发</span></span><br><span class="line">ip neigh show <span class="comment">#显示邻居缓存</span></span><br><span class="line">ip -s <span class="built_in">link</span> i希纳是统计信息</span><br></pre></td></tr></table></figure><h2 id="3-brctl"><a href="#3-brctl" class="headerlink" title="3. brctl"></a>3. brctl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brctl show <span class="comment"># 显示网络桥接信息</span></span><br><span class="line">brctl addbr mybridge <span class="comment"># 创建一个新的网络桥接</span></span><br><span class="line">brctl addif mybridge eth0 <span class="comment"># 将网络接口添加到桥接</span></span><br><span class="line">brctl delif mybridge eth0 <span class="comment"># 从桥接中移除网络接口</span></span><br><span class="line">brctl delbr mybridge<span class="comment"># 删除网络桥接</span></span><br></pre></td></tr></table></figure><h2 id="4-du"><a href="#4-du" class="headerlink" title="4. du"></a>4. du</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -sh <span class="comment">#查看当前目录的使用情况</span></span><br><span class="line"><span class="built_in">du</span> -h --max-depth=1<span class="comment">#逐级显示子目录的磁盘使用情况</span></span><br><span class="line"><span class="built_in">du</span> -h --max-depth=1 * <span class="comment">#显示每个文件和目录的磁盘使用情况</span></span><br><span class="line"><span class="built_in">du</span> -h --max-depth=1 | <span class="built_in">sort</span> -h <span class="comment">#按大小排序显示文件和目录</span></span><br></pre></td></tr></table></figure><h2 id="5-sort排序命令"><a href="#5-sort排序命令" class="headerlink" title="5. sort排序命令"></a>5. sort排序命令</h2><p>5.1 经典用法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span> filename <span class="comment">#对文件的每一行信息按照字典顺序排序，并输出到当前目录</span></span><br><span class="line"><span class="built_in">sort</span> -n filename <span class="comment">#对文件的每一行信息按照数字顺序排序，并输出到当前目录</span></span><br><span class="line"><span class="built_in">sort</span> -r filename <span class="comment">#对文件的每一行信息按照字典倒序排序，并输出到当前目录</span></span><br><span class="line"><span class="built_in">sort</span> -u filename <span class="comment">#对文件的每一行信息按照字典顺序并且去重排序，并输出到当前目录</span></span><br><span class="line"><span class="built_in">sort</span> -k&lt;列数&gt; filename <span class="comment">#按列排序</span></span><br><span class="line"><span class="built_in">sort</span> -n -k&lt;列数&gt; filename <span class="comment">#按数字字段排序</span></span><br><span class="line"><span class="built_in">sort</span> -t<span class="string">&#x27;:&#x27;</span> -k2 filename <span class="comment">#自定义分隔符使用 -t 选项指定字段分隔符，例如 :，然后使用 -k 选项按照指定列排序</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;b\na\nc&quot;</span> | <span class="built_in">sort</span> <span class="comment">#从标准输入读取数据并排序</span></span><br></pre></td></tr></table></figure><h2 id="6-i2ctools"><a href="#6-i2ctools" class="headerlink" title="6. i2ctools"></a>6. i2ctools</h2><p>6.1 i2cset命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i2cset -f -y 0x1 0x48 0x03 0x0020 w</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其中,-y 指定了i2c控制器为i2c1，0x48为i2c设备的地址，0x03为寄存器偏移量，他表示了寄存器地址，0x0020为要写入的数据。w表示以字（16 位）为单位读写，还可以选择其他读写单位：b，以字节（8 位）为单位读取；c， 以字符（ASCII）为单位读取。</p><p>6.2 i2cget命令</p><p>&emsp;&emsp;use example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i2cget -y 1 0x48 0x03 w <span class="comment">#以字为单位，读取i2c地址为0x48，寄存器0x03的数据</span></span><br></pre></td></tr></table></figure><h2 id="7-dd"><a href="#7-dd" class="headerlink" title="7.dd"></a>7.dd</h2><p>&emsp;&emsp;命令基本形式：</p><pre><code>    dd if=input_file of=output_file bs=block_size options</code></pre><p>examples:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/dev/mmcblk0gp0 bs=512 count=1024 seek=3072</span><br><span class="line"><span class="comment"># 指定块大小为512，复制块数为1024，跳过输出文件的前3072块。（也就是从输出文件的第3072*512处开始，将输入文件的数据复制进去）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/dev/mmcblk0gp0 bs=512 count=1024 skip=3072</span><br><span class="line"><span class="comment"># 指定块大小为512，复制块数为1024，跳过输入文件的前3072块。（也就是从输入文件的第3072*512处开始，将往后的512*1024块数据复制进输出文件。（从输出文件的0x00地址开始））</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;dd命令还有一些其他的可选命令选项，具体为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">• bs=1024：设置块大小为1024字节，即1KB。这是<span class="built_in">dd</span>每次读取和写入的数据块大小。</span><br><span class="line">• count：指定要复制的块数或数据块的数量。</span><br><span class="line">• skip 在复制之前跳过输入文件的块数或字节数。用于设置输入文件的起始位置，即在输入文件中跳过一定数量的块</span><br><span class="line">• seek：在写入之前跳过输出文件的块数或字节数。用于设置输出文件的起始位置，即在输出文件中跳过一定数量的块</span><br><span class="line">• iflag：设置输入选项，例如iflag=direct表示直接访问输入文件而不进行缓存。</span><br><span class="line">• oflag：设置输出选项，例如oflag=direct表示直接写入输出文件而不进行缓存。</span><br><span class="line">• status=progress：显示复制进度信息</span><br></pre></td></tr></table></figure><h2 id="8-stty命令"><a href="#8-stty命令" class="headerlink" title="8.stty命令"></a>8.stty命令</h2><p>&emsp;&emsp;stty命令可以修改终端驱动程序里的设置，可以用来显示和修改终端命令。下面是它的常见用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stty</span> size;<span class="comment">#显示终端的大小，也就是行数和列数，加上-a可以显示的更加详细。</span></span><br><span class="line"><span class="comment">#此外，有的时候在终端误按ctrl+s导致终端僵死，此时按下ctrl+q便可以使终端回复；</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stty</span> -F /dev/tty0 115200; <span class="comment">#设置串口波特率为115200</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stty</span> -a -F /dev/tty2; <span class="comment">#检查当前串口2的设置</span></span><br></pre></td></tr></table></figure><h2 id="9-使用命令行进行简单的串口通信"><a href="#9-使用命令行进行简单的串口通信" class="headerlink" title="9.使用命令行进行简单的串口通信"></a>9.使用命令行进行简单的串口通信</h2><ol><li>首先使用stty设置串口波特率<blockquote><p>stty -F &#x2F;dev&#x2F;ttyAMA1 115200</p></blockquote></li><li>使用echo向串口发送信息<blockquote><p>echo “Hello world” &gt; &#x2F;dev&#x2F;ttyAMA1 </p></blockquote></li><li>使用cat打印当前串口返回的信息<blockquote><p>cat &#x2F;dev&#x2F;ttyAMA1</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux常用命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
