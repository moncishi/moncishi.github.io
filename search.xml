<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>daily</title>
      <link href="/2024/03/daily/"/>
      <url>/2024/03/daily/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【STM32】HAL库_STM32CubeMX教程十三---RTC时钟</title>
      <link href="/2024/03/%E3%80%90STM32%E3%80%91HAL%E5%BA%93_STM32CubeMX%E6%95%99%E7%A8%8B%E5%8D%81%E4%B8%89---RTC%E6%97%B6%E9%92%9F/"/>
      <url>/2024/03/%E3%80%90STM32%E3%80%91HAL%E5%BA%93_STM32CubeMX%E6%95%99%E7%A8%8B%E5%8D%81%E4%B8%89---RTC%E6%97%B6%E9%92%9F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>前言：</p><p>本系列教程将 对应外设原理，HAL库与STM32CubeMX结合在一起讲解，使您可以更快速的学会各个模块的使用</p><p>所用工具：</p><p>1、芯片： STM32F407ZET6&#x2F; STM32F103ZET6</p><p>2、STM32CubeMx软件</p><p>3、IDE： MDK-Keil软件</p><p>4、STM32F1xx&#x2F;STM32F4xxHAL库</p><p>知识概括：</p><p>通过本篇博客您将学到：</p><p>RTC时钟原理</p><p>STM32CubeMX创建RTC例程</p><p>HAL库定时器RTC函数库</p><p><strong>PS: 这里的RTC讲解，我们只将原理，不讲寄存器，如果要看RTC的寄存器，请看这篇文章</strong> <a href="https://blog.csdn.net/as480133937/article/details/105026033">【STM32】RTC实时时钟，步骤超细详解，一文看懂RTC</a></p><h3 id="什么是RTC"><a href="#什么是RTC" class="headerlink" title="什么是RTC"></a>什么是RTC</h3><p>**RTC (Real Time Clock)**：实时时钟</p><p><strong>RTC是个独立的定时器</strong>。RTC模块拥有一个连续计数的计数器，在相应的软件配置下，可以提供时钟日历的功能。修改计数器的值可以重新设置当前时间和日期 RTC还包含用于管理低功耗模式的自动唤醒单元。</p><p><img src="https://img-blog.csdnimg.cn/20200423215123488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200423215123488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p><strong>在断电情况下 RTC仍可以独立运行 只要芯片的备用电源一直供电,RTC上的时间会一直走。</strong></p><p>RTC实质是一个掉电后还继续运行的定时器,从定时器的角度来看,相对于通用定时器TIM外设,它的功能十分简单,只有计时功能(也可以触发中断)。但其高级指出也就在于掉电之后还可以正常运行。</p><p>两个 32 位寄存器包含二进码十进数格式 (BCD) 的秒、分钟、小时（ 12 或 24 小时制）、星期几、日期、月份和年份。此外，还可提供二进制格式的亚秒值。系统可以自动将月份的天数补偿为 28、29（闰年）、30 和 31 天。</p><p>上电复位后，所有RTC寄存器都会受到保护，以防止可能的非正常写访问。</p><p>无论器件状态如何（运行模式、低功耗模式或处于复位状态），只要电源电压保持在工作范围内，RTC使不会停止工作。</p><h4 id="RCT特征："><a href="#RCT特征：" class="headerlink" title="RCT特征："></a><strong>RCT特征：</strong></h4><p>● <strong>可编程的预分频系数：分频系数高为220。</strong> ● <strong>32位的可编程计数器，可用于较长时间段的测量。</strong> ● <strong>2个分离的时钟：用于APB1接口的PCLK1和RTC时钟(RTC时钟的频率必须小于PCLK1时钟 频率的四分之一以上)。</strong> ● 可以选择以下<strong>三种RTC的时钟源</strong>：      ● HSE时钟除以128；      ● LSE振荡器时钟；      ● LSI振荡器时钟</p><p>● <strong>2个独立的复位类型：</strong>      ● APB1接口由系统复位；      ● RTC核心(预分频器、闹钟、计数器和分频器)只能由后备域复位</p><p>● <strong>3个专门的可屏蔽中断：</strong>      ● 1.<strong>闹钟中断</strong>，用来产生一个软件可编程的闹钟中断。</p><p>     ● 2.<strong>秒中断</strong>，用来产生一个可编程的周期性中断信号(长可达1秒)。</p><p>     ● 3.<strong>溢出中断</strong>，指示内部可编程计数器溢出并回转为0的状态。</p><p><strong>RTC时钟源：</strong> 三种不同的时钟源可被用来驱动系统时钟(SYSCLK)：</p><p>● <strong>HSI振荡器时钟</strong> ● <strong>HSE振荡器时钟</strong> ● <strong>PLL时钟</strong></p><p>这些设备有以下2种二级时钟源：</p><p>● 40kHz低速内部RC，可以用于驱动独立看门狗和通过程序选择驱动RTC。 RTC用于从停机&#x2F;待机模式下自动唤醒系统。 ● 32.768kHz低速外部晶体也可用来通过程序选择驱动RTC(RTCCLK)。</p><h4 id="RTC原理框图"><a href="#RTC原理框图" class="headerlink" title="RTC原理框图"></a>RTC原理框图</h4><p><img src="https://img-blog.csdnimg.cn/20200322144525734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200322144525734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"><br> RTC时钟的框图还是比较简单的，这里我们把他分成 <strong><code>两个部分</code></strong>:</p><p><strong>APB1 接口</strong>：用来和 APB1 总线相连。 此单元还包含一组 16 位寄存器，可通过 APB1 总线对其进行读写操作。APB1 接口由 APB1 总 线时钟驱动，用来与 APB1 总线连接。</p><p>通过APB1接口可以访问RTC的相关寄存器（预分频值，计数器值，闹钟值）。</p><p><strong>RTC 核心接口</strong>：由一组可编程计数器组成，分成 <strong><code>两个主要模块</code></strong> 。<br><img src="https://img-blog.csdnimg.cn/20200322223612113.png" alt="https://img-blog.csdnimg.cn/20200322223612113.png"><br>g) <strong>第一个模块是 RTC 的 预分频模块</strong>，它可编程产生 1 秒的 RTC 时间基准 TR_CLK。RTC 的预分频模块包含了一个 20 位的可编程分频器(RTC 预分频器)。如果在 RTC_CR 寄存器中设置了相应的允许位，则在每个 TR_CLK 周期中 RTC 产生一个中断(秒中断)。<br><img src="https://img-blog.csdnimg.cn/2020032222362770.png" alt="https://img-blog.csdnimg.cn/2020032222362770.png"><br> <strong>第二个模块是一个 32 位的可编程计数器 （RTC_CNT）</strong>，可被初始化为当前的系统时间，一个 32 位的时钟计数器，按秒钟计算，可以记 录 4294967296 秒，约合 136 年左右，作为一般应用，这已经是足够了的。</p><h4 id="RTC具体流程："><a href="#RTC具体流程：" class="headerlink" title="RTC具体流程："></a><strong>RTC具体流程：</strong></h4><p><strong>RTCCLK经过RTC_DIV预分频，RTC_PRL设置预分频系数，然后得到TR_CLK时钟信号，我们一般设置其周期为1s，RTC_CNT计数器计数，假如1970设置为时间起点为0s，通过当前时间的秒数计算得到当前的时间。RTC_ALR是设置闹钟时间，RTC_CNT计数到RTC_ALR就会产生计数中断，</strong></p><ul><li><strong>RTC_Second</strong>为秒中断，用于刷新时间，+ <strong>RTC_Overflow</strong>是溢出中断。+ <strong>RTC Alarm</strong> 控制开关机</li></ul><h4 id="RTC时钟选择"><a href="#RTC时钟选择" class="headerlink" title="RTC时钟选择"></a>RTC时钟选择</h4><p><strong>使用HSE分频时钟或者LSI的时候,在主电源VDD掉电的情况下,这两个时钟来源都会受到影响,因此没法保证RTC正常工作.所以RTC一般都时钟低速外部时钟LSE,频率为实时时钟模块中常用的32.768KHz,因为32768 &#x3D; 2^15,分频容易实现,所以被广泛应用到RTC模块.(在主电源VDD有效的情况下(待机),RTC还可以配置闹钟事件使STM32退出待机模式).</strong></p><h4 id="RTC复位过程"><a href="#RTC复位过程" class="headerlink" title="RTC复位过程"></a>RTC复位过程</h4><p>除了RTC_PRL、RTC_ALR、RTC_CNT和RTC_DIV寄存器外，所有的系统寄存器都由系统复位或电源复位进行异步复位。 RTC_PRL、RTC_ALR、RTC_CNT和RTC_DIV寄存器仅能通过备份域复位信号复位。</p><p><strong>系统复位后,禁止访问后备寄存器和RCT,防止对后卫区域(BKP)的意外写操作</strong></p><h4 id="RTC中断"><a href="#RTC中断" class="headerlink" title="RTC中断"></a>RTC中断</h4><p><strong>秒中断：</strong> 这里时钟自带一个秒中断，每当计数加一的时候就会触发一次秒中断，。注意，这里所说的秒中断并非一定是一秒的时间，它是由RTC时钟源和分频值决定的“秒”的时间，当然也是可以做到1秒钟中断一次。我们通过往秒中断里写更新时间的函数来达到时间同步的效果</p><p><strong>闹钟中断：</strong> 闹钟中断就是设置一个预设定的值，计数每自加多少次触发一次闹钟中断</p><h3 id="CubeMX配置RTC"><a href="#CubeMX配置RTC" class="headerlink" title="CubeMX配置RTC"></a>CubeMX配置RTC</h3><h4 id="工程创建"><a href="#工程创建" class="headerlink" title="工程创建"></a>工程创建</h4><p><strong>1设置RCC</strong><br><img src="https://img-blog.csdnimg.cn/20200425101549368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425101549368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li><strong>设置高速外部时钟HSE 选择外部时钟源</strong>+ <strong>使能外部晶振LSE</strong></li></ul><p><strong>RTC设备因为其独特的运行方式（即掉电依旧运行）使用HSE分频时钟或者LSI的时候,在主电源VDD掉电的情况下,这两个时钟来源都会受到影响，资源消耗太大，小小的纽扣电池根本吃不消。没法保证RTC正常工作.所以RTC一般都时钟低速外部时钟LSE</strong></p><p>2.<strong>配置RTC</strong><br><img src="https://img-blog.csdnimg.cn/20200425110730403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425110730403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li><strong>Activate Clock Source 激活时钟源</strong>+ <strong>Activate calendar激活日历</strong></li></ul><p><strong>这两个都要点，作用也很明显，先是使能时钟源，再使能RTC日历</strong></p><ul><li><strong>RTC_OUT： Not RTC_OUT</strong>+ <strong>Tamper：</strong> <strong>×</strong></li></ul><p>第一个是是否使能 <strong>tamper（PC13）引脚上输出校正的秒脉冲时钟，</strong></p><p>第二个： <strong>RTC入侵检测校验功能</strong></p><p><strong>RTC校验功能，使能侵入检测功能。RTC时钟经64分频输出到侵入检测引脚TAMPER上 当 TAMPER引脚上的信号从 0变成1或者从 1变成 0(取决于备份控制寄存器BKP_CR的 TPAL位)，会产生一个侵入检测事件。侵入检测事件将所有数据备份寄存器内容清除。</strong></p><ul><li>也就是第一个是使能tamper（PC13）引脚作为时钟脉冲输出+ 第二个是使能tamper（PC13）引脚作为入侵检测功能</li></ul><p>下面是两个RTC的中断：</p><ul><li><strong>RTC全局中断RTC_IRQHandler()</strong>+ <strong>闹钟中断函数RTCAlarm_IRQHandler()</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/2020042514381771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/2020042514381771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p><strong>此处设置时间为2020&#x2F;04&#x2F;25 13:30:00</strong></p><ul><li>Data Format: 日期格式</li></ul><p><strong>Binary data format 十六进制 BCD data format BCD码进制</strong></p><p>使用自动配置，初始化时间必须使用BCD data format，原因是库函数存在bug，如果使用Binary data format，月份配置会出错，比如说11月，配置时会赋值为RTC_MONTH_NOVEMBER，而此宏定义值为0x11，也就是说其十进制值为17</p><ul><li><strong>Hours： 小时</strong> +  <strong>Minutes： 分钟</strong> +  <strong>Seconds： 秒</strong> +  <strong>Week Day： 星期</strong> +  <strong>Month 月份</strong> +  <strong>Date： 日期</strong> +  <strong>Year： 年份</strong></li></ul><p><strong>3 使能串口</strong><br><img src="https://img-blog.csdnimg.cn/20200425143944495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425143944495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"><br> <strong>使能一下串口，因为发送日期到上位机</strong></p><p><strong>4时钟源设置</strong><br><img src="https://img-blog.csdnimg.cn/20200425144337169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425144337169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><p>我的是 外部晶振为8MHz</p><ul><li>1选择外部时钟HSE 8MHz+ 2PLL锁相环倍频9倍+ 3系统时钟来源选择为PLL+ 4设置APB1分频器为 &#x2F;2+ 5 使能CSS监视时钟+ <strong>6 设置RTC时钟为LSE</strong></li></ul><p>32的时钟树框图 如果不懂的话请看<a href="https://blog.csdn.net/as480133937/article/details/98845509">《【STM32】系统时钟RCC详解(超详细，超全面)》</a></p><p><strong>5项目文件设置</strong><br><img src="https://img-blog.csdnimg.cn/20200425144600886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425144600886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><ul><li>1 设置项目名称+ 2 设置存储路径+ 3 选择所用IDE<br><img src="https://img-blog.csdnimg.cn/2020042514462236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/2020042514462236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></li></ul><p><strong>6创建工程文件</strong></p><p><strong>然后点击GENERATE CODE 创建工程</strong></p><p><strong>配置下载工具</strong> 新建的工程所有配置都是默认的 我们需要自行选择下载模式，勾选上下载后复位运行</p><p><img src="https://img-blog.csdnimg.cn/202004251446415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/202004251446415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><h4 id="RTC-HAL库函数"><a href="#RTC-HAL库函数" class="headerlink" title="RTC_HAL库函数"></a>RTC_HAL库函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*设置系统时间*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span> </span><br><span class="line"><span class="comment">/*读取系统时间*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*设置系统日期*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*读取系统日期*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*启动报警功能*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetAlarm</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*设置报警中断*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_SetAlarm_IT</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)</span></span><br><span class="line"><span class="comment">/*报警时间回调函数*/</span></span><br><span class="line">__weak <span class="keyword">void</span> <span class="title function_">HAL_RTC_AlarmAEventCallback</span><span class="params">(RTC_HandleTypeDef *hrtc)</span></span><br><span class="line"><span class="comment">/*写入后备储存器*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">HAL_RTCEx_BKUPWrite</span><span class="params">(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)</span></span><br><span class="line"><span class="comment">/*读取后备储存器*/</span></span><br><span class="line">uint32_t <span class="title function_">HAL_RTCEx_BKUPRead</span><span class="params">(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister  </span></span><br></pre></td></tr></table></figure><p>我们可以看到前面的四个函数，分别是</p><ul><li><strong>设置系统时间：HAL_RTC_SetTime();</strong>+ <strong>读取系统时间: HAL_RTC_GetTime();</strong>+ <strong>设置系统日期: HAL_RTC_SetDate();</strong>+ <strong>读取系统日期: HAL_RTC_GetDate();</strong></li></ul><p>因为系统的时间和日期开始的时候已经设置过了，所以我们这里只用两个读取函数</p><p> <strong>读取系统时间函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*读取系统时间*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetTime</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)</span></span><br></pre></td></tr></table></figure><p>功能： 获取RTC时钟的时间</p><p>参数：</p><ul><li>*hrtc RTC结构体参数 例：&amp;hi2c2 +  <strong>RTC_TimeTypeDef</strong> *sTime： 获取RTC时间的结构体， +  Format： <strong>获取时间的格式</strong> <strong>RTC_FORMAT_BIN 使用16进制 RTC_FORMAT_BCD 使用BCD进制</strong></li></ul><p> <strong>读取系统日期函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*读取系统日期*/</span></span><br><span class="line">HAL_StatusTypeDef <span class="title function_">HAL_RTC_GetDate</span><span class="params">(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)</span></span><br></pre></td></tr></table></figure><p>功能： 获取RTC时钟的日期</p><p>参数：</p><ul><li>*hrtc RTC结构体参数 例：&amp;hi2c2 +  <strong>RTC_DateTypeDef</strong> *sTime： 获取RTC日期的结构体， +  Format： <strong>获取日期的格式</strong> <strong>RTC_FORMAT_BIN 使用16进制 RTC_FORMAT_BCD 使用BCD进制</strong></li></ul><p>在stm32f1xx_hal_rtc.h头文件中，可以找到<code>RTC_TimeTypeDef</code>，<code>RTC_DateTypeDef</code>这两个结构体的成员变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * @brief  RTC Time structure definition</span><br><span class="line">  */</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  uint8_t Hours;            /*!&lt; Specifies the RTC Time Hour.</span><br><span class="line">                                 This parameter must be a number between Min_Data = 0 and Max_Data = 23 */</span><br><span class="line"></span><br><span class="line">  uint8_t Minutes;          /*!&lt; Specifies the RTC Time Minutes.</span><br><span class="line">                                 This parameter must be a number between Min_Data = 0 and Max_Data = 59 */</span><br><span class="line"></span><br><span class="line">  uint8_t Seconds;          /*!&lt; Specifies the RTC Time Seconds.</span><br><span class="line">                                 This parameter must be a number between Min_Data = 0 and Max_Data = 59 */</span><br><span class="line"></span><br><span class="line">&#125; RTC_TimeTypeDef;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * @brief  RTC Date structure definition</span><br><span class="line">  */</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  uint8_t WeekDay;  /*!&lt; Specifies the RTC Date WeekDay (not necessary for HAL_RTC_SetDate).</span><br><span class="line">                         This parameter can be a value of @ref RTC_WeekDay_Definitions */</span><br><span class="line"></span><br><span class="line">  uint8_t Month;    /*!&lt; Specifies the RTC Date Month (in BCD format).</span><br><span class="line">                         This parameter can be a value of @ref RTC_Month_Date_Definitions */</span><br><span class="line"></span><br><span class="line">  uint8_t Date;     /*!&lt; Specifies the RTC Date.</span><br><span class="line">                         This parameter must be a number between Min_Data = 1 and Max_Data = 31 */</span><br><span class="line"></span><br><span class="line">  uint8_t Year;     /*!&lt; Specifies the RTC Date Year.</span><br><span class="line">                         This parameter must be a number between Min_Data = 0 and Max_Data = 99 */</span><br><span class="line"></span><br><span class="line">&#125; RTC_DateTypeDef;</span><br></pre></td></tr></table></figure><p><strong>程序代码：</strong></p><p>main.c</p><p><strong>在main.c中重写fputc函数，使得能够使用printf函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdio.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int fputc(int ch,FILE *f)&#123;</span><br><span class="line"> uint8_t temp[1]=&#123;ch&#125;;</span><br><span class="line"> HAL_UART_Transmit(&amp;huart1,temp,1,2);</span><br><span class="line"> return ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义两个结构体来获取日期和时间：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RTC_DateTypeDef GetData;  //获取日期结构体</span><br><span class="line"></span><br><span class="line">RTC_TimeTypeDef GetTime;   //获取时间结构体</span><br></pre></td></tr></table></figure><p>在while循环中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* Get the RTC current Time */</span><br><span class="line">HAL_RTC_GetTime(&amp;hrtc, &amp;GetTime, RTC_FORMAT_BIN);</span><br><span class="line">   /* Get the RTC current Date */</span><br><span class="line">   HAL_RTC_GetDate(&amp;hrtc, &amp;GetData, RTC_FORMAT_BIN);</span><br><span class="line"></span><br><span class="line">   /* Display date Format : yy/mm/dd */</span><br><span class="line">   printf(&quot;%02d/%02d/%02d\r\n&quot;,2000 + GetData.Year, GetData.Month, GetData.Date);</span><br><span class="line">   /* Display time Format : hh:mm:ss */</span><br><span class="line">   printf(&quot;%02d:%02d:%02d\r\n&quot;,GetTime.Hours, GetTime.Minutes, GetTime.Seconds);</span><br><span class="line"></span><br><span class="line">   printf(&quot;\r\n&quot;);</span><br><span class="line"></span><br><span class="line">   HAL_Delay(1000);</span><br></pre></td></tr></table></figure><p><strong>程序中使用HAL_RTC_GetTime（）,HAL_RTC_GetDate()读取时间和日期，并保存到结构体变量中，然后通过串口输出读取的时间和日期。</strong></p><p><strong>例程测试正常：</strong><br><img src="https://img-blog.csdnimg.cn/20200425153330941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200425153330941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70"></p><h4 id="RTC掉电重置"><a href="#RTC掉电重置" class="headerlink" title="RTC掉电重置"></a>RTC掉电重置</h4><p>但是呢，在hal库中生成的代码，<strong>每次断电就RTC时间会重置</strong>，每次上电都会重新初始化时间</p><p>因为HAL库设置了一个BKP寄存器保存一个标志。每次单片机启动时都读取这个标志并判断是不是预先设定的值：如度果不是就初始化RTC并设置时间，再设置标志为预期值；如果是预期值就跳过初始化和时间设置，继续执行后面的程序</p><p><strong>所以这里我们只需要每次上电执行RTC初始化之前，将标志设置为预期值即可</strong></p><p><strong>在rtc.c中的RTC_Init修改为以下内容即可</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"> void MX_RTC_Init(void)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN RTC_Init 0 */</span><br><span class="line">RTC_TimeTypeDef time;   //时间结构体参数</span><br><span class="line">RTC_DateTypeDef datebuff;   //日期结构体参数</span><br><span class="line">  /* USER CODE END RTC_Init 0 */</span><br><span class="line"></span><br><span class="line">  RTC_TimeTypeDef sTime = &#123;0&#125;;</span><br><span class="line">  RTC_DateTypeDef DateToUpdate = &#123;0&#125;;</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN RTC_Init 1 */</span><br><span class="line">__HAL_RCC_BKP_CLK_ENABLE();       //开启后备区域时钟</span><br><span class="line">__HAL_RCC_PWR_CLK_ENABLE();  //开启电源时钟</span><br><span class="line">  /* USER CODE END RTC_Init 1 */</span><br><span class="line">  /**Initialize RTC Only </span><br><span class="line">  */</span><br><span class="line">  hrtc.Instance = RTC;</span><br><span class="line">  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;</span><br><span class="line">  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;</span><br><span class="line">  if (HAL_RTC_Init(&amp;hrtc) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* USER CODE BEGIN Check_RTC_BKUP */</span><br><span class="line">if(HAL_RTCEx_BKUPRead(&amp;hrtc,RTC_BKP_DR1)!= 0x5051)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  /* USER CODE END Check_RTC_BKUP */</span><br><span class="line"></span><br><span class="line">  /**Initialize RTC and set the Time and Date </span><br><span class="line">  */</span><br><span class="line">  sTime.Hours = 0x14;</span><br><span class="line">  sTime.Minutes = 0x30;</span><br><span class="line">  sTime.Seconds = 0x0;</span><br><span class="line"></span><br><span class="line">  if (HAL_RTC_SetTime(&amp;hrtc, &amp;sTime, RTC_FORMAT_BCD) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;</span><br><span class="line">  DateToUpdate.Month = RTC_MONTH_APRIL;</span><br><span class="line">  DateToUpdate.Date = 0x25;</span><br><span class="line">  DateToUpdate.Year = 0x20;</span><br><span class="line"></span><br><span class="line">  if (HAL_RTC_SetDate(&amp;hrtc, &amp;DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">  /* USER CODE BEGIN RTC_Init 2 */</span><br><span class="line"></span><br><span class="line">__HAL_RTC_SECOND_ENABLE_IT(&amp;hrtc,RTC_IT_SEC); //开启RTC时钟秒中断</span><br><span class="line">datebuff = DateToUpdate;  //把日期数据拷贝到自己定义的data中</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR1, 0x5051);//向指定的后备区域寄存器写入数据</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR2, (uint16_t)datebuff.Year);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR3, (uint16_t)datebuff.Month);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR4, (uint16_t)datebuff.Date);</span><br><span class="line">HAL_RTCEx_BKUPWrite(&amp;hrtc, RTC_BKP_DR5, (uint16_t)datebuff.WeekDay);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">datebuff.Year    = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR2);</span><br><span class="line">datebuff.Month   = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR3);</span><br><span class="line">datebuff.Date    = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR4);</span><br><span class="line">datebuff.WeekDay = HAL_RTCEx_BKUPRead(&amp;hrtc, RTC_BKP_DR5);</span><br><span class="line">DateToUpdate = datebuff;</span><br><span class="line">if (HAL_RTC_SetDate(&amp;hrtc, &amp;DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line">Error_Handler();</span><br><span class="line">&#125;</span><br><span class="line">__HAL_RTC_SECOND_ENABLE_IT(&amp;hrtc,RTC_IT_SEC); //开启RTC时钟秒中断</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425165901167.gif" alt="https://img-blog.csdnimg.cn/20200425165901167.gif"></p><p><img src="https://img-blog.csdnimg.cn/20200425165904365.gif" alt="https://img-blog.csdnimg.cn/20200425165904365.gif"></p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32 HAL GPIO详细篇</title>
      <link href="/2024/03/STM32HAL%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94GPIO/"/>
      <url>/2024/03/STM32HAL%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94GPIO/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><p>GPIO全名为General Purpose Input Output，即通用输入输出。有时候简称为“IO口”。通用，说明它是常见的。输入输出，就是说既能当输入口使用，又能当输出口使用。端口，就是元器件上的一个引脚。</p><p>输入模式和输出模式是GPIO的基本特性，当然GPIO还有其它模式可选。</p><p><img src="https://img-blog.csdnimg.cn/4b4a4a4a754c42a686395c54851dac7f.png" alt="./figures/4b4a4a4a754c42a686395c54851dac7f.png"></p><h3 id="IO耐压问题"><a href="#IO耐压问题" class="headerlink" title="IO耐压问题"></a>IO耐压问题</h3><p>STM32是一款3.3V电压的芯片，IO输出是3.3V,但IO大部分都是可以容忍5V电压输入。一般在芯片手册的“引脚定义”章节可以查看到有FT标识表示该IO可以容忍5V电压输入。</p><p><img src="https://img-blog.csdnimg.cn/417fa39b882b42de99526837d5af45b2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP56W655qE5a6d5a6d,size_20,color_FFFFFF,t_70,g_se,x_16" alt="./figures/417fa39b882b42de99526837d5af45b2.png"></p><h2 id="二、在HAL库中的GPIO的模式"><a href="#二、在HAL库中的GPIO的模式" class="headerlink" title="二、在HAL库中的GPIO的模式"></a>二、在HAL库中的GPIO的模式</h2><h2 id="１、输入模式GPIO＿Input"><a href="#１、输入模式GPIO＿Input" class="headerlink" title="１、输入模式GPIO＿Input"></a>１、输入模式GPIO＿Input</h2><h4 id="上拉或下拉输入（GPIO-Pull-up／Pull-down）："><a href="#上拉或下拉输入（GPIO-Pull-up／Pull-down）：" class="headerlink" title="上拉或下拉输入（GPIO　Pull-up／Pull-down）："></a>上拉或下拉输入（GPIO　Pull-up／Pull-down）：</h4><p>        ｜浮空输入（No　pull－up　and　no　pull－down）：引脚电平是真实的外部连接器件电压，电平有不确定性</p><p>        ｜上拉输入（Pull－up）：默认通过电阻上拉到VCC,不接外部器件时可以读出高电平</p><p>        ｜下拉输入（Pull-down）：默认通过电阻下拉到GND,不接外部器件时可以读出低电平</p><h3 id="２、输出模式GPIO-Out"><a href="#２、输出模式GPIO-Out" class="headerlink" title="２、输出模式GPIO_Out"></a>２、输出模式GPIO_Out</h3><h4 id="默认输出电平（GPIO-output-level）："><a href="#默认输出电平（GPIO-output-level）：" class="headerlink" title="默认输出电平（GPIO　output　level）："></a>默认输出电平（GPIO　output　level）：</h4><p>        ｜低电平（Low）：默认输出低电平</p><p>        ｜高电平（High）：默认输出高电平</p><h4 id="输出类型（GPIO-Mode）："><a href="#输出类型（GPIO-Mode）：" class="headerlink" title="输出类型（GPIO　Mode）："></a>输出类型（GPIO　Mode）：</h4><p>        ｜推挽输出（Output　Push　Pull）：一种使用一对选择性地从相连负载灌电流或者拉电流的器件的电路。</p><p>        ｜开漏输出（Output　Open　Drain）：高电平时没有驱动能力，需要借助外部上拉电阻完成对外驱动。</p><h4 id="上拉或下拉输出（GPIO-Pull-up／Pull-down）："><a href="#上拉或下拉输出（GPIO-Pull-up／Pull-down）：" class="headerlink" title="上拉或下拉输出（GPIO　Pull-up／Pull-down）："></a>上拉或下拉输出（GPIO　Pull-up／Pull-down）：</h4><p>        ｜浮空输出（No　pull－up　and　no　pull－down）：引脚电平是真实的外部连接器件电压，电平有不确定性</p><p>        ｜上拉输出（Pull－up）：默认通过电阻上拉到VCC,不接外部器件时可以输出高电平</p><p>        ｜下拉输出（Pull-down）：默认通过电阻下拉到GND,不接外部器件时可以输出低电平 </p><h4 id="输出频率（Maximum-output-speed）："><a href="#输出频率（Maximum-output-speed）：" class="headerlink" title="输出频率（Maximum　output　speed）："></a>输出频率（Maximum　output　speed）：</h4><p>        ｜低频率输出（LOW）</p><p>        ｜中频率输出（Medium）</p><p>        ｜高频率输出（High）</p><p>        ｜极高频率输出（Very　High）</p><h2 id="三、在CubeMX中修改引脚名称"><a href="#三、在CubeMX中修改引脚名称" class="headerlink" title="三、在CubeMX中修改引脚名称"></a>三、在CubeMX中修改引脚名称</h2><p>        1.在左侧找到System Core-&gt;GPIO；</p><p>        2.找到应对的GPIO，例如PH10；</p><p>        3.在下方的配置单中User Label 填写命名，填好后会在芯片缩略图中更新</p><p>        4.点击 GENERATE CODE 生成代码</p><h2 id="四、常用引脚输入函数"><a href="#四、常用引脚输入函数" class="headerlink" title="四、常用引脚输入函数"></a>四、常用引脚输入函数</h2><p>        函数名：HAL_GPIO_ReadPin(参数1,参数2)</p><p>        函数作用：读取对应的引脚电平</p><p>        返回值：若读取到高电平，则返回GPIO_PIN_SET；反之，读取到低电平，则返回GPIO_PIN_RESET      </p><p>        参数1：GPIOx      对应GPIO总线，其中x可以是A…I，例如PH10，则输入GPIOH</p><p>        参数2：GPIO_Pin   对应引脚数，可以是1…15，例如PH10，则输入GPIO_PIN_10</p><h2 id="五、常用引脚输出函数"><a href="#五、常用引脚输出函数" class="headerlink" title="五、常用引脚输出函数"></a>五、常用引脚输出函数</h2><p>        函数名：HAL_GPIO_WritePin(参数1,参数2,参数3)</p><p>        函数作用：使对应的引脚输出高电平或者低电平</p><p>        返回值：viod</p><p>        参数1：GPIOx      对应GPIO总线，其中x可以是A…I，例如PH10，则输入GPIOH</p><p>        参数2：GPIO_Pin   对应引脚数，可以是1…15，例如PH10，则输入GPIO_PIN_10</p><p>        参数3：PinState    GPIO_PIN_RESET，输出低电平；GPIO_PIN_SET，输出高电平</p><p>（若修改对应引脚的名字，例如PH10修改为LED，则输入 HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,参数3)）</p><h2 id="六、其他常用函数"><a href="#六、其他常用函数" class="headerlink" title="六、其他常用函数"></a>六、其他常用函数</h2><p>        函数名：HAL_GPIO_ToglePin(参数1,参数2)</p><p>        函数作用：翻转对应引脚的电平</p><p>        返回值：viod</p><p>        参数1：GPIOx      对应GPIO总线，其中x可以是A…I，例如PH10，则输入GPIOH</p><p>        参数2：GPIO_Pin   对应引脚数，可以是1…15，例如PH10，则输入GPIO_PIN_10</p><p>        </p><p>        函数名：HAL_Delay(参数1)</p><p>        函数作用：延时</p><p>        返回值：void</p><p>        参数1：常数，单位ms</p><p>参考文章：<a href="https://www.cnblogs.com/dongxiaodong/p/14128088.html">STM32 GPIO详细篇（基于HAL库）</a></p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
          <category> stm32 hal库开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用教程</title>
      <link href="/2024/03/usageOfHexo/"/>
      <url>/2024/03/usageOfHexo/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo使用教程"><a href="#hexo使用教程" class="headerlink" title="hexo使用教程"></a>hexo使用教程</h1><h2 id="1-发布文章"><a href="#1-发布文章" class="headerlink" title="1. 发布文章"></a>1. 发布文章</h2><p>1.新建文章<br>&emsp;&emsp;使用如下命令来新建文章：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] \&lt;title\&gt; </span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;其中layout是文章的布局，默认为post，可以先不写。title 是文章的标题，也是文件的名字，存储在source&#x2F;_posts下。在编写文章的shi’hshih ，有时候会遇见无法缩进的问题，可以使用如下字符进行缩进：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不换行空格: \&amp;nbsp;或\&amp;#160;</span><br><span class="line">半角空格: \&amp;ensp;或\&amp;#8194;</span><br><span class="line">全角空格: \&amp;emsp;或\&amp;#8195;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;写好文章后，输入如下命令进行发布：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2024/03/linux-common-cmd/"/>
      <url>/2024/03/linux-common-cmd/</url>
      
        <content type="html"><![CDATA[<h1 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h1><h2 id="1-tmux"><a href="#1-tmux" class="headerlink" title="1. tmux"></a>1. tmux</h2><p>1.暂时退出窗口</p><blockquote><p>ctrl + b , d</p></blockquote><p>2.查看tmux历史log</p><blockquote><p>ctrl + b , [<br>此命令会进入到复制模式，可以查看tmux当前窗口的历史log，使用q键可以退出此模式</p></blockquote><p>3.查看当前开了哪些tmux窗口</p><blockquote><p>tmux list-windows</p></blockquote><p>4.重命名当前窗口的名字：</p><blockquote><p>Ctrl + b, ,<br>确保当前处于要重命名的窗口中。按下快捷键 Ctrl + b, , (逗号键)。这会使当前窗口的名称进入编辑状态。</p></blockquote><p>5.切换到别的窗口：</p><blockquote><p>tmux switch-client -t 2:0<br>其中2为作业号，0为窗口号<br>tmux attach-session -t 10<br>此处10为作业号</p></blockquote><h2 id="2-ip命令"><a href="#2-ip命令" class="headerlink" title="2. ip命令"></a>2. ip命令</h2><h2 id="2-1-网络接口管理"><a href="#2-1-网络接口管理" class="headerlink" title="2.1 网络接口管理"></a>2.1 网络接口管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ip <span class="built_in">link</span> show <span class="comment">#显示所有网络接口信息</span></span><br><span class="line">ip <span class="built_in">link</span> show dev eth0 <span class="comment">#显示指定网络接口信息</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 up <span class="comment"># 启用指定网络接口</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 down <span class="comment"># 禁用指定网络接口</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> dev eth0 address 00:11:22:33:44:55 <span class="comment">#设置指定网络接口的mac地址</span></span><br><span class="line">ip addr add 192.168.1.2/24 dev eth0 <span class="comment">#配置ip地址</span></span><br><span class="line">ip addr del 192.168.1.2/24 dev eth0 <span class="comment">#删除ip地址</span></span><br></pre></td></tr></table></figure><h2 id="2-2-路由管理"><a href="#2-2-路由管理" class="headerlink" title="2.2 路由管理"></a>2.2 路由管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip route show <span class="comment">#显示路由表</span></span><br><span class="line">ip route add 192.168.2.0/24 via 192.168.1.1 dev eth0 <span class="comment">#添加静态路由</span></span><br><span class="line">ip route del 192.168.2.0/24 <span class="comment">#删除路由</span></span><br></pre></td></tr></table></figure><h2 id="2-3-arp管理"><a href="#2-3-arp管理" class="headerlink" title="2.3 arp管理"></a>2.3 arp管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip neigh show<span class="comment">#显示arp缓存</span></span><br><span class="line">ip neigh add 192.168.1.1 lladdr 00:11:22:33:44:55 dev eth0 <span class="comment">#添加静态arp</span></span><br><span class="line">ip neigh del 192.168.1.1 dev eth0<span class="comment">#删除arp条目</span></span><br></pre></td></tr></table></figure><h2 id="2-4-其他"><a href="#2-4-其他" class="headerlink" title="2.4 其他"></a>2.4 其他</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w net.ipv4.ip_forward=1 <span class="comment">#启用ip转发</span></span><br><span class="line">ip neigh show <span class="comment">#显示邻居缓存</span></span><br><span class="line">ip -s <span class="built_in">link</span> i希纳是统计信息</span><br></pre></td></tr></table></figure><h2 id="3-brctl"><a href="#3-brctl" class="headerlink" title="3. brctl"></a>3. brctl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brctl show <span class="comment"># 显示网络桥接信息</span></span><br><span class="line">brctl addbr mybridge <span class="comment"># 创建一个新的网络桥接</span></span><br><span class="line">brctl addif mybridge eth0 <span class="comment"># 将网络接口添加到桥接</span></span><br><span class="line">brctl delif mybridge eth0 <span class="comment"># 从桥接中移除网络接口</span></span><br><span class="line">brctl delbr mybridge<span class="comment"># 删除网络桥接</span></span><br></pre></td></tr></table></figure><h2 id="4-du"><a href="#4-du" class="headerlink" title="4. du"></a>4. du</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -sh <span class="comment">#查看当前目录的使用情况</span></span><br><span class="line"><span class="built_in">du</span> -h --max-depth=1<span class="comment">#逐级显示子目录的磁盘使用情况</span></span><br><span class="line"><span class="built_in">du</span> -h --max-depth=1 * <span class="comment">#显示每个文件和目录的磁盘使用情况</span></span><br><span class="line"><span class="built_in">du</span> -h --max-depth=1 | <span class="built_in">sort</span> -h <span class="comment">#按大小排序显示文件和目录</span></span><br></pre></td></tr></table></figure><h2 id="5-sort排序命令"><a href="#5-sort排序命令" class="headerlink" title="5. sort排序命令"></a>5. sort排序命令</h2><p>5.1 经典用法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span> filename <span class="comment">#对文件的每一行信息按照字典顺序排序，并输出到当前目录</span></span><br><span class="line"><span class="built_in">sort</span> -n filename <span class="comment">#对文件的每一行信息按照数字顺序排序，并输出到当前目录</span></span><br><span class="line"><span class="built_in">sort</span> -r filename <span class="comment">#对文件的每一行信息按照字典倒序排序，并输出到当前目录</span></span><br><span class="line"><span class="built_in">sort</span> -u filename <span class="comment">#对文件的每一行信息按照字典顺序并且去重排序，并输出到当前目录</span></span><br><span class="line"><span class="built_in">sort</span> -k&lt;列数&gt; filename <span class="comment">#按列排序</span></span><br><span class="line"><span class="built_in">sort</span> -n -k&lt;列数&gt; filename <span class="comment">#按数字字段排序</span></span><br><span class="line"><span class="built_in">sort</span> -t<span class="string">&#x27;:&#x27;</span> -k2 filename <span class="comment">#自定义分隔符使用 -t 选项指定字段分隔符，例如 :，然后使用 -k 选项按照指定列排序</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;b\na\nc&quot;</span> | <span class="built_in">sort</span> <span class="comment">#从标准输入读取数据并排序</span></span><br></pre></td></tr></table></figure><h2 id="6-i2ctools"><a href="#6-i2ctools" class="headerlink" title="6. i2ctools"></a>6. i2ctools</h2><p>6.1 i2cset命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i2cset -f -y 0x1 0x48 0x03 0x0020 w</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其中,-y 指定了i2c控制器为i2c1，0x48为i2c设备的地址，0x03为寄存器偏移量，他表示了寄存器地址，0x0020为要写入的数据。w表示以字（16 位）为单位读写，还可以选择其他读写单位：b，以字节（8 位）为单位读取；c， 以字符（ASCII）为单位读取。</p><p>6.2 i2cget命令</p><p>&emsp;&emsp;use example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i2cget -y 1 0x48 0x03 w <span class="comment">#以字为单位，读取i2c地址为0x48，寄存器0x03的数据</span></span><br></pre></td></tr></table></figure><h2 id="7-dd"><a href="#7-dd" class="headerlink" title="7.dd"></a>7.dd</h2><p>&emsp;&emsp;命令基本形式：</p><pre><code>    dd if=input_file of=output_file bs=block_size options</code></pre><p>examples:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/dev/mmcblk0gp0 bs=512 count=1024 seek=3072</span><br><span class="line"><span class="comment"># 指定块大小为512，复制块数为1024，跳过输出文件的前3072块。（也就是从输出文件的第3072*512处开始，将输入文件的数据复制进去）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/dev/mmcblk0gp0 bs=512 count=1024 skip=3072</span><br><span class="line"><span class="comment"># 指定块大小为512，复制块数为1024，跳过输入文件的前3072块。（也就是从输入文件的第3072*512处开始，将往后的512*1024块数据复制进输出文件。（从输出文件的0x00地址开始））</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;dd命令还有一些其他的可选命令选项，具体为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">• bs=1024：设置块大小为1024字节，即1KB。这是<span class="built_in">dd</span>每次读取和写入的数据块大小。</span><br><span class="line">• count：指定要复制的块数或数据块的数量。</span><br><span class="line">• skip 在复制之前跳过输入文件的块数或字节数。用于设置输入文件的起始位置，即在输入文件中跳过一定数量的块</span><br><span class="line">• seek：在写入之前跳过输出文件的块数或字节数。用于设置输出文件的起始位置，即在输出文件中跳过一定数量的块</span><br><span class="line">• iflag：设置输入选项，例如iflag=direct表示直接访问输入文件而不进行缓存。</span><br><span class="line">• oflag：设置输出选项，例如oflag=direct表示直接写入输出文件而不进行缓存。</span><br><span class="line">• status=progress：显示复制进度信息</span><br></pre></td></tr></table></figure><h2 id="8-stty命令"><a href="#8-stty命令" class="headerlink" title="8.stty命令"></a>8.stty命令</h2><p>&emsp;&emsp;stty命令可以修改终端驱动程序里的设置，可以用来显示和修改终端命令。下面是它的常见用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stty</span> size;<span class="comment">#显示终端的大小，也就是行数和列数，加上-a可以显示的更加详细。</span></span><br><span class="line"><span class="comment">#此外，有的时候在终端误按ctrl+s导致终端僵死，此时按下ctrl+q便可以使终端回复；</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stty</span> -F /dev/tty0 115200; <span class="comment">#设置串口波特率为115200</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">stty</span> -a -F /dev/tty2; <span class="comment">#检查当前串口2的设置</span></span><br></pre></td></tr></table></figure><h2 id="9-使用命令行进行简单的串口通信"><a href="#9-使用命令行进行简单的串口通信" class="headerlink" title="9.使用命令行进行简单的串口通信"></a>9.使用命令行进行简单的串口通信</h2><ol><li>首先使用stty设置串口波特率<blockquote><p>stty -F &#x2F;dev&#x2F;ttyAMA1 115200</p></blockquote></li><li>使用echo向串口发送信息<blockquote><p>echo “Hello world” &gt; &#x2F;dev&#x2F;ttyAMA1 </p></blockquote></li><li>使用cat打印当前串口返回的信息<blockquote><p>cat &#x2F;dev&#x2F;ttyAMA1</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux常用命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
